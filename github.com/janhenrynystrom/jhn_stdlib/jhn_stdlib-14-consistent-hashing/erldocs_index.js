var index = [['app','jhn_stdlib','jhn_stdlib','[application]'],['mod','jhn_stdlib','lazy','    A lazy lib.'],['mod','jhn_stdlib','msgpack','    A MessagePack to and from erlang terms librar'],['mod','jhn_stdlib','plist','     A property list style handling of {Key, Valu'],['fun','jhn_stdlib','lazy:append/2','    Lazy data is constructed from data and lazy d'],['fun','jhn_stdlib','lazy:concat/1','    Lazy data is constructed from lazy data and l'],['fun','jhn_stdlib','lazy:create/1','    Given a promise, lazy data is created.'],['fun','jhn_stdlib','lazy:create/2','    Given a promise and an initial state, statefu'],['fun','jhn_stdlib','lazy:empty/0','    Creates an empty LazyData that just returns e'],['fun','jhn_stdlib','lazy:file_stream_to_data/1','    A Lazy binary is constructed from the stream,'],['fun','jhn_stdlib','lazy:file_to_data/1','    A Lazy binary is constructed from the stream,'],['fun','jhn_stdlib','lazy:iolist_to_data/1','    A Lazy binary is constructed from an iolist.'],['fun','jhn_stdlib','lazy:list_to_data/1','    Lazy data is constructed from a list.'],['fun','jhn_stdlib','lazy:prepend/2','    Lazy data is constructed from data and lazy d'],['fun','jhn_stdlib','lazy:tcp_reconnect_to_data/3','    A Lazy binary is constructed from the socket '],['fun','jhn_stdlib','lazy:tcp_socket_to_data/1','    A Lazy binary is constructed from the socket,'],['fun','jhn_stdlib','lazy:tcp_to_data/2','    A Lazy binary is constructed from the socket '],['fun','jhn_stdlib','lazy:tcp_to_data/3','    A Lazy binary is constructed from the socket '],['fun','jhn_stdlib','lazy:tcp_to_data/3','    A Lazy binary is constructed from the socket '],['fun','jhn_stdlib','msgpack:decode/1','    Decodes the binary into a structured Erlang.'],['fun','jhn_stdlib','msgpack:decode/1','    Decodes the binary into a structured Erlang t'],['fun','jhn_stdlib','msgpack:encode/1','    Encodes the structured Erlang term as an ioli'],['fun','jhn_stdlib','msgpack:encode/1','    Encodes the structured Erlang term as an ioli'],['fun','jhn_stdlib','plist:add/1','    Extends Plist with the property checking if i'],['fun','jhn_stdlib','plist:add/1','    Extends Plist with the property without check'],['fun','jhn_stdlib','plist:compact/1','    Ensures one property per key, with the first '],['fun','jhn_stdlib','plist:delete/1','    Restricts Plist on the key without checking i'],['fun','jhn_stdlib','plist:delete/1','    Restricts Plist on the key without checking i'],['fun','jhn_stdlib','plist:find/1','    Finds the value of the property or Default if'],['fun','jhn_stdlib','plist:find/1','    Finds the value of the property or Default if'],['fun','jhn_stdlib','plist:find/1','    Finds the value of the property or undefined '],['fun','jhn_stdlib','plist:find_all/1','    Finds the all values associated with the key.'],['fun','jhn_stdlib','plist:keys/1','    Returns all the keys.'],['fun','jhn_stdlib','plist:member/1','    Returns wether the key is to be found in the '],['fun','jhn_stdlib','plist:new/0','    Creates an empty plist.'],['fun','jhn_stdlib','plist:new/1','    Creates a plist from the zipping the lists of'],['fun','jhn_stdlib','plist:replace/1','    Replaces the first occurence in the PList, es'],['fun','jhn_stdlib','plist:replace/1','    Replaces the first occurence in the PList, ad'],['fun','jhn_stdlib','plist:values/1','    Returns all the values.']];