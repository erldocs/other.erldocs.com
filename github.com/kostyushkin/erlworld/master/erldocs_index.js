var index = [['app','erlworld','erlworld','[application]'],['mod','erlworld','actor_state','   The actor_state is essentially a map that stor'],['mod','erlworld','collisions','This defines the interface for the collisions modu'],['mod','erlworld','collisions_list','A list based collisions object that implements the'],['mod','erlworld','color','   Defines how to create colours and how to retri'],['mod','erlworld','controls','   This is a module for defining how control info'],['mod','erlworld','controls_handler','   This is a data collection for storing the curr'],['mod','erlworld','data_server','   The Data Server is a special type of server th'],['mod','erlworld','display','   This is essentially a window that the framewor'],['mod','erlworld','doc_gen','   This module is designed for handling generatin'],['mod','erlworld','fps_actor','   This is a helper actor for use with debugging.'],['mod','erlworld','function_server','   This is an extension on the data_server.'],['mod','erlworld','graphics','   This is a high level abstraction above the und'],['mod','erlworld','image','   This is for handling image loading and defines'],['mod','erlworld','mainloop','   This is the mainloop structure in a game.'],['mod','erlworld','rand','A random number generator server.'],['mod','erlworld','steering','   Implementation of steering behaviours for Erla'],['mod','erlworld','text_image',[]],['mod','erlworld','util','   The Util module is where the utility functions'],['mod','erlworld','vec2d','   Helper code for 2d vector algebra.'],['mod','erlworld','world','   The World module is conceptually a sub-class o'],['mod','erlworld','world_state','   This is for holding and representing the data '],['fun','erlworld','actor_state:get/1','Returns the property requested from this actor sta'],['fun','erlworld','actor_state:get_actor/1','Returns the process id of the last Actor that this'],['fun','erlworld','actor_state:get_height/1','Returns the height of this actor_state.'],['fun','erlworld','actor_state:get_name/1','Retrieves the name for this actor_state.'],['fun','erlworld','actor_state:get_on_remove/1','Returns the fun that will be run when the actor is'],['fun','erlworld','actor_state:get_size/1','Returns the width and height of this actor.'],['fun','erlworld','actor_state:get_width/1','Returns the width of this actor_state.'],['fun','erlworld','actor_state:get_x/1','Returns the X location of this actor_state.'],['fun','erlworld','actor_state:get_xy/1','retrieves the X and Y location of this actor_state'],['fun','erlworld','actor_state:get_y/1','Returns the Y location of this actor_state.'],['fun','erlworld','actor_state:is_intersection/1','Returns the result of a simple box shaped bounds c'],['fun','erlworld','actor_state:move/1','Returns the given actor_state moved by the given a'],['fun','erlworld','actor_state:move/1','Returns the given actor_state moved by the given a'],['fun','erlworld','actor_state:new/0','Creates a new Actor located at 0,0 with size 1,1 a'],['fun','erlworld','actor_state:new/1','Creates a new actor_state with the given name, loc'],['fun','erlworld','actor_state:new/1','Creates a new actor_state with the given name, loc'],['fun','erlworld','actor_state:new/1','Creates a new default actor but with the list of p'],['fun','erlworld','actor_state:set/1','Sets the given key and value to this actor state.'],['fun','erlworld','actor_state:set/1','Sets a given list of properties to the given actor'],['fun','erlworld','actor_state:set_height/1','Sets the height for this actor_state, it must be g'],['fun','erlworld','actor_state:set_name/1','This sets an identifyer for naming this actor_stat'],['fun','erlworld','actor_state:set_on_remove/1','Sets a fun which will be run when this is removed '],['fun','erlworld','actor_state:set_size/1','Sets the size of this actor_state, neither width o'],['fun','erlworld','actor_state:set_size/1','Sets the size of this actor_state, neither width o'],['fun','erlworld','actor_state:set_width/1','Sets the width for this actor_state, it must be gr'],['fun','erlworld','actor_state:set_x/1','This sets just the X location of this actor_state.'],['fun','erlworld','actor_state:set_xy/1','This sets a new X and Y location of this actor_sta'],['fun','erlworld','actor_state:set_xy/1','This sets a new X and Y location of this actor_sta'],['fun','erlworld','actor_state:set_y/1','Sets the Y co-ordinate of this actor_state.'],['fun','erlworld','collisions:add/1','This is called to add an actor to the collisions o'],['fun','erlworld','collisions:apply_to_intersecting_actor/5',[]],['fun','erlworld','collisions:apply_to_intersecting_actor/6','This will search for one actors that intersect the'],['fun','erlworld','collisions:apply_to_intersecting_actors/5',[]],['fun','erlworld','collisions:apply_to_intersecting_actors/6','This will search for all actors that intersect the'],['fun','erlworld','collisions:new/1','This creates a new Collisions object defined by th'],['fun','erlworld','collisions:remove/1','This is called whenever an Actor is to be removed '],['fun','erlworld','collisions:remove_all/1','This removes all actors stored inside of this coll'],['fun','erlworld','collisions_list:new/0','Returns a new list based collisions object.'],['fun','erlworld','color:black/0','A predefined color, black.'],['fun','erlworld','color:blue/0','A predefined color, blue.'],['fun','erlworld','color:get_alpha/1','Returns the alpha component from the given colour.'],['fun','erlworld','color:get_blue/1','Returns the blue component from the given colour.'],['fun','erlworld','color:get_green/1','Returns the green component from the given colour.'],['fun','erlworld','color:get_red/1','Returns the red component from the given colour.'],['fun','erlworld','color:green/0','A predefined color, green.'],['fun','erlworld','color:grey/0','A predefined color, grey.'],['fun','erlworld','color:new/1','Creates and returns a new Color object.'],['fun','erlworld','color:new/1','Creates and returns a new Color object with full a'],['fun','erlworld','color:orange/0','A predefined color, orange.'],['fun','erlworld','color:pink/0','A predefined color, pink.'],['fun','erlworld','color:purple/0','A predefined color, purple.'],['fun','erlworld','color:red/0','A predefined color, red.'],['fun','erlworld','color:white/0','A predefined color, white.'],['fun','erlworld','color:yellow/0','A predefined color, yellow.'],['fun','erlworld','controls:get_mouse_x/1','This returns the horizontal X location of the mous'],['fun','erlworld','controls:get_mouse_xy/1','This returns the location of the mouse in pixels i'],['fun','erlworld','controls:get_mouse_y/1','This returns the vertical Y location of the mouse.'],['fun','erlworld','controls:is_key_down/1','This is for checking if a particular key is curren'],['fun','erlworld','controls:is_mouse_down/1','This checks if the given button is down, and retur'],['fun','erlworld','controls_handler:get_controls/1','Requests a snapshot current state of the controls '],['fun','erlworld','controls_handler:new/0','Creates a new process that stores controls changes'],['fun','erlworld','controls_handler:set_key_char/1','Sets the current key character we are currently lo'],['fun','erlworld','controls_handler:set_key_down/1','Sets the key to be down for the given key code.'],['fun','erlworld','controls_handler:set_key_up/1','Sets the key to be up for the given key code.'],['fun','erlworld','controls_handler:set_mouse_down/1','Sets the button to be down for the value given.'],['fun','erlworld','controls_handler:set_mouse_location/1','Sets the mouse location stored in this ControlsHan'],['fun','erlworld','controls_handler:set_mouse_up/1','Sets the button to be up for the mouse button give'],['fun','erlworld','data_server:new/3',[]],['fun','erlworld','data_server:new/3',[]],['fun','erlworld','data_server:new_in_pid/3',[]],['fun','erlworld','data_server:new_in_pid/4',[]],['fun','erlworld','data_server:receive_request/1','Same as the other collect_request function only th'],['fun','erlworld','data_server:receive_request/1','Receives the return value from a previous sent req'],['fun','erlworld','data_server:request/1','Sends the message to the server and then returns t'],['fun','erlworld','data_server:request/1','Sends the message to the server and then returns t'],['fun','erlworld','data_server:request_timeout/1','The same as the other request_timeout function, on'],['fun','erlworld','data_server:request_timeout/1','A request reply, but with a timeout value.'],['fun','erlworld','data_server:send/1','Sends the given message, with the given parameters'],['fun','erlworld','data_server:send/1','Sends the message to the given data_server.'],['fun','erlworld','data_server:send_request/1','A request is sent but the function returns directl'],['fun','erlworld','data_server:send_request/1','This is the same as request, except that it does n'],['fun','erlworld','data_server:set_message_forward/1','Sets where to forward messages on to.'],['fun','erlworld','display:get_controls/1','Returns a snapshot of the current state of the con'],['fun','erlworld','display:get_height/1','Returns the height of the graphics area of the Dis'],['fun','erlworld','display:get_size/1','Return a tuple in the format {Width, Height} depic'],['fun','erlworld','display:get_width/1','Returns the width of the graphics area of the Disp'],['fun','erlworld','display:new/1','This new creates a new Display of the given Width '],['fun','erlworld','display:new/1','Creates a new Display of the given size and with t'],['fun','erlworld','display:new/1','This is exactly the same as the other new function'],['fun','erlworld','display:paint_actor/1','This paints the given Actor to this Display.'],['fun','erlworld','doc_gen:start/0',[]],['fun','erlworld','doc_gen:start/2',[]],['fun','erlworld','doc_gen:start/3',[]],['fun','erlworld','doc_gen:start_halt/1','This will run the start function once, and then ha'],['fun','erlworld','fps_actor:new/0','Creates a new FPS Actor.'],['fun','erlworld','function_server:new/0','Creates a new server with ok as its initial sta'],['fun','erlworld','function_server:new/1','Creates a new state that holds the given state.'],['fun','erlworld','function_server:new/3',[]],['fun','erlworld','function_server:new/5',[]],['fun','erlworld','function_server:new_spawn/3',[]],['fun','erlworld','function_server:new_spawn/5',[]],['fun','erlworld','function_server:receive_request/1','Equivalent to data_server:receive_request(Token).'],['fun','erlworld','function_server:receive_request/2','Equivalent to data_server:receive_request(TimeStam'],['fun','erlworld','function_server:receive_timeout/3','Equivalent to data_server:receive_timeout(Server, '],['fun','erlworld','function_server:receive_timeout/4','Equivalent to data_server:receive_timeout(Server, '],['fun','erlworld','function_server:request/2','Equivalent to data_server:request(Server, Message)'],['fun','erlworld','function_server:request/3','Equivalent to data_server:request(Server, Message,'],['fun','erlworld','function_server:send/2','Equivalent to data_server:send(Server, Message).'],['fun','erlworld','function_server:send/3','Equivalent to data_server:send(Server, Message, Pa'],['fun','erlworld','function_server:send_request/2','Equivalent to data_server:send_request(Server, Mes'],['fun','erlworld','function_server:send_request/3','Equivalent to data_server:send_request(Server, Mes'],['fun','erlworld','function_server:set_message_func/2','Registeres the given function onto the given serve'],['fun','erlworld','function_server:set_message_funcs/2','This registers a whole list of functions to this s'],['fun','erlworld','function_server:set_request_func/2','Registeres the given function onto the given serve'],['fun','erlworld','function_server:set_request_funcs/3','Same as set_message_funcs only this is for the on_'],['fun','erlworld','graphics:draw_image/1','Draws the given image at the location given.'],['fun','erlworld','graphics:draw_image/1','Draws the given image at the location given.'],['fun','erlworld','graphics:draw_image/1','Draws the given image at the location given.'],['fun','erlworld','graphics:draw_image/1','Draws the given image at the location given.'],['fun','erlworld','graphics:draw_image/1','Draws the given image at the location given.'],['fun','erlworld','graphics:draw_image_rotated/4',[]],['fun','erlworld','graphics:draw_image_rotated/5',[]],['fun','erlworld','graphics:draw_image_rotated/7',[]],['fun','erlworld','graphics:draw_line/3','Draws a Line to the given G from the start positio'],['fun','erlworld','graphics:draw_line/5','Draws a Line to the given G from the start positio'],['fun','erlworld','graphics:draw_oval/1','Draws the outline of an oval.'],['fun','erlworld','graphics:draw_oval/1','Draws the outline of an oval.'],['fun','erlworld','graphics:draw_oval/1','Draws the outline of an oval.'],['fun','erlworld','graphics:draw_oval/1','Draws the outline of an oval.'],['fun','erlworld','graphics:draw_oval/1','Draws the outline of an oval.'],['fun','erlworld','graphics:draw_point/2','Draws a single point at the position given.'],['fun','erlworld','graphics:draw_point/3','Draws a single point at the position given.'],['fun','erlworld','graphics:draw_polygon/1','Draws the outline of a closed polygon to the scree'],['fun','erlworld','graphics:draw_polygon/1','Draws the outline of a closed polygon to the scree'],['fun','erlworld','graphics:draw_polygon/1','Draws the outline of a closed polygon to the scree'],['fun','erlworld','graphics:draw_rect/1','Draws the outline of a rectangle.'],['fun','erlworld','graphics:draw_rect/1','Draws the outline of a rectangle.'],['fun','erlworld','graphics:draw_rect/1','Draws the outline of a rectangle.'],['fun','erlworld','graphics:draw_text/1','Draws the given piece of text to the display.'],['fun','erlworld','graphics:draw_text/1','Draws the text to the display using the Font given'],['fun','erlworld','graphics:draw_text/1','Draws the text to the display using the default fo'],['fun','erlworld','graphics:fill/1','Cleares the given Graphics object with its curren'],['fun','erlworld','graphics:fill_oval/1','Draws a filled oval.'],['fun','erlworld','graphics:fill_oval/1','Draws a filled oval.'],['fun','erlworld','graphics:fill_oval/1','Draws a filled oval.'],['fun','erlworld','graphics:fill_oval/1','Draws a filled oval.'],['fun','erlworld','graphics:fill_oval/1','Draws a filled oval.'],['fun','erlworld','graphics:fill_polygon/1','Fills a closed polygon to the screen using the poi'],['fun','erlworld','graphics:fill_polygon/1','Fills a closed polygon to the screen using the poi'],['fun','erlworld','graphics:fill_polygon/1','Fills a closed polygon to the screen using the poi'],['fun','erlworld','graphics:fill_rect/1','Draws a filled rectangle.'],['fun','erlworld','graphics:fill_rect/1','Draws a filled rectangle.'],['fun','erlworld','graphics:fill_rect/1','Draws a filled rectangle.'],['fun','erlworld','graphics:get_clear_color/1','Returns the colour used for clearing the screen.'],['fun','erlworld','graphics:get_color/1','Returns the current colour being used for drawing.'],['fun','erlworld','graphics:get_height/1','Returns the height of the drawing area inside of t'],['fun','erlworld','graphics:get_size/1','Returns the size of the drawing area in the window'],['fun','erlworld','graphics:get_width/1','Returns the width of the drawing area inside of th'],['fun','erlworld','graphics:new/1','Internal API function for creating a graphics obje'],['fun','erlworld','graphics:set_clear_color/1','Sets the clear color for this graphics object.'],['fun','erlworld','graphics:set_clear_color/1','Sets the clear color for this graphics object.'],['fun','erlworld','graphics:set_clear_color/1','Sets the clear color for this graphics object.'],['fun','erlworld','graphics:set_color/1','Sets the color to use when drawing.'],['fun','erlworld','graphics:set_color/1','Sets the color to use when drawing.'],['fun','erlworld','graphics:set_color/1','Sets the color to use when drawing.'],['fun','erlworld','image:destroy/1','Internally unloads this image from the graphics ca'],['fun','erlworld','image:get_height/1','The height of this image in pixels.'],['fun','erlworld','image:get_size/1','Returns the size of the image as it should appear '],['fun','erlworld','image:get_width/1','The width of this image in pixels.'],['fun','erlworld','image:new/1','Creates a new Image loaded from the given FileName'],['fun','erlworld','mainloop:get_actor/1','Gets and returns the actor running within this mai'],['fun','erlworld','mainloop:get_controls/1','Returns a snapshot to the current state of the con'],['fun','erlworld','mainloop:new/1','Creates and returns a new mainloop object which wr'],['fun','erlworld','mainloop:new/2',[]],['fun','erlworld','mainloop:run/1','Tells the mainloop to run with the given Actor.'],['fun','erlworld','mainloop:set_actor/1','Sets the actor to use as the root actor in this ma'],['fun','erlworld','mainloop:stop/1','Stops the mainloop running.'],['fun','erlworld','rand:destroy/1','Destroys the given random number generator process'],['fun','erlworld','rand:new/0','Spawns a new random number server and returns its'],['fun','erlworld','rand:random/1','Returns a number from Min to Max.'],['fun','erlworld','rand:random/1','Returns a number from 0 to Max.'],['fun','erlworld','steering:clamp_real/2','clamps real to interval [Xmin, Xmax].'],['fun','erlworld','steering:steer_to_align/2','Calculates angular force to minimize difference be'],['fun','erlworld','steering:steer_to_target_velocity/3','Calculates linear and angular steering-force for A'],['fun','erlworld','steering:steer_to_wander/1','wander behaviour.'],['fun','erlworld','steering:threshold_real/2','if X in [Xgmin, Xgmax], function returns 0.'],['fun','erlworld','steering:v_from_flee/3','Calculates a force to let A flee from B.'],['fun','erlworld','steering:v_from_seek/2','Calculates a force to let A seek B.'],['fun','erlworld','text_image:destroy/1','Equivalent to image:destroy(Image).'],['fun','erlworld','text_image:get_height/1','Equivalent to image:get_height(Image).'],['fun','erlworld','text_image:get_size/1','Equivalent to image:get_size(Image).'],['fun','erlworld','text_image:get_width/1','Equivalent to image:get_width(Image).'],['fun','erlworld','text_image:new/1','Creates an image displaying the given text using t'],['fun','erlworld','text_image:new/1','Creates a new textual image using the default font'],['fun','erlworld','util:for/1','This for loop will iterate from min to max where m'],['fun','erlworld','util:for/1','This for loop will iterate from 0 to max, but incr'],['fun','erlworld','util:for/1','The for loop applies a function to each value in t'],['fun','erlworld','util:foreach_count/1','This is the same as the for each function in the l'],['fun','erlworld','util:get_time/0','Returns the current time in milliseconds.'],['fun','erlworld','util:get_time_micros/0','Returns the current time in microseconds.'],['fun','erlworld','util:new_gb_tree/0','This is a helper function for creating a new gb_tr'],['fun','erlworld','util:remove_element/2',[]],['fun','erlworld','util:to_degrees/1','Converts the given degrees into radians.'],['fun','erlworld','util:to_radians/1','Converts the given value from radians to degrees.'],['fun','erlworld','vec2d:angle_to_dir/1',[]],['fun','erlworld','vec2d:clamp/2',[]],['fun','erlworld','vec2d:norm/1',[]],['fun','erlworld','vec2d:orthogonal/1',[]],['fun','erlworld','world:act/2','Equivalent to actor:act(Actor, Parent).'],['fun','erlworld','world:add_actor/1','Adds the given Actor to this World.'],['fun','erlworld','world:add_actors/1','Adds a the given list of Actors to this World.'],['fun','erlworld','world:apply_to_intersecting_actor/1','The full apply_to_intersecting_actor function.'],['fun','erlworld','world:apply_to_intersecting_actor/1','Intersects against the first actor whose name matc'],['fun','erlworld','world:apply_to_intersecting_actor/1','The same as the equivalent apply_to_intersecting_a'],['fun','erlworld','world:apply_to_intersecting_actors/1','The full apply_to_intersecting_actors function.'],['fun','erlworld','world:apply_to_intersecting_actors/1','Only intersects against actors with the given name'],['fun','erlworld','world:apply_to_intersecting_actors/1','Finds all actors that intersect the given actor, a'],['fun','erlworld','world:compare/2','Equivalent to actor:compare(ActorA, ActorB).'],['fun','erlworld','world:get_act/1','Equivalent to actor:get_act(Actor).'],['fun','erlworld','world:get_controls/1','Equivalent to actor:get_controls(Actor).'],['fun','erlworld','world:get_name/1','Equivalent to actor:get_name(Actor).'],['fun','erlworld','world:get_paint/1','Equivalent to actor:get_paint(Actor).'],['fun','erlworld','world:get_state/1','Equivalent to actor:get_state(Actor).'],['fun','erlworld','world:is_intersecting_actor/1','This is for testing for an intersection only again'],['fun','erlworld','world:is_intersecting_actor/1','This is a very basic check for any intersecting ac'],['fun','erlworld','world:new/0','Creates a new blank world with an empty state.'],['fun','erlworld','world:new/1','Creates a new world that will update the world_sta'],['fun','erlworld','world:new/2','Creates a blank World which will paint and update '],['fun','erlworld','world:new/3','Creates a new World with that will run the act and'],['fun','erlworld','world:paint/2','Equivalent to actor:paint(Actor, G).'],['fun','erlworld','world:receive_act/0','Equivalent to actor:receive_act().'],['fun','erlworld','world:remove_actor/1','Removes the given Actor from this World, if it is '],['fun','erlworld','world:remove_actors/1','Removes the given list of Actors from this World.'],['fun','erlworld','world:remove_all_actors/1','Empties the given World of all of the Actors it is'],['fun','erlworld','world:send_act/2','Equivalent to actor:send_act(Actor, Parent).'],['fun','erlworld','world:set_paint_order/1','Sets the painting order of the given Actor within '],['fun','erlworld','world_state:act_actors/1','Tells all of the actors inside of this world state'],['fun','erlworld','world_state:add_actor/1','Adds the given actor to this world state so it is '],['fun','erlworld','world_state:add_actor/3','Adds an actor to the given world_state with the gi'],['fun','erlworld','world_state:add_actors/1','Returns a world_state with the given list of actor'],['fun','erlworld','world_state:apply_to_intersecting_actor/1','Passes the call to check for a collision onto its'],['fun','erlworld','world_state:apply_to_intersecting_actor/6',[]],['fun','erlworld','world_state:apply_to_intersecting_actors/1','Passes the call to check for a collision onto its'],['fun','erlworld','world_state:apply_to_intersecting_actors/6',[]],['fun','erlworld','world_state:get/2','Equivalent to actor_state:get(AS, Name).'],['fun','erlworld','world_state:get_actor/1','Equivalent to actor_state:get_actor(AS).'],['fun','erlworld','world_state:get_actors/1','Retrieves all the actors held inside this world st'],['fun','erlworld','world_state:get_height/1','Equivalent to actor_state:get_height(AS).'],['fun','erlworld','world_state:get_name/1','Equivalent to actor_state:get_name(AS).'],['fun','erlworld','world_state:get_number_actors/1','Returns the number of actors stored in this world_'],['fun','erlworld','world_state:get_on_remove/1','Equivalent to actor_state:get_on_remove(AS).'],['fun','erlworld','world_state:get_paint_order/1','Returns the painting order number for the Actor gi'],['fun','erlworld','world_state:get_size/1','Equivalent to actor_state:get_size(AS).'],['fun','erlworld','world_state:get_width/1','Equivalent to actor_state:get_width(AS).'],['fun','erlworld','world_state:get_x/1','Equivalent to actor_state:get_x(AS).'],['fun','erlworld','world_state:get_xy/1','Equivalent to actor_state:get_xy(AS).'],['fun','erlworld','world_state:get_y/1','Equivalent to actor_state:get_y(AS).'],['fun','erlworld','world_state:map_actors/1','Runs the given function with each actor in this wo'],['fun','erlworld','world_state:move/2','Equivalent to actor_state:move(AS, Move).'],['fun','erlworld','world_state:move/3','Equivalent to actor_state:move(AS, X, Y).'],['fun','erlworld','world_state:new/0','Creates a new empty world.'],['fun','erlworld','world_state:new/1','A new WorldState which is initialized with the giv'],['fun','erlworld','world_state:new/1','Creates a new WorldState that holds the given acto'],['fun','erlworld','world_state:paint_actors/1','Tells all of the actors inside of this world state'],['fun','erlworld','world_state:remove_actor/1','Removes the given actor from this world state.'],['fun','erlworld','world_state:remove_actors/1','Returns a world_state with the given list of actor'],['fun','erlworld','world_state:remove_all_actors/1','Removes all of the actors from this world state re'],['fun','erlworld','world_state:set/2','Equivalent to actor_state:set(AS, Properties).'],['fun','erlworld','world_state:set/3','Equivalent to actor_state:set(AS, Name, Value).'],['fun','erlworld','world_state:set_height/2','Equivalent to actor_state:set_height(AS, Height).'],['fun','erlworld','world_state:set_name/2','Equivalent to actor_state:set_name(AS, Name).'],['fun','erlworld','world_state:set_on_remove/2','Equivalent to actor_state:set_on_remove(AS, Fun).'],['fun','erlworld','world_state:set_paint_order/1','Sets when this Actor will be painted.'],['fun','erlworld','world_state:set_size/2','Equivalent to actor_state:set_size(AS, Size).'],['fun','erlworld','world_state:set_size/3','Equivalent to actor_state:set_size(AS, X, Y).'],['fun','erlworld','world_state:set_width/2','Equivalent to actor_state:set_width(AS, Width).'],['fun','erlworld','world_state:set_x/2','Equivalent to actor_state:set_x(AS, X).'],['fun','erlworld','world_state:set_xy/2','Equivalent to actor_state:set_xy(AS, Location).'],['fun','erlworld','world_state:set_xy/3','Equivalent to actor_state:set_xy(AS, X, Y).'],['fun','erlworld','world_state:set_y/2','Equivalent to actor_state:set_y(AS, Y).']];