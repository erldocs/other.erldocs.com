var index = [['app','barrel_tcp','barrel_tcp','[application]'],['mod','barrel_tcp','barrel',[]],['mod','barrel_tcp','barrel_acceptor',[]],['mod','barrel_tcp','barrel_app',[]],['mod','barrel_tcp','barrel_connections',[]],['mod','barrel_tcp','barrel_deps',[]],['mod','barrel_tcp','barrel_listener',[]],['mod','barrel_tcp','barrel_server',[]],['mod','barrel_tcp','barrel_ssl',[]],['mod','barrel_tcp','barrel_sup',[]],['mod','barrel_tcp','barrel_tcp',[]],['mod','barrel_tcp','barrel_util',[]],['fun','barrel_tcp','barrel:accept_ack/1',' used to start to handle the connection in a spawn'],['fun','barrel_tcp','barrel:child_spec/1','return a child spec suitable for embeding your lis'],['fun','barrel_tcp','barrel:get_max_clients/1','get max number of concurrent clients.'],['fun','barrel_tcp','barrel:get_nb_acceptors/1','get the number of acceptors set for a listener.'],['fun','barrel_tcp','barrel:get_port/1','get current port of a listener.'],['fun','barrel_tcp','barrel:get_protocol_conf/1','get the protocol configuration.'],['fun','barrel_tcp','barrel:info/1','get info for some keys.'],['fun','barrel_tcp','barrel:info/1','get all infos of a listener.'],['fun','barrel_tcp','barrel:remove_connection/2','remove a connection from the connection manager  '],['fun','barrel_tcp','barrel:set_max_clients/2','set max number of concurrent clients.'],['fun','barrel_tcp','barrel:set_nb_acceptors/2','set the number of acceptors for a listener.'],['fun','barrel_tcp','barrel:set_protocol_conf/3','update the protocol configuration and kill the con'],['fun','barrel_tcp','barrel:set_protocol_conf/4','update the protocol configuration and kill the con'],['fun','barrel_tcp','barrel:start/0','Start the barrel application.'],['fun','barrel_tcp','barrel:start_listener/1',[]],['fun','barrel_tcp','barrel:start_listener/1','start a listener.'],['fun','barrel_tcp','barrel:stop/0','Start the coffer application.'],['fun','barrel_tcp','barrel:stop_listener/1','stop a listener  All connections and acceptors fo'],['fun','barrel_tcp','barrel_acceptor:accept/6',[]],['fun','barrel_tcp','barrel_acceptor:start_link/5',[]],['fun','barrel_tcp','barrel_app:ensure_deps_started/0',[]],['fun','barrel_tcp','barrel_app:start/2',[]],['fun','barrel_tcp','barrel_app:stop/1',[]],['fun','barrel_tcp','barrel_connections:add_connection/2',[]],['fun','barrel_tcp','barrel_connections:code_change/3',[]],['fun','barrel_tcp','barrel_connections:handle_call/3',[]],['fun','barrel_tcp','barrel_connections:handle_cast/2',[]],['fun','barrel_tcp','barrel_connections:handle_info/2',[]],['fun','barrel_tcp','barrel_connections:init/1',[]],['fun','barrel_tcp','barrel_connections:shutdown/2',[]],['fun','barrel_tcp','barrel_connections:start/0',[]],['fun','barrel_tcp','barrel_connections:stop/1',[]],['fun','barrel_tcp','barrel_connections:terminate/2',[]],['fun','barrel_tcp','barrel_deps:deps_on_path/0','List of project dependencies on the path.'],['fun','barrel_tcp','barrel_deps:ensure/0','Ensure that the ebin and include paths for depende'],['fun','barrel_tcp','barrel_deps:ensure/1','Ensure that all ebin and include paths for depende'],['fun','barrel_tcp','barrel_deps:get_base_dir/0','Return the application directory for this applicat'],['fun','barrel_tcp','barrel_deps:get_base_dir/1','Return the application directory for Module.'],['fun','barrel_tcp','barrel_deps:local_path/1','Return an application-relative directory for this '],['fun','barrel_tcp','barrel_deps:local_path/1','Return an application-relative directory from Modu'],['fun','barrel_tcp','barrel_deps:new_siblings/1','Find new siblings paths relative to Module that ar'],['fun','barrel_tcp','barrel_listener:code_change/3',[]],['fun','barrel_tcp','barrel_listener:get_max_clients/1','get max number of concurrent clients.'],['fun','barrel_tcp','barrel_listener:get_nb_acceptors/1','get the number of acceptors.'],['fun','barrel_tcp','barrel_listener:get_port/1','get current port.'],['fun','barrel_tcp','barrel_listener:get_protocol_conf/1','get the protocol configuration.'],['fun','barrel_tcp','barrel_listener:handle_call/3',[]],['fun','barrel_tcp','barrel_listener:handle_cast/2',[]],['fun','barrel_tcp','barrel_listener:handle_info/2',[]],['fun','barrel_tcp','barrel_listener:info/1','get all infos.'],['fun','barrel_tcp','barrel_listener:info/2','get info for some keys.'],['fun','barrel_tcp','barrel_listener:init/1',[]],['fun','barrel_tcp','barrel_listener:remove_connection/2','remove a connection from the connection manager.'],['fun','barrel_tcp','barrel_listener:set_max_clients/2','set max number of concurrent clients.'],['fun','barrel_tcp','barrel_listener:set_nb_acceptors/2','set the number of acceptors.'],['fun','barrel_tcp','barrel_listener:set_protocol_conf/4','update the protocol configuration and kill after a'],['fun','barrel_tcp','barrel_listener:start_accepting/1','internal api, tell to the acceptor if he can start'],['fun','barrel_tcp','barrel_listener:start_link/1',[]],['fun','barrel_tcp','barrel_listener:terminate/2',[]],['fun','barrel_tcp','barrel_server:get_listener/1','Return the listener associated to the ref.'],['fun','barrel_tcp','barrel_server:handle_call/3',[]],['fun','barrel_tcp','barrel_server:init/1',[]],['fun','barrel_tcp','barrel_server:set_listener/1','Set the listener associated to the ref.'],['fun','barrel_tcp','barrel_server:start_link/0','Start the barell_sever.'],['fun','barrel_tcp','barrel_ssl:accept/1','Accept connections with the given listening socket'],['fun','barrel_tcp','barrel_ssl:close/1','Close a TCP socket.'],['fun','barrel_tcp','barrel_ssl:connect/3',[]],['fun','barrel_tcp','barrel_ssl:connect/4',[]],['fun','barrel_tcp','barrel_ssl:controlling_process/1','Assign a new controlling process Pid to Socket.'],['fun','barrel_tcp','barrel_ssl:listen/1','Listen for connections on the given port number.'],['fun','barrel_tcp','barrel_ssl:listen/2',[]],['fun','barrel_tcp','barrel_ssl:messages/0','Atoms used to identify messages in {active, once |'],['fun','barrel_tcp','barrel_ssl:name/0','Name of this transport, tcp.'],['fun','barrel_tcp','barrel_ssl:peername/1','Return the address and port for the other end of a'],['fun','barrel_tcp','barrel_ssl:recv/1','Receive a packet from a socket in passive mode.'],['fun','barrel_tcp','barrel_ssl:recv/2',[]],['fun','barrel_tcp','barrel_ssl:send/1','Send a packet on a socket.'],['fun','barrel_tcp','barrel_ssl:sendfile/1','Send a file on a socket.'],['fun','barrel_tcp','barrel_ssl:setopts/1','Set one or more options for a socket.'],['fun','barrel_tcp','barrel_ssl:sockname/1','Get the local address and port of a socket.'],['fun','barrel_tcp','barrel_sup:init/1',[]],['fun','barrel_tcp','barrel_sup:start_link/0',[]],['fun','barrel_tcp','barrel_tcp:accept/1','Accept connections with the given listening socket'],['fun','barrel_tcp','barrel_tcp:close/1','Close a TCP socket.'],['fun','barrel_tcp','barrel_tcp:connect/3',[]],['fun','barrel_tcp','barrel_tcp:connect/4',[]],['fun','barrel_tcp','barrel_tcp:controlling_process/1','Assign a new controlling process Pid to Socket.'],['fun','barrel_tcp','barrel_tcp:listen/1','Listen for connections on the given port number.'],['fun','barrel_tcp','barrel_tcp:listen/2',[]],['fun','barrel_tcp','barrel_tcp:messages/0','Atoms used to identify messages in {active, once |'],['fun','barrel_tcp','barrel_tcp:name/0','Name of this transport, tcp.'],['fun','barrel_tcp','barrel_tcp:peername/1','Return the address and port for the other end of a'],['fun','barrel_tcp','barrel_tcp:recv/1','Receive a packet from a socket in passive mode.'],['fun','barrel_tcp','barrel_tcp:recv/2',[]],['fun','barrel_tcp','barrel_tcp:send/1','Send a packet on a socket.'],['fun','barrel_tcp','barrel_tcp:sendfile/1','Send a file on a socket.'],['fun','barrel_tcp','barrel_tcp:setopts/1','Set one or more options for a socket.'],['fun','barrel_tcp','barrel_tcp:sockname/1','Get the local address and port of a socket.'],['fun','barrel_tcp','barrel_util:filter_props/2','filter a list of properties and removed n.'],['fun','barrel_tcp','barrel_util:filter_props/3',[]],['fun','barrel_tcp','barrel_util:fix_ip/1',[]],['fun','barrel_tcp','barrel_util:ipv6_supported/0',[]],['fun','barrel_tcp','barrel_util:propmerge/2','Update a proplist with values of the second.'],['fun','barrel_tcp','barrel_util:require/1','Start the given applications if they were not alre']];