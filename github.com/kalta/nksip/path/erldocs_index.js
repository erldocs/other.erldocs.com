var index = [['app','nksip','nksip','[application]'],['mod','nksip','nksip','SipApps management module.'],['mod','nksip','nksip_app','NkSIP OTP Application Module.'],['mod','nksip','nksip_auth','Authentication management module.'],['mod','nksip','nksip_call','Call Management Module.'],['mod','nksip','nksip_call_dialog',[]],['mod','nksip','nksip_call_event',[]],['mod','nksip','nksip_call_fork','Call Fork Management.'],['mod','nksip','nksip_call_lib',[]],['mod','nksip','nksip_call_proxy','Call Proxy Management.'],['mod','nksip','nksip_call_router','Call Distribution Router.'],['mod','nksip','nksip_call_srv','Call Server Process.'],['mod','nksip','nksip_call_uac','Call UAC Management.'],['mod','nksip','nksip_call_uac_dialog',[]],['mod','nksip','nksip_call_uac_reply',[]],['mod','nksip','nksip_call_uac_req','Call UAC Management: Request sending.'],['mod','nksip','nksip_call_uac_resp','Call UAC Management: Response processing.'],['mod','nksip','nksip_call_uas','Call UAS Management.'],['mod','nksip','nksip_call_uas_dialog',[]],['mod','nksip','nksip_call_uas_process',[]],['mod','nksip','nksip_call_uas_reply','Call UAS Management: Reply.'],['mod','nksip','nksip_call_uas_req','Call UAS Management: Request processing.'],['mod','nksip','nksip_call_uas_route',[]],['mod','nksip','nksip_config','NkSIP Config Server.'],['mod','nksip','nksip_counters','NkSIP Process Counters.'],['mod','nksip','nksip_dialog','User Dialog Management Module.'],['mod','nksip','nksip_dns','NkSIP DNS cache and utilities with RFC3263 support'],['mod','nksip','nksip_headers','General SIP header processing functions.'],['mod','nksip','nksip_lib','Common library utility funcions.'],['mod','nksip','nksip_parse','SIP message parsing functions.'],['mod','nksip','nksip_parse_tokens',[]],['mod','nksip','nksip_parse_uri',[]],['mod','nksip','nksip_parse_via',[]],['mod','nksip','nksip_proc','NkSIP Process Registry.'],['mod','nksip','nksip_publish','NkSIP Event State Compositor.'],['mod','nksip','nksip_registrar','NkSIP Registrar Server.'],['mod','nksip','nksip_reply','User Response generation functions.'],['mod','nksip','nksip_request','User Request Management Functions.'],['mod','nksip','nksip_response','User Response Management Functions.'],['mod','nksip','nksip_sdp','RFC4566 SDP parser and generator utilities.'],['mod','nksip','nksip_sipapp_auto','Automatic pings and registrations support for SipA'],['mod','nksip','nksip_sipapp_srv',[]],['mod','nksip','nksip_sipapp_sup',[]],['mod','nksip','nksip_sipmsg','Internal request and responses management.'],['mod','nksip','nksip_stats','NkSIP (very basic yet) stats management.'],['mod','nksip','nksip_store','NkSIP In-Memory Database.'],['mod','nksip','nksip_stun','RFC5389 STUN utility functions.'],['mod','nksip','nksip_subscription','User Subscriptions Management Module.'],['mod','nksip','nksip_sup',[]],['mod','nksip','nksip_trace','NkSIP SIP basic message print and trace tool.'],['mod','nksip','nksip_transport','NkSIP Transport control module.'],['mod','nksip','nksip_transport_sctp',[]],['mod','nksip','nksip_transport_srv',[]],['mod','nksip','nksip_transport_sup',[]],['mod','nksip','nksip_transport_tcp',[]],['mod','nksip','nksip_transport_uac','UAC Transport Layer.'],['mod','nksip','nksip_transport_uas','UAS Transport Layer.'],['mod','nksip','nksip_transport_udp',[]],['mod','nksip','nksip_uac_lib','UAC process helper functions.'],['mod','nksip','nksip_uas_lib','UAS Process helper functions.'],['mod','nksip','nksip_unparse','General SIP message generation functions.'],['fun','nksip','nksip:call/1','Sends a synchronous message to the SipApps proces'],['fun','nksip','nksip:call/1','Sends a synchronous message to the SipApps proces'],['fun','nksip','nksip:cast/1','Sends an asynchronous message to the SipApps proc'],['fun','nksip','nksip:get_all/0','Gets the AppIds of all started SipApps.'],['fun','nksip','nksip:get_pid/1','Gets the SipApps process pid().'],['fun','nksip','nksip:get_port/1','Gets SipApps first listening port on this transpo'],['fun','nksip','nksip:reply/1','Sends a response from a synchronous callback funct'],['fun','nksip','nksip:start/1','Starts a new SipApp.'],['fun','nksip','nksip:stop/1','Stops a started SipApp, stopping any registered tr'],['fun','nksip','nksip:stop_all/0','Stops all started SipApps.'],['fun','nksip','nksip_app:start/0','Starts NkSIP stand alone.'],['fun','nksip','nksip_auth:get_authentication/1','Extracts digest authentication information from a '],['fun','nksip','nksip_auth:make_ha1/1','Generates a password hash to use in NkSIP authenti'],['fun','nksip','nksip_auth:make_request/1','Adds an Authorization or Proxy-Authorization heade'],['fun','nksip','nksip_auth:make_response/1','Generates a WWW-Authenticate or Proxy-Authenticate'],['fun','nksip','nksip_auth:realms/1','Extracts all the realms present in WWW-Authenticat'],['fun','nksip','nksip_auth:realms/1','Extracts all the realms present in WWW-Authenticat'],['fun','nksip','nksip_call:cancel/1','Cancels an ongoing INVITE request.'],['fun','nksip','nksip_call:clear_authorized_list/1','Clears authorized list of transport, ip and ports '],['fun','nksip','nksip_call:dialog_id/1','Gets the Dialog Id of a request or response id.'],['fun','nksip','nksip_call:get_all/0','Get all started calls.'],['fun','nksip','nksip_call:get_authorized_list/1','Gets authorized list of transport, ip and ports fo'],['fun','nksip','nksip_call:get_info/0','Get information about all started calls.'],['fun','nksip','nksip_call:send/1','Generates and sends a new request.'],['fun','nksip','nksip_call:send/1','Sends a new request.'],['fun','nksip','nksip_call:send_dialog/1','Generates and sends a new in-dialog request.'],['fun','nksip','nksip_call:send_reply/1','Sends a synchronous request reply.'],['fun','nksip','nksip_call:stop_dialog/1','Stops (deletes) a dialog.'],['fun','nksip','nksip_call_event:create_event/1',[]],['fun','nksip','nksip_call_fork:cancel/1','Tries to cancel an ongoing fork.'],['fun','nksip','nksip_call_fork:start/1','Starts a new Forking Proxy.'],['fun','nksip','nksip_call_proxy:normalize_uriset/1','Process a UriSet generating a standard [[nksip:uri'],['fun','nksip','nksip_call_proxy:response_stateless/1','Called from nksip_call when a stateless request is'],['fun','nksip','nksip_call_proxy:route/1','Tries to route a request to set of uris, serially '],['fun','nksip','nksip_call_router:apply_dialog/1','Applies a fun to a dialog and returns the result.'],['fun','nksip','nksip_call_router:apply_sipmsg/1','Applies a fun to a SipMsg and returns the result.'],['fun','nksip','nksip_call_router:apply_transaction/1','Applies a fun to a transaction and returns the res'],['fun','nksip','nksip_call_router:clear_all_calls/0','Removes all calls, dialogs, transactions and forks'],['fun','nksip','nksip_call_router:get_all_calls/0','Get all started calls.'],['fun','nksip','nksip_call_router:get_all_dialogs/0','Get all dialog ids for all calls.'],['fun','nksip','nksip_call_router:get_all_dialogs/1','Get all dialog ids for this SipApp, having CallId.'],['fun','nksip','nksip_call_router:get_all_info/0','Get all started calls.'],['fun','nksip','nksip_call_router:get_all_transactions/0','Get all active transactions for all calls.'],['fun','nksip','nksip_call_router:get_all_transactions/1','Get all active transactions for this SipApp, havin'],['fun','nksip','nksip_call_router:incoming_async/1','Called when a new request or response has been rec'],['fun','nksip','nksip_call_router:incoming_sync/1','Called when a new request or response has been rec'],['fun','nksip','nksip_call_router:send_work_async/1','Sends an asynchronous piece of nksip_call:work() t'],['fun','nksip','nksip_call_router:send_work_sync/1','Sends a synchronous piece of nksip_call:work() to '],['fun','nksip','nksip_call_srv:async_work/1','Sends an asynchronous piece of nksip_call:work() t'],['fun','nksip','nksip_call_srv:start/1','Starts a new call process.'],['fun','nksip','nksip_call_srv:stop/1','Stops a call (deleting  all associated transaction'],['fun','nksip','nksip_call_srv:sync_work/1','Sends a synchronous piece of nksip_call:work() to '],['fun','nksip','nksip_call_uac:cancel/1','Tries to cancel an ongoing invite request.'],['fun','nksip','nksip_call_uac_req:request/1','Starts a new UAC transaction.'],['fun','nksip','nksip_call_uac_resp:response/1','Called when a new response is received.'],['fun','nksip','nksip_call_uas_dialog:update_response/1',[]],['fun','nksip','nksip_call_uas_reply:reply/1','Sends a transaction reply.'],['fun','nksip','nksip_call_uas_req:request/1','Called when a new request is received.'],['fun','nksip','nksip_config:cseq/0','Gets a new CSeq.'],['fun','nksip','nksip_config:del/1','Deletes a config value.'],['fun','nksip','nksip_config:get/1','Gets an config value.'],['fun','nksip','nksip_config:get/1','Equivalent to get(Key, undefined).'],['fun','nksip','nksip_config:put/1','Sets a config value.'],['fun','nksip','nksip_counters:async/1','Performs an asynchronous multiple counter update a'],['fun','nksip','nksip_counters:del/1','Removes all Name counter updates sent from Pid.'],['fun','nksip','nksip_counters:del/1','Equivalent to del(Name, self()).'],['fun','nksip','nksip_counters:incr/1','Creates or increments synchronously a Name counter'],['fun','nksip','nksip_counters:incr/1','Equivalent to incr(Name, Value, self()).'],['fun','nksip','nksip_counters:incr/1','Equivalent to incr(Name, 1, self()).'],['fun','nksip','nksip_counters:value/1','Gets a counters current value.'],['fun','nksip','nksip_dialog:bye_all/0','Sends an in-dialog BYE to all existing dialogs.'],['fun','nksip','nksip_dialog:call_id/1','Gets the callss id of a dialog.'],['fun','nksip','nksip_dialog:class_id/2','Calculates a dialogs id from a nksip:request() or'],['fun','nksip','nksip_dialog:field/1','Extracts a specific field from a #dialog structure'],['fun','nksip','nksip_dialog:field/1','Gets specific information from the dialog indicate'],['fun','nksip','nksip_dialog:fields/1','Gets a number of fields from the Request as descri'],['fun','nksip','nksip_dialog:get_all/0','Gets all started dialog ids.'],['fun','nksip','nksip_dialog:get_all/1','Finds all existing dialogs having a Call-ID.'],['fun','nksip','nksip_dialog:get_dialog/1','Gets a full dialog record.'],['fun','nksip','nksip_dialog:id/1','Calculates a dialogs id from a nksip_request:id()'],['fun','nksip','nksip_dialog:stop/1','Stops an existing dialog (remove it from memory).'],['fun','nksip','nksip_dialog:stop_all/0','Stops (deletes) all current dialogs.'],['fun','nksip','nksip_dns:clear/0','Clear all stored information in the cache.'],['fun','nksip','nksip_dns:clear/1','Clear all info about Domain in the cache.'],['fun','nksip','nksip_dns:get_ips/1','Gets all IPs for this host, or [] if not found.'],['fun','nksip','nksip_dns:get_naptr/1','Finds published services using DNS NAPTR search.'],['fun','nksip','nksip_dns:get_srvs/1','Gets all hosts for a SRV domain, sorting the resul'],['fun','nksip','nksip_dns:resolve/1','Finds the ips, transports and ports to try for Uri'],['fun','nksip','nksip_headers:header/1','Generates a single header.'],['fun','nksip','nksip_headers:new/3','Generates a header list from a list of specificati'],['fun','nksip','nksip_headers:update/4','Performs a serie of modifications to a headers lis'],['fun','nksip','nksip_lib:bin_last/1','Gets the subbinary after Char.'],['fun','nksip','nksip_lib:bjoin/1','Join each element in List into a binary(), using t'],['fun','nksip','nksip_lib:bjoin/1','Joins each element in List into a binary() using &'],['fun','nksip','nksip_lib:cancel_timer/1','Cancels and existig timer.'],['fun','nksip','nksip_lib:cseq/0','Generates an incrementing-each-second 31 bit integ'],['fun','nksip','nksip_lib:delete/1','Deletes all elements in Proplist having key KeyOrK'],['fun','nksip','nksip_lib:extract/1','Extracts all elements in Proplist having key KeyOr'],['fun','nksip','nksip_lib:find_main_ip/0','Equivalent to find_main_ip(auto, ipv4).'],['fun','nksip','nksip_lib:find_main_ip/1','Finds the best local IP.'],['fun','nksip','nksip_lib:get_binary/1','Similar to get_value(Key, List, Default) but conve'],['fun','nksip','nksip_lib:get_binary/1','Similar to get_value(Key, List, &lt;&lt;&gt;&gt;) '],['fun','nksip','nksip_lib:get_integer/1','Similar to get_value(Key, List, Default) but conve'],['fun','nksip','nksip_lib:get_integer/1','Similar to get_value(Key, List, 0) but converting '],['fun','nksip','nksip_lib:get_list/1','Similar to get_value(Key, List, Default) but conve'],['fun','nksip','nksip_lib:get_list/1','Similar to get_value(Key, List, []) but converting'],['fun','nksip','nksip_lib:get_local_ips/0','Get all local network ips.'],['fun','nksip','nksip_lib:get_value/1','Requivalent to proplists:get_value/3 but faster.'],['fun','nksip','nksip_lib:get_value/1','Equivalent to proplists:get_value/2 but faster.'],['fun','nksip','nksip_lib:gmt_to_timestamp/1','Converts a local datetime() to a timestamp(),.'],['fun','nksip','nksip_lib:hash/1','Generates a new random tag based on a value.'],['fun','nksip','nksip_lib:is_string/1','Checks if Term is a string() or [].'],['fun','nksip','nksip_lib:l_timestamp/0','Gets an microsecond-resolution timestamp.'],['fun','nksip','nksip_lib:l_timestamp_to_float/1','Generates a float representing HHMMSS.MicroSecs fo'],['fun','nksip','nksip_lib:lhash/1','Generates a new printable SHA hash binary over Bas'],['fun','nksip','nksip_lib:local_to_timestamp/1','Converts a gmt datetime() to a timestamp().'],['fun','nksip','nksip_lib:luid/0','Generates a new printable random UUID.'],['fun','nksip','nksip_lib:timestamp/0','Gets an second-resolution timestamp.'],['fun','nksip','nksip_lib:timestamp_to_gmt/1','Converts a timestamp() to a gmt datetime().'],['fun','nksip','nksip_lib:timestamp_to_local/1','Converts a timestamp() to a local datetime().'],['fun','nksip','nksip_lib:to_binary/1','Converts anything into a binary().'],['fun','nksip','nksip_lib:to_host/1','Converts an IP or host to a binary host value.'],['fun','nksip','nksip_lib:to_host/1','Converts an IP or host to a binary host value.'],['fun','nksip','nksip_lib:to_integer/1','Converts anything into a integer() or error.'],['fun','nksip','nksip_lib:to_ip/1','Converts a list() or binary() into a inet:ip_addre'],['fun','nksip','nksip_lib:to_list/1','Converts anything into a string().'],['fun','nksip','nksip_lib:to_lower/1','converts a string() or binary() to a lower binary('],['fun','nksip','nksip_lib:to_upper/1','converts a string() or binary() to an upper binary'],['fun','nksip','nksip_lib:tokens/1','Splits a string() or binary() into a list of token'],['fun','nksip','nksip_lib:uid/0','Generates a new random tag.'],['fun','nksip','nksip_parse:aors/1','Parses all AORs found in Term.'],['fun','nksip','nksip_parse:dates/1','Gets a list of calendar:datetime() from Term'],['fun','nksip','nksip_parse:integers/1','Gets a list of integer() from Term'],['fun','nksip','nksip_parse:method/1','Parses any term() into a valid nksip:method().'],['fun','nksip','nksip_parse:tokens/1','Gets a list of tokens() from Term'],['fun','nksip','nksip_parse:uris/1','Parses all URIs found in Term.'],['fun','nksip','nksip_parse:vias/1','Extracts all via() found in Term'],['fun','nksip','nksip_parse_tokens:tokens/1','Parse a serie of tokens in a string.'],['fun','nksip','nksip_parse_uri:uris/1','Parse a serie of uris in a string  Can parse &gt;'],['fun','nksip','nksip_parse_via:vias/1','Parse a serie of VIAs in a string.'],['fun','nksip','nksip_proc:del/1','Unregisters a previously registered Name, associat'],['fun','nksip','nksip_proc:del/1','Equivalent to del(Name, self()).'],['fun','nksip','nksip_proc:del_all/0','Equivalent to del_all(self()).'],['fun','nksip','nksip_proc:del_all/1','Unregisters all registrations from this process.'],['fun','nksip','nksip_proc:fold_names/1','Folds over all registered names in the same way as'],['fun','nksip','nksip_proc:fold_pids/2','Folds over all registered pids in the same way as '],['fun','nksip','nksip_proc:put/1','Registers Name (and Value) as associated with this'],['fun','nksip','nksip_proc:put/1','Equivalent to put(Name, Value, self()).'],['fun','nksip','nksip_proc:put/1','Equivalent to put(Name, undefined, self()).'],['fun','nksip','nksip_proc:reg/1','Similar to reg(Name, Value, Pid), but, in case oth'],['fun','nksip','nksip_proc:reg/1','Similar to put(Name, Value, Pid) but only allows f'],['fun','nksip','nksip_proc:reg/1','Equivalent to reg(Name, Value, self()).'],['fun','nksip','nksip_proc:reg/1','Equivalent to reg(Name, undefined, self()).'],['fun','nksip','nksip_proc:register_name/1','Process registration compatible with global:regist'],['fun','nksip','nksip_proc:send/1','Sends a message to a registered process compatible'],['fun','nksip','nksip_proc:size/0','Gets the number of registered processes.'],['fun','nksip','nksip_proc:start/2','Starts a new gen_server or gen_fsm, allowing regis'],['fun','nksip','nksip_proc:start_link/2','Starts a new gen_server or gen_fsm, allowing regis'],['fun','nksip','nksip_proc:unregister_name/1','Unregistration compatible with global:unregister_n'],['fun','nksip','nksip_proc:values/1','Gets all registered Values for Name, along with re'],['fun','nksip','nksip_proc:wait_del/1','Waits for Name to be unregistered from all pids be'],['fun','nksip','nksip_proc:wait_del/1','Equivalent to wait_del(Name, 5000)).'],['fun','nksip','nksip_proc:wait_put/1','Waits for Name to be registered from any process b'],['fun','nksip','nksip_proc:wait_put/1','Equivalent to wait_put(Name, 5000).'],['fun','nksip','nksip_proc:whereis_name/1','Finds a registered Name compatible with global:whe'],['fun','nksip','nksip_publish:find/1','Finds a stored published information.'],['fun','nksip','nksip_publish:request/1','Processes a PUBLISH request according to RFC3903.'],['fun','nksip','nksip_registrar:clear/1','Clear all stored records by a SipApps core.'],['fun','nksip','nksip_registrar:delete/1','Deletes all registered contacts for an AOR (Addres'],['fun','nksip','nksip_registrar:find/1','Gets all current registered contacts for an AOR.'],['fun','nksip','nksip_registrar:find/1','Gets all current registered contacts for an AOR.'],['fun','nksip','nksip_registrar:is_registered/1','Finds if a request has a From that has been alread'],['fun','nksip','nksip_registrar:qfind/1','Gets all current registered contacts for an AOR, a'],['fun','nksip','nksip_registrar:qfind/1','Gets all current registered contacts for an AOR, a'],['fun','nksip','nksip_registrar:request/1','Process a REGISTER request.'],['fun','nksip','nksip_reply:reply/1','Generates a new SIP response and send options usin'],['fun','nksip','nksip_request:body/1','Gets the body of a request.'],['fun','nksip','nksip_request:call_id/1','Gets the callss id of a request id.'],['fun','nksip','nksip_request:dialog_id/1','Gets the dialog_id of a request.'],['fun','nksip','nksip_request:field/1','Gets specific information from the Request.'],['fun','nksip','nksip_request:fields/1','Gets some fields from a request.'],['fun','nksip','nksip_request:header/1','Gets values for a header in a request.'],['fun','nksip','nksip_request:is_local_route/1','See is_local_route/2.'],['fun','nksip','nksip_request:is_local_route/1','Checks if this request would be sent to a local ad'],['fun','nksip','nksip_request:method/1','Gets the method of a request.'],['fun','nksip','nksip_request:reply/1','Sends a reply to a request.'],['fun','nksip','nksip_request:reply/2','See reply/3.'],['fun','nksip','nksip_response:body/1','Gets the body of a response.'],['fun','nksip','nksip_response:call_id/1','Gets the callss id of a response id.'],['fun','nksip','nksip_response:code/1','Gets the response code of a response.'],['fun','nksip','nksip_response:dialog_id/1','Gets the dialog_id of a request.'],['fun','nksip','nksip_response:field/1','Gets specific information from the Response.'],['fun','nksip','nksip_response:fields/1','Get some fields from a response.'],['fun','nksip','nksip_response:header/1','Get header values from a response.'],['fun','nksip','nksip_response:reason/1','Gets the reason of a response.'],['fun','nksip','nksip_response:wait_491/0','Sleeps a random time between 2.1 and 4 secs.'],['fun','nksip','nksip_sdp:empty/0','Generates an empty SDP record, using host "local.n'],['fun','nksip','nksip_sdp:increment/1','Increments the SDP version by one.'],['fun','nksip','nksip_sdp:is_new/1','Checks if SDP2 is newer than SDP1.'],['fun','nksip','nksip_sdp:is_sdp/1','Checks if term is an valid SDP.'],['fun','nksip','nksip_sdp:new/0','Generates a simple base SDP record (see new/2),  '],['fun','nksip','nksip_sdp:new/1','Generates a simple base SDP record.'],['fun','nksip','nksip_sdp:parse/1','Parses a binary SDP packet into a sdp() record or '],['fun','nksip','nksip_sdp:unparse/1','Generates a binary SDP packet from an sdp() record'],['fun','nksip','nksip_sdp:update/1','Updates and SDP changing all medias to inactive, r'],['fun','nksip','nksip_sipapp_auto:get_pings/1','Get current ping status, including if last ping wa'],['fun','nksip','nksip_sipapp_auto:get_registers/1','Get current registration status, including if last'],['fun','nksip','nksip_sipapp_auto:start_ping/1','Programs the SipApp to start a series of pings (OP'],['fun','nksip','nksip_sipapp_auto:start_register/1','Programs the SipApp to start a series of registrat'],['fun','nksip','nksip_sipapp_auto:stop_ping/1','Stops a previously started ping request.'],['fun','nksip','nksip_sipapp_auto:stop_register/1','Stops a previously started registration series.'],['fun','nksip','nksip_sipapp_srv:get_module/1','Gets SipApps module and pid.'],['fun','nksip','nksip_sipapp_srv:get_opts/1','Gets SipApps module, options and pid.'],['fun','nksip','nksip_sipapp_srv:pending_msgs/0',[]],['fun','nksip','nksip_sipmsg:field/1','Extracts a specific field from a sipmsg.'],['fun','nksip','nksip_sipmsg:fields/1','Extracts a group of fields from a #sipmsg.'],['fun','nksip','nksip_sipmsg:header/1','Extracts a header from a #sipmsg and formats it.'],['fun','nksip','nksip_sipmsg:header/1','Extracts a header from a #sipmsg.'],['fun','nksip','nksip_sipmsg:named_fields/1','Extracts a group of fields from a #sipmsg.'],['fun','nksip','nksip_stats:get_uas_avg/0','Gets the call statistics for the current period.'],['fun','nksip','nksip_stats:info/0','Gets some statistics about current number of calls'],['fun','nksip','nksip_store:del/1','Deletes a record from database.'],['fun','nksip','nksip_store:fold/1','Folds over all records in database like lists:fold'],['fun','nksip','nksip_store:get/1','Gets a record from database using Default if not f'],['fun','nksip','nksip_store:get/1','Equivalent to get(Key, not_found).'],['fun','nksip','nksip_store:put/1','Inserts a Value in database under Key.'],['fun','nksip','nksip_store:put/1','Equivalent to put(Key, Value, []).'],['fun','nksip','nksip_store:update/1','Updates a record in database, applying Fun to the '],['fun','nksip','nksip_store:update/1','Equivalent to update(Key, Fun, []).'],['fun','nksip','nksip_stun:binding_request/0','Generates a Binding request.'],['fun','nksip','nksip_stun:binding_response/1','Generates a Binding response.'],['fun','nksip','nksip_stun:decode/1','Decodes a STUN packet.'],['fun','nksip','nksip_subscription:field/1','Extracts a specific field from a #subscription str'],['fun','nksip','nksip_subscription:field/1','Gets specific information from the subscription in'],['fun','nksip','nksip_subscription:fields/1','Gets a number of fields from the Subscription as d'],['fun','nksip','nksip_subscription:get_all/0','Gets all started subscription ids.'],['fun','nksip','nksip_subscription:get_all/1','Finds all existing subscriptions having a Call-ID.'],['fun','nksip','nksip_subscription:get_subscription/1','Gets a full subscription record.'],['fun','nksip','nksip_subscription:id/1','Get the subscripions id from a request or respons'],['fun','nksip','nksip_trace:get_all/0','Get all SipApps currently tracing messages.'],['fun','nksip','nksip_trace:print/1','Pretty-print a Request or Response with a tag.'],['fun','nksip','nksip_trace:print/1','Pretty-print a Request or Response.'],['fun','nksip','nksip_trace:start/0','Equivalent to start(AppId, [], console) for all st'],['fun','nksip','nksip_trace:start/1','Configures a SipApp to start tracing SIP messages.'],['fun','nksip','nksip_trace:start/1','Equivalent to start(AppId, [], File).'],['fun','nksip','nksip_trace:start/1','Equivalent to start(AppId, [], console).'],['fun','nksip','nksip_trace:stop/0','Stop all tracing processes, closing all open files'],['fun','nksip','nksip_trace:stop/1','Stop tracing a specific trace process, closing fil'],['fun','nksip','nksip_transport:get_all/0','Gets all registered transports in all SipApps.'],['fun','nksip','nksip_transport:get_all/1','Gets all registered transports for a SipApp.'],['fun','nksip','nksip_transport:is_local/1','Checks if an nksip:uri() or nksip:via() refers to '],['fun','nksip','nksip_transport:is_local_ip/1','Checks if an IP is local to this node.'],['fun','nksip','nksip_transport:main_ip/0','Gets a cached version of nodes main IPv4 address.'],['fun','nksip','nksip_transport:main_ip6/0','Gets a cached version of nodes main IPv6 address.'],['fun','nksip','nksip_transport:raw_send/2',[]],['fun','nksip','nksip_transport:start_transport/1','Start a new listening transport.'],['fun','nksip','nksip_transport_srv:start_connection/1','Starts a new outbound connection.'],['fun','nksip','nksip_transport_uac:resend_request/1','Resend an already sent request to the same ip, por'],['fun','nksip','nksip_transport_uac:send_request/1','Sends a new request.'],['fun','nksip','nksip_transport_uas:resend_response/1','Resends a previously sent response to the same ip,'],['fun','nksip','nksip_transport_uas:send_response/1','Sends a new Response.'],['fun','nksip','nksip_uac_lib:is_stateless/1','Checks if a response is a stateless response.'],['fun','nksip','nksip_uac_lib:make/1','Generates a new request.'],['fun','nksip','nksip_uac_lib:make_ack/1','Generates an ACK request from an INVITE request an'],['fun','nksip','nksip_uac_lib:make_cancel/1','Generates a CANCEL request from an INVITE request.'],['fun','nksip','nksip_uac_lib:send_any/1',[]],['fun','nksip','nksip_uas_lib:preprocess/1','Preprocess an incoming request.'],['fun','nksip','nksip_uas_lib:response/1','Generates a new Response based on a received Reque'],['fun','nksip','nksip_unparse:token/1','Serializes a list of token()'],['fun','nksip','nksip_unparse:uri/1','Serializes an uri() or list of uri() into a binary'],['fun','nksip','nksip_unparse:uri2proplist/1','Serializes an uri() into a proplist().'],['fun','nksip','nksip_unparse:via/1','Serializes a nksip:via()']];