var index = [['app','nksip','nksip','[application]'],['mod','nksip','acceptor_SUITE',[]],['mod','nksip','active_echo_protocol',[]],['mod','nksip','auth_test',[]],['mod','nksip','basic_test',[]],['mod','nksip','crash',[]],['mod','nksip','echo_protocol',[]],['mod','nksip','fork_test',[]],['mod','nksip','invite_test',[]],['mod','nksip','lager','The lager logging framework.'],['mod','nksip','lager_console_backend','Console backend for lager.'],['mod','nksip','lager_crash_backend',[]],['mod','nksip','lager_crash_log','Lager crash log writer.'],['mod','nksip','lager_file_backend','File backend for lager, with multiple file support'],['mod','nksip','lager_format',[]],['mod','nksip','lager_mochiglobal','Abuse module constant pools as a "read-only shared'],['mod','nksip','lager_stdlib','Functions from Erlang OTP distribution that are re'],['mod','nksip','lager_test_backend',[]],['mod','nksip','lager_transform','The parse transform used for lager messages.'],['mod','nksip','lager_trunc_io','Module to print out terms for logging.'],['mod','nksip','lager_util',[]],['mod','nksip','nksip','SipApps management module.'],['mod','nksip','nksip_app','NkSIP OTP Application Module.'],['mod','nksip','nksip_auth','Authentication management module.'],['mod','nksip','nksip_config','NkSIP Config Server.'],['mod','nksip','nksip_counters','NkSIP Process Counters.'],['mod','nksip','nksip_dialog','User dialog management module.'],['mod','nksip','nksip_dialog_uac','Dialog UAC processing module.'],['mod','nksip','nksip_dialog_uas','Dialog UAS processing module.'],['mod','nksip','nksip_headers','General SIP header processing functions.'],['mod','nksip','nksip_lib','Common library utility funcions.'],['mod','nksip','nksip_loadtest',[]],['mod','nksip','nksip_loadtest_lib',[]],['mod','nksip','nksip_loadtest_sipapp','SipApp callback module.'],['mod','nksip','nksip_parse','SIP message parsing functions.'],['mod','nksip','nksip_pbx',[]],['mod','nksip','nksip_pbx_sipapp','SipApp callback module.'],['mod','nksip','nksip_proc','NkSIP Process Registry.'],['mod','nksip','nksip_registrar','NkSIP Registrar Server.'],['mod','nksip','nksip_reply','User Response generation functions.'],['mod','nksip','nksip_request','User Request management functions.'],['mod','nksip','nksip_response','User Response management functions.'],['mod','nksip','nksip_sdp','RFC4566 SDP parser and generator utilities.'],['mod','nksip','nksip_sipapp','SipApp callback behaviour and callbacks default im'],['mod','nksip','nksip_sipapp_auto','Automatic pings and registrations support for SipA'],['mod','nksip','nksip_stats','NkSIP (very basic yet) stats management.'],['mod','nksip','nksip_store','NkSIP In-Memory Database.'],['mod','nksip','nksip_stun','RFC5389 STUN utility functions.'],['mod','nksip','nksip_trace','NkSIP SIP basic message print and trace tool.'],['mod','nksip','nksip_transaction_uac','UAC Transaction FSM.'],['mod','nksip','nksip_transaction_uas','UAS Transaction FSM.'],['mod','nksip','nksip_transport','NkSIP Transport control module.'],['mod','nksip','nksip_transport_conn','Connection Management Module.'],['mod','nksip','nksip_transport_uac','UAC Transport Layer.'],['mod','nksip','nksip_transport_uas','UAS Transport Layer.'],['mod','nksip','nksip_tutorial','Companion code for NkSIP Tutorial.'],['mod','nksip','nksip_tutorial_sipapp_client','SipApp Tutorial client callback module implementat'],['mod','nksip','nksip_tutorial_sipapp_server','SipApp Tutorial server callback module implementat'],['mod','nksip','nksip_uac','Request sending functions.'],['mod','nksip','nksip_uac_fsm','UAC Process FSM.'],['mod','nksip','nksip_uac_lib','UAC process helper functions.'],['mod','nksip','nksip_uas_fsm','UAS process FSM.'],['mod','nksip','nksip_uas_lib','UAS Process helper functions  Look at make'],['mod','nksip','nksip_uas_proxy','UAS FSM proxy management functions.'],['mod','nksip','nksip_unparse','General SIP message generation functions.'],['mod','nksip','notify_and_wait_protocol',[]],['mod','nksip','proxy_test',[]],['mod','nksip','ranch','Ranch API to start and stop listeners.'],['mod','nksip','ranch_listener','Public API for managing listeners.'],['mod','nksip','ranch_ssl','SSL transport API.'],['mod','nksip','ranch_tcp','TCP transport API.'],['mod','nksip','register_test',[]],['mod','nksip','remove_conn_and_wait_protocol',[]],['mod','nksip','sipapp_endpoint',[]],['mod','nksip','sipapp_server',[]],['mod','nksip','special_process',[]],['mod','nksip','sync_error_logger',[]],['mod','nksip','tcp_echo',[]],['mod','nksip','tests_util',[]],['mod','nksip','trunc_io_eqc',[]],['fun','nksip','acceptor_SUITE:all/0',[]],['fun','nksip','acceptor_SUITE:end_per_group/2',[]],['fun','nksip','acceptor_SUITE:end_per_suite/1',[]],['fun','nksip','acceptor_SUITE:groups/0',[]],['fun','nksip','acceptor_SUITE:init_per_group/2',[]],['fun','nksip','acceptor_SUITE:init_per_suite/1',[]],['fun','nksip','acceptor_SUITE:misc_bad_transport/1',[]],['fun','nksip','acceptor_SUITE:ssl_accept_error/1',[]],['fun','nksip','acceptor_SUITE:ssl_accept_socket/1',[]],['fun','nksip','acceptor_SUITE:ssl_active_echo/1',[]],['fun','nksip','acceptor_SUITE:ssl_echo/1',[]],['fun','nksip','acceptor_SUITE:supervisor_clean_child_restart/1',[]],['fun','nksip','acceptor_SUITE:supervisor_clean_restart/1',[]],['fun','nksip','acceptor_SUITE:supervisor_conns_alive/1',[]],['fun','nksip','acceptor_SUITE:tcp_accept_socket/1',[]],['fun','nksip','acceptor_SUITE:tcp_active_echo/1',[]],['fun','nksip','acceptor_SUITE:tcp_echo/1',[]],['fun','nksip','acceptor_SUITE:tcp_infinity_max_connections/1',[]],['fun','nksip','acceptor_SUITE:tcp_max_connections/1',[]],['fun','nksip','acceptor_SUITE:tcp_max_connections_and_beyond/1',[]],['fun','nksip','acceptor_SUITE:tcp_set_max_connections/1',[]],['fun','nksip','acceptor_SUITE:tcp_upgrade/1',[]],['fun','nksip','active_echo_protocol:init/4',[]],['fun','nksip','active_echo_protocol:start_link/4',[]],['fun','nksip','crash:code_change/3',[]],['fun','nksip','crash:handle_call/3',[]],['fun','nksip','crash:handle_cast/2',[]],['fun','nksip','crash:handle_info/2',[]],['fun','nksip','crash:init/1',[]],['fun','nksip','crash:start/0',[]],['fun','nksip','crash:terminate/2',[]],['fun','nksip','echo_protocol:init/4',[]],['fun','nksip','echo_protocol:start_link/4',[]],['fun','nksip','lager:clear_all_traces/0',[]],['fun','nksip','lager:dispatch_log/1',[]],['fun','nksip','lager:get_loglevel/1','Get the loglevel for a particular backend.'],['fun','nksip','lager:log/1','Manually log a message into lager without using th'],['fun','nksip','lager:log/1','Manually log a message into lager without using th'],['fun','nksip','lager:posix_error/1','Try to convert an atom to a posix error, but fall '],['fun','nksip','lager:safe_format/3','Print the format string Fmt with Args safely with '],['fun','nksip','lager:set_loglevel/2','Set the loglevel for a particular backend.'],['fun','nksip','lager:set_loglevel/3','Set the loglevel for a particular backend that has'],['fun','nksip','lager:start/0','Start the application.'],['fun','nksip','lager:status/0',[]],['fun','nksip','lager:stop_trace/1',[]],['fun','nksip','lager:trace_console/1',[]],['fun','nksip','lager:trace_console/2',[]],['fun','nksip','lager:trace_file/2',[]],['fun','nksip','lager:trace_file/3',[]],['fun','nksip','lager_crash_backend:code_change/3',[]],['fun','nksip','lager_crash_backend:handle_call/2',[]],['fun','nksip','lager_crash_backend:handle_event/2',[]],['fun','nksip','lager_crash_backend:handle_info/2',[]],['fun','nksip','lager_crash_backend:init/1',[]],['fun','nksip','lager_crash_backend:terminate/2',[]],['fun','nksip','lager_format:format/3',[]],['fun','nksip','lager_format:format/4',[]],['fun','nksip','lager_mochiglobal:delete/1','Delete term stored at K, no-op if non-existent.'],['fun','nksip','lager_mochiglobal:get/1','Get the term for K or return Default.'],['fun','nksip','lager_mochiglobal:get/1','Equivalent to get(K, undefined).'],['fun','nksip','lager_mochiglobal:put/1','Store term V at K, replaces an existing term if pr'],['fun','nksip','lager_stdlib:is_my_error_report/1',[]],['fun','nksip','lager_stdlib:is_my_info_report/1',[]],['fun','nksip','lager_stdlib:maybe_utc/1',[]],['fun','nksip','lager_stdlib:proc_lib_format/1',[]],['fun','nksip','lager_stdlib:string_p/1',[]],['fun','nksip','lager_stdlib:sup_get/1',[]],['fun','nksip','lager_stdlib:write_time/2',[]],['fun','nksip','lager_test_backend:code_change/3',[]],['fun','nksip','lager_test_backend:handle_call/2',[]],['fun','nksip','lager_test_backend:handle_event/2',[]],['fun','nksip','lager_test_backend:handle_info/2',[]],['fun','nksip','lager_test_backend:init/1',[]],['fun','nksip','lager_test_backend:terminate/2',[]],['fun','nksip','lager_trunc_io:format/3',[]],['fun','nksip','lager_trunc_io:format/4',[]],['fun','nksip','lager_trunc_io:fprint/1','Returns an flattened list containing the ASCII rep'],['fun','nksip','lager_trunc_io:fprint/1','Returns an flattened list containing the ASCII rep'],['fun','nksip','lager_trunc_io:print/1','Returns {List, Length}.'],['fun','nksip','lager_trunc_io:print/1','Returns {List, Length}.'],['fun','nksip','lager_trunc_io:safe/1','Same as print, but never crashes.'],['fun','nksip','lager_util:calculate_next_rotation/1',[]],['fun','nksip','lager_util:check_traces/4',[]],['fun','nksip','lager_util:ensure_logfile/4',[]],['fun','nksip','lager_util:format_time/0',[]],['fun','nksip','lager_util:format_time/1',[]],['fun','nksip','lager_util:level_to_num/1',[]],['fun','nksip','lager_util:levels/0',[]],['fun','nksip','lager_util:localtime_ms/0',[]],['fun','nksip','lager_util:maybe_utc/1',[]],['fun','nksip','lager_util:num_to_level/1',[]],['fun','nksip','lager_util:open_logfile/2',[]],['fun','nksip','lager_util:parse_rotation_date_spec/1',[]],['fun','nksip','lager_util:rotate_logfile/2',[]],['fun','nksip','lager_util:validate_trace/1',[]],['fun','nksip','nksip:call/1','Sends a synchronous message to the SipApps proces'],['fun','nksip','nksip:call/1','Sends a synchronous message to the SipApps proces'],['fun','nksip','nksip:cast/1','Sends an asynchronous message to the SipApps proc'],['fun','nksip','nksip:get_all/0','Gets the AppIds of all started SipApps.'],['fun','nksip','nksip:get_pid/1','Gets the SipApps process pid().'],['fun','nksip','nksip:get_port/1','Gets SipAppsfirst listening port on this transpor'],['fun','nksip','nksip:reply/1','Sends a response from a synchronous callback funct'],['fun','nksip','nksip:start/1','Starts a new SipApp.'],['fun','nksip','nksip:stop/1','Stops a started SipApp, stopping any registered tr'],['fun','nksip','nksip:stop_all/0','Stops all started SipApps.'],['fun','nksip','nksip_app:start/0','Starts NkSIP stand alone.'],['fun','nksip','nksip_auth:get_authentication/1','Extracts authentication information from a incomin'],['fun','nksip','nksip_auth:make_ha1/1','Generates a password hash to use in NkSIP authenti'],['fun','nksip','nksip_auth:make_request/1','Adds an Authorization or Proxy-Authorization heade'],['fun','nksip','nksip_auth:make_response/1','Generates a WWW-Authenticate or Proxy-Authenticate'],['fun','nksip','nksip_auth:realms/1','Extracts all the realms present in WWW-Authenticat'],['fun','nksip','nksip_config:cseq/0','Gets a new CSeq.'],['fun','nksip','nksip_config:del/1','Deletes a config value.'],['fun','nksip','nksip_config:get/1','Gets an config value.'],['fun','nksip','nksip_config:get/1','Equivalent to get(Key, undefined).'],['fun','nksip','nksip_config:put/1','Sets a config value.'],['fun','nksip','nksip_counters:async/1','Performs an asynchronous multiple counter update a'],['fun','nksip','nksip_counters:del/1','Removes all Name counter updates sent from Pid.'],['fun','nksip','nksip_counters:del/1','Equivalent to del(Name, self()).'],['fun','nksip','nksip_counters:incr/1','Creates or increments synchronously a Name counter'],['fun','nksip','nksip_counters:incr/1','Equivalent to incr(Name, Value, self()).'],['fun','nksip','nksip_counters:incr/1','Equivalent to incr(Name, 1, self()).'],['fun','nksip','nksip_counters:value/1','Gets a counters current value.'],['fun','nksip','nksip_dialog:bye_all/0','Sends an in-dialog BYE to all existing dialogs.'],['fun','nksip','nksip_dialog:field/1','Gets specific information from the dialog indicate'],['fun','nksip','nksip_dialog:fields/1','Gets a number of fields from the Request as descri'],['fun','nksip','nksip_dialog:find_callid/1','Finds all existing dialogs processes having a Cal'],['fun','nksip','nksip_dialog:id/1','Calculates a Dialogs Id from a nksip_request:id()'],['fun','nksip','nksip_dialog:is_authorized/1','Checks if a request is part of an already authenti'],['fun','nksip','nksip_dialog:stop/1','Stops an existing dialog (remove it from memory).'],['fun','nksip','nksip_dialog:stop_all/0','Stops all current dialogs.'],['fun','nksip','nksip_dialog_uac:make/1','Generates a new in-dialog request.'],['fun','nksip','nksip_dialog_uac:new_cseq/1','Gets the next local_seq from dialog.'],['fun','nksip','nksip_headers:header/1','Generates a single header.'],['fun','nksip','nksip_headers:new/3','Generates a header list from a list of specificati'],['fun','nksip','nksip_headers:update/4','Performs a serie of modifications to a headers lis'],['fun','nksip','nksip_lib:bjoin/1','Join each element in List into a binary(), using t'],['fun','nksip','nksip_lib:bjoin/1','Joins each element in List into a binary() using &'],['fun','nksip','nksip_lib:cancel_timer/1','Cancels and existig timer.'],['fun','nksip','nksip_lib:cseq/0','Generates an incrementing-each-second 31 bit integ'],['fun','nksip','nksip_lib:delete/1','Deletes all elements in Proplist having key KeyOrK'],['fun','nksip','nksip_lib:extract/1','Extracts all elements in Proplist having key KeyOr'],['fun','nksip','nksip_lib:find_main_ip/0','Equivalent to find_main_ip(auto).'],['fun','nksip','nksip_lib:find_main_ip/1','Finds the best local IP.'],['fun','nksip','nksip_lib:get_binary/1','Similar to get_value(Key, List, Default) but conve'],['fun','nksip','nksip_lib:get_binary/1','Similar to get_value(Key, List, &lt;&lt;&gt;&gt;) '],['fun','nksip','nksip_lib:get_integer/1','Similar to get_value(Key, List, Default) but conve'],['fun','nksip','nksip_lib:get_integer/1','Similar to get_value(Key, List, 0) but converting '],['fun','nksip','nksip_lib:get_list/1','Similar to get_value(Key, List, Default) but conve'],['fun','nksip','nksip_lib:get_list/1','Similar to get_value(Key, List, []) but converting'],['fun','nksip','nksip_lib:get_local_ips/0','Get all local network ips.'],['fun','nksip','nksip_lib:get_value/1','Requivalent to proplists:get_value/3 but faster.'],['fun','nksip','nksip_lib:get_value/1','Equivalent to proplists:get_value/2 but faster.'],['fun','nksip','nksip_lib:gmt_to_timestamp/1','Converts a local datetime() to a timestamp(),.'],['fun','nksip','nksip_lib:hash/1','Generates a new random tag based on a value.'],['fun','nksip','nksip_lib:is_string/1','Checks if Term is a string() or [].'],['fun','nksip','nksip_lib:l_timestamp/0','Gets an microsecond-resolution timestamp.'],['fun','nksip','nksip_lib:l_timestamp_to_float/1','Generates a float representing HHMMSS.MicroSecs fo'],['fun','nksip','nksip_lib:lhash/1','Generates a new printable SHA hash binary over Bas'],['fun','nksip','nksip_lib:local_to_timestamp/1','Converts a gmt datetime() to a timestamp().'],['fun','nksip','nksip_lib:luid/0','Generates a new printable random UUID.'],['fun','nksip','nksip_lib:timestamp/0','Gets an second-resolution timestamp.'],['fun','nksip','nksip_lib:timestamp_to_gmt/1','Converts a timestamp() to a gmt datetime().'],['fun','nksip','nksip_lib:timestamp_to_local/1','Converts a timestamp() to a local datetime().'],['fun','nksip','nksip_lib:to_binary/1','Converts anything into a binary().'],['fun','nksip','nksip_lib:to_integer/1','Converts anything into a integer() or error.'],['fun','nksip','nksip_lib:to_ip/1','Converts a list() or binary() into a inet:ip_addre'],['fun','nksip','nksip_lib:to_list/1','Converts anything into a string().'],['fun','nksip','nksip_lib:to_lower/1','converts a string() or binary() to a lower binary('],['fun','nksip','nksip_lib:to_upper/1','converts a string() or binary() to an upper binary'],['fun','nksip','nksip_lib:tokenize/2','Scans an string() or binary() for tokens.'],['fun','nksip','nksip_lib:uid/0','Generates a new random tag.'],['fun','nksip','nksip_lib:untokenize/1','Serializes a token_list() list.'],['fun','nksip','nksip_loadtest:full/0','Equivalent to full[{messages, 10000}, {clients, 10'],['fun','nksip','nksip_loadtest:full/1','Performs a full load test suite, using 10.000 requ'],['fun','nksip','nksip_loadtest:launch/1','Launches a new test.'],['fun','nksip','nksip_loadtest:start/0','Starts a server to launch tests to.'],['fun','nksip','nksip_loadtest_lib:launch/1','Launchs a new load test.'],['fun','nksip','nksip_loadtest_lib:start_clients/1','Starts N simultaneous clients.'],['fun','nksip','nksip_loadtest_lib:start_server/0','Start a test server SipApp called server listening'],['fun','nksip','nksip_loadtest_lib:start_server/2','Start a test server SipApp called Name listening o'],['fun','nksip','nksip_loadtest_lib:stop_clients/1','Stops N simultaneous clients started using start_c'],['fun','nksip','nksip_loadtest_lib:stop_server/0','Stops SipApp called server.'],['fun','nksip','nksip_loadtest_lib:stop_server/1','Stops SipApp called Name.'],['fun','nksip','nksip_loadtest_sipapp:init/1','SipApp initialization.'],['fun','nksip','nksip_loadtest_sipapp:invite/4','Answer the call with the same SDP body.'],['fun','nksip','nksip_loadtest_sipapp:route/6','Request routing callback.'],['fun','nksip','nksip_parse:aors/1','Parses all AORs found in Term.'],['fun','nksip','nksip_parse:header_dates/1','Parse all Name headers of a request or response an'],['fun','nksip','nksip_parse:header_integers/1','Parse all Name headers of a request or response an'],['fun','nksip','nksip_parse:header_tokens/1','Parse all Name headers of a request or response an'],['fun','nksip','nksip_parse:header_uris/1','Parses all Name headers of a request or response a'],['fun','nksip','nksip_parse:method/1','Parses any term() into a valid nksip:method().'],['fun','nksip','nksip_parse:tokens/1','Gets a list of tokens() from Term'],['fun','nksip','nksip_parse:uri2ruri/1','Cleans any nksip:uri() into a valid request-uri.'],['fun','nksip','nksip_parse:uris/1','Parses all URis found in Term.'],['fun','nksip','nksip_parse:vias/1','Extracts all via() found in Term'],['fun','nksip','nksip_pbx:loglevel/1','Changes console log level.'],['fun','nksip','nksip_pbx:start/0','Starts the SipApp.'],['fun','nksip','nksip_pbx:stop/0','Stops the SipApp.'],['fun','nksip','nksip_pbx:trace/1','Enables SIP trace messages to console.'],['fun','nksip','nksip_pbx_sipapp:authorize/4','SipApp Callback: Called to check if a request shou'],['fun','nksip','nksip_pbx_sipapp:check_speed/1','Stops or restart automatic response time detection'],['fun','nksip','nksip_pbx_sipapp:dialog_update/3',[]],['fun','nksip','nksip_pbx_sipapp:get_speed/0','Get all registered endpoints with their last respn'],['fun','nksip','nksip_pbx_sipapp:get_user_pass/4','SipApp Callback: Called to check users password.'],['fun','nksip','nksip_pbx_sipapp:handle_call/3','SipApp Callback: Synchronous user call.'],['fun','nksip','nksip_pbx_sipapp:handle_cast/2','SipApp Callback: Asynchronous user cast.'],['fun','nksip','nksip_pbx_sipapp:handle_info/2','SipApp Callback: External erlang message received.'],['fun','nksip','nksip_pbx_sipapp:init/1','SipApp Callback: initialization.'],['fun','nksip','nksip_pbx_sipapp:route/6','SipApp Callback: Called to decide how to route eve'],['fun','nksip','nksip_pbx_sipapp:session_update/3',[]],['fun','nksip','nksip_pbx_sipapp:start/0','Starts a new SipApp, listening on port 5060 for ud'],['fun','nksip','nksip_pbx_sipapp:stop/0','Stops the SipApp.'],['fun','nksip','nksip_proc:del/1','Unregisters a previously registered Name, associat'],['fun','nksip','nksip_proc:del/1','Equivalent to del(Name, self()).'],['fun','nksip','nksip_proc:del_all/0','Equivalent to del_all(self()).'],['fun','nksip','nksip_proc:del_all/1','Unregisters all registrations from this process.'],['fun','nksip','nksip_proc:fold_names/1','Folds over all registered names in the same way as'],['fun','nksip','nksip_proc:fold_pids/2','Folds over all registered pids in the same way as '],['fun','nksip','nksip_proc:put/1','Registers Name (and Value) as associated with this'],['fun','nksip','nksip_proc:put/1','Equivalent to put(Name, Value, self()).'],['fun','nksip','nksip_proc:put/1','Equivalent to put(Name, undefined, self()).'],['fun','nksip','nksip_proc:reg/1','Similar to reg(Name, Value, Pid), but, in case oth'],['fun','nksip','nksip_proc:reg/1','Similar to put(Name, Value, Pid) but only allows f'],['fun','nksip','nksip_proc:reg/1','Equivalent to reg(Name, Value, self()).'],['fun','nksip','nksip_proc:reg/1','Equivalent to reg(Name, undefined, self()).'],['fun','nksip','nksip_proc:register_name/1','Process registration compatible with global:regist'],['fun','nksip','nksip_proc:send/1','Sends a message to a registered process compatible'],['fun','nksip','nksip_proc:size/0','Gets the number of registered processes.'],['fun','nksip','nksip_proc:start/2','Starts a new gen_server or gen_fsm, allowing regis'],['fun','nksip','nksip_proc:start_link/2','Starts a new gen_server or gen_fsm, allowing regis'],['fun','nksip','nksip_proc:unregister_name/1','Unregistration compatible with global:unregister_n'],['fun','nksip','nksip_proc:values/1','Gets all registered Values for Name, along with re'],['fun','nksip','nksip_proc:wait_del/1','Waits for Name to be unregistered from all pids be'],['fun','nksip','nksip_proc:wait_del/1','Equivalent to wait_del(Name, 5000)).'],['fun','nksip','nksip_proc:wait_put/1','Waits for Name to be registered from any process b'],['fun','nksip','nksip_proc:wait_put/1','Equivalent to wait_put(Name, 5000).'],['fun','nksip','nksip_proc:whereis_name/1','Finds a registered Name compatible with global:whe'],['fun','nksip','nksip_registrar:clear/0','Clear all stored records for all SipApps.'],['fun','nksip','nksip_registrar:clear/1','Clear all stored records by a SipApps core.'],['fun','nksip','nksip_registrar:delete/1','Deletes all registered contacts for an AOR (Addres'],['fun','nksip','nksip_registrar:find/1','Gets all current registered contacts for an AOR.'],['fun','nksip','nksip_registrar:find/1','Gets all current registered contacts for an AOR.'],['fun','nksip','nksip_registrar:is_registered/1','Finds if a request has a From that has been alread'],['fun','nksip','nksip_registrar:qfind/1','Gets all current registered contacts for an AOR, a'],['fun','nksip','nksip_registrar:qfind/1','Gets all current registered contacts for an AOR, a'],['fun','nksip','nksip_registrar:request/1','Process a REGISTER request.'],['fun','nksip','nksip_reply:reply/1','Generates a new SIP response using helper replies.'],['fun','nksip','nksip_request:body/1','Gets the body of a Request.'],['fun','nksip','nksip_request:field/1','Gets specific information from the Request.'],['fun','nksip','nksip_request:fields/1','Gets a number of fields from the Request as descri'],['fun','nksip','nksip_request:headers/1','Gets all Name headers from the request.'],['fun','nksip','nksip_request:is_local_route/1','Checks if this request would be sent to a local ad'],['fun','nksip','nksip_request:method/1','Gets the method of a Request.'],['fun','nksip','nksip_request:provisional_reply/1','Sends a provisional response to a request.'],['fun','nksip','nksip_response:body/1','Gets the body of a Response.'],['fun','nksip','nksip_response:code/1','Gets the response code of a Response.'],['fun','nksip','nksip_response:dialog_id/1','Gets the dialog id of a Response.'],['fun','nksip','nksip_response:field/1','Gets specific information from the Response.'],['fun','nksip','nksip_response:fields/1','Gets a number of fields from the Response as descr'],['fun','nksip','nksip_response:headers/1','Gets all Name headers from the response.'],['fun','nksip','nksip_response:reason/1','Gets the reason of a Response.'],['fun','nksip','nksip_response:wait_491/0','Sleeps a random time between 2.1 and 4 secs.'],['fun','nksip','nksip_sdp:empty/0','Generates an empty SDP record, using host "local.n'],['fun','nksip','nksip_sdp:increment/1','Increments the SDP version by one.'],['fun','nksip','nksip_sdp:is_new/1','Checks if SDP2 is newer than SDP1.'],['fun','nksip','nksip_sdp:is_sdp/1','Checks if term is an valid SDP.'],['fun','nksip','nksip_sdp:new/0','Generates a simple base SDP record (see new/2),  '],['fun','nksip','nksip_sdp:new/1','Generates a simple base SDP record.'],['fun','nksip','nksip_sdp:parse/1','Parses a binary SDP packet into a sdp() record or '],['fun','nksip','nksip_sdp:unparse/1','Generates a binary SDP packet from an sdp() record'],['fun','nksip','nksip_sdp:update/1','Updates and SDP changing all medias to inactive, r'],['fun','nksip','nksip_sipapp:ack/1','Called when a valid ACK request is received.'],['fun','nksip','nksip_sipapp:authorize/2','Called for every incoming request to be authorized'],['fun','nksip','nksip_sipapp:bye/1','Called when a valid BYE request is received.'],['fun','nksip','nksip_sipapp:cancel/1','Called when a valid CANCEL request is received.'],['fun','nksip','nksip_sipapp:dialog_update/1','Called when a dialog has changed its state.'],['fun','nksip','nksip_sipapp:get_user_pass/1','Called to check a user password for a realm.'],['fun','nksip','nksip_sipapp:handle_call/1','Called when a direct call to the SippApp process i'],['fun','nksip','nksip_sipapp:handle_cast/1','Called when a direct cast to the SippApp process i'],['fun','nksip','nksip_sipapp:handle_info/1','Called when the SipApp process receives an unknown'],['fun','nksip','nksip_sipapp:init/1','SipApp initialization.'],['fun','nksip','nksip_sipapp:invite/1','This function is called by NkSIP to process a new '],['fun','nksip','nksip_sipapp:options/1','Called when a OPTIONS request is received.'],['fun','nksip','nksip_sipapp:ping_update/1','Called when the status of an automatic ping config'],['fun','nksip','nksip_sipapp:register/1','This function is called by NkSIP to process a new '],['fun','nksip','nksip_sipapp:register_update/1','Called when the status of an automatic registratio'],['fun','nksip','nksip_sipapp:reinvite/1','This function is called when a new in-dialog INVIT'],['fun','nksip','nksip_sipapp:route/1','This function is called by NkSIP for every new req'],['fun','nksip','nksip_sipapp:session_update/1','Called when a dialog has updated its SDP session p'],['fun','nksip','nksip_sipapp:terminate/1','Called when the SipApp is stopped.'],['fun','nksip','nksip_sipapp_auto:get_pings/1','Get current ping status, including if last ping wa'],['fun','nksip','nksip_sipapp_auto:get_registers/1','Get current registration status, including if last'],['fun','nksip','nksip_sipapp_auto:start_ping/1','Programs the SipApp to start a series of pings (OP'],['fun','nksip','nksip_sipapp_auto:start_register/1','Programs the SipApp to start a series of registrat'],['fun','nksip','nksip_sipapp_auto:stop_ping/1','Stops a previously started ping request.'],['fun','nksip','nksip_sipapp_auto:stop_register/1','Stops a previously started registration series.'],['fun','nksip','nksip_stats:get_uas_avg/0','Gets the call statistics for the current period.'],['fun','nksip','nksip_store:del/1','Deletes a record from database.'],['fun','nksip','nksip_store:fold/1','Folds over all records in database like lists:fold'],['fun','nksip','nksip_store:get/1','Gets a record from database using Default if not f'],['fun','nksip','nksip_store:get/1','Equivalent to get(Key, not_found).'],['fun','nksip','nksip_store:put/1','Inserts a Value in database under Key.'],['fun','nksip','nksip_store:put/1','Equivalent to put(Key, Value, []).'],['fun','nksip','nksip_store:update/1','Updates a record in database, applying Fun to the '],['fun','nksip','nksip_store:update/1','Equivalent to update(Key, Fun, []).'],['fun','nksip','nksip_stun:binding_request/0','Generates a Binding request.'],['fun','nksip','nksip_stun:binding_response/1','Generates a Binding response.'],['fun','nksip','nksip_stun:decode/1','Decodes a STUN packet.'],['fun','nksip','nksip_trace:counters/0','Gets some statistics about current number of activ'],['fun','nksip','nksip_trace:get_all/0','Get all SipApps currently tracing messages.'],['fun','nksip','nksip_trace:print/1','Pretty-print a Request or Response with a tag.'],['fun','nksip','nksip_trace:print/1','Pretty-print a Request or Response.'],['fun','nksip','nksip_trace:start/0','Equivalent to start(AppId, [], console) for all st'],['fun','nksip','nksip_trace:start/1','Configures a SipApp to start tracing SIP messages.'],['fun','nksip','nksip_trace:start/1','Equivalent to start(AppId, [], File).'],['fun','nksip','nksip_trace:start/1','Equivalent to start(AppId, [], console).'],['fun','nksip','nksip_trace:stop/0','Stop all tracing processes, closing all open files'],['fun','nksip','nksip_trace:stop/1','Stop tracing a specific trace process, closing fil'],['fun','nksip','nksip_transaction_uac:total/0','Gets the total number of active UAC transactions.'],['fun','nksip','nksip_transaction_uac:total/1','Gets the total number of active UAC transactions f'],['fun','nksip','nksip_transaction_uas:is_ack/1','Checks if Request is an ACK matching an existing t'],['fun','nksip','nksip_transaction_uas:is_cancel/1','Checks if Request is a CANCEL matching an existing'],['fun','nksip','nksip_transaction_uas:is_loop/1','Checks if Request is looping in the server.'],['fun','nksip','nksip_transaction_uas:is_retrans/1','Checks if Request is a retransmission of an existi'],['fun','nksip','nksip_transaction_uas:total/0','Gets the total number of active UAS transactions.'],['fun','nksip','nksip_transaction_uas:total/1','Gets the total number of active UAS transactions f'],['fun','nksip','nksip_transport:get_all/0','Gets all registered transports in all SipApps.'],['fun','nksip','nksip_transport:get_all/1','Gets all registered transports for a SipApp.'],['fun','nksip','nksip_transport:get_protocol/1','Gets all registered transports in all SipApps for '],['fun','nksip','nksip_transport:is_local/1','Checks if an nksip:uri() or nksip:via() refers to '],['fun','nksip','nksip_transport:is_local_ip/1','Checks if an IP is local to this node.'],['fun','nksip','nksip_transport:local_ips/0','Gets a cached version of all detected local node I'],['fun','nksip','nksip_transport:main_ip/0','Gets a cached version of nodes main IP address.'],['fun','nksip','nksip_transport:resolve/1','Finds the transports, servers and ports available '],['fun','nksip','nksip_transport_conn:start_connection/1','Starts a new outbound connection.'],['fun','nksip','nksip_transport_conn:start_transport/1','Start a new listening transport.'],['fun','nksip','nksip_transport_uac:resend_request/1','Resend an already sent request to the same ip, por'],['fun','nksip','nksip_transport_uac:send_request/1','Sends a new request.'],['fun','nksip','nksip_transport_uas:resend_response/1','Resends a previously sent response to the same ip,'],['fun','nksip','nksip_transport_uas:send_response/1','Sends a new Response.'],['fun','nksip','nksip_transport_uas:send_response/1','Sends a new Response.'],['fun','nksip','nksip_tutorial:launch/0','Launches the full tutorial.'],['fun','nksip','nksip_tutorial:loglevel/1','Changes console log level.'],['fun','nksip','nksip_tutorial:trace/1','Enables SIP trace messages to console.'],['fun','nksip','nksip_tutorial_sipapp_client:init/1','SipApp intialization.'],['fun','nksip','nksip_tutorial_sipapp_client:invite/4','Called when an INVITE is received.'],['fun','nksip','nksip_tutorial_sipapp_client:options/3','Called when an OPTIONS is received.'],['fun','nksip','nksip_tutorial_sipapp_server:authorize/4','Called to check if a request should be authorized.'],['fun','nksip','nksip_tutorial_sipapp_server:get_user_pass/4','Called to check users password.'],['fun','nksip','nksip_tutorial_sipapp_server:handle_call/3','Synchronous user call.'],['fun','nksip','nksip_tutorial_sipapp_server:init/1','SipApp intialization.'],['fun','nksip','nksip_tutorial_sipapp_server:route/6','Called to decide how to route every new request.'],['fun','nksip','nksip_uac:ack/1','Sends an ACK after a successful INVITE response.'],['fun','nksip','nksip_uac:bye/1','Sends an BYE for a current dialog.'],['fun','nksip','nksip_uac:cancel/1','Sends an CANCEL for a currently ongoing INVITE req'],['fun','nksip','nksip_uac:invite/1','Sends an INVITE request.'],['fun','nksip','nksip_uac:options/1','Sends an OPTIONS request.'],['fun','nksip','nksip_uac:refresh/1','Sends a update on a currently ongoing dialog using'],['fun','nksip','nksip_uac:register/1','Sends a REGISTER request.'],['fun','nksip','nksip_uac:reinvite/1','Sends a in-dialog INVITE (commonly called reINVITE'],['fun','nksip','nksip_uac:stun/1','Sends a STUN binding request.'],['fun','nksip','nksip_uac_fsm:get_cancel/1','Generates a new CANCEL Request.'],['fun','nksip','nksip_uac_fsm:request/1','Sends an already generated outbound UAC request.'],['fun','nksip','nksip_uac_lib:make/1','Generates a new request.'],['fun','nksip','nksip_uac_lib:make_cancel/1','Generates a CANCEL request from an INVITE request.'],['fun','nksip','nksip_uas_fsm:reply/1','Sends a reply to an already started UAS FSM.'],['fun','nksip','nksip_uas_fsm:start/1','Starts a new UAS request processing.'],['fun','nksip','nksip_uas_lib:preprocess/1','Preprocess an incoming request.'],['fun','nksip','nksip_uas_lib:response/1','Generates a new Response based on a received Reque'],['fun','nksip','nksip_uas_proxy:proxy/1','Routes a Request to set of uris, serially and/or i'],['fun','nksip','nksip_unparse:tokens/1','Serializes a list of token()'],['fun','nksip','nksip_unparse:uri/1','Serializes an uri() or list of uri() into a binary'],['fun','nksip','nksip_unparse:uri2proplist/1','Serializes an uri() into a proplist().'],['fun','nksip','nksip_unparse:via/1','Serializes a nksip:via()'],['fun','nksip','notify_and_wait_protocol:init/2',[]],['fun','nksip','notify_and_wait_protocol:start_link/4',[]],['fun','nksip','ranch:accept_ack/1','Acknowledge the accepted connection.'],['fun','nksip','ranch:child_spec/1','Return a child spec suitable for embedding.'],['fun','nksip','ranch:filter_options/1','Filter a list of options and remove all unwanted v'],['fun','nksip','ranch:get_max_connections/1','Return the max number of connections allowed concu'],['fun','nksip','ranch:get_port/1','Return the listeners port.'],['fun','nksip','ranch:get_protocol_options/1','Return the current protocol options for the given '],['fun','nksip','ranch:require/1','Start the given applications if they were not alre'],['fun','nksip','ranch:set_max_connections/1','Set the max number of connections allowed concurre'],['fun','nksip','ranch:set_option_default/2','Add an option to a list, but only if it wasnt pre'],['fun','nksip','ranch:set_protocol_options/1','Upgrade the protocol options for the given listene'],['fun','nksip','ranch:start_listener/1','Start a listener for the given transport and proto'],['fun','nksip','ranch:stop_listener/1','Stop a listener identified by Ref.'],['fun','nksip','ranch_listener:add_connection/1','Add a connection to the listeners pool.'],['fun','nksip','ranch_listener:get_max_connections/1','Return the max number of connections allowed concu'],['fun','nksip','ranch_listener:get_port/1','Return the listeners port.'],['fun','nksip','ranch_listener:get_protocol_options/1','Return the current protocol options.'],['fun','nksip','ranch_listener:remove_connection/1','Remove this process connection from the pool.'],['fun','nksip','ranch_listener:set_max_connections/1','Set the max number of connections allowed concurre'],['fun','nksip','ranch_listener:set_protocol_options/1','Upgrade the protocol options.'],['fun','nksip','ranch_ssl:accept/1','Accept connections with the given listening socket'],['fun','nksip','ranch_ssl:close/1','Close the given socket.'],['fun','nksip','ranch_ssl:controlling_process/1','Give control of the socket to a new process.'],['fun','nksip','ranch_ssl:listen/2','Listen for connections on the given port number.'],['fun','nksip','ranch_ssl:messages/0','Atoms used to identify messages in {active, once |'],['fun','nksip','ranch_ssl:name/0','Name of this transport, ssl.'],['fun','nksip','ranch_ssl:peername/1','Return the remote address and port of the connecti'],['fun','nksip','ranch_ssl:recv/1','Receive data from a socket in passive mode.'],['fun','nksip','ranch_ssl:send/1','Send data on a socket.'],['fun','nksip','ranch_ssl:sendfile/1','Send a file on a socket.'],['fun','nksip','ranch_ssl:setopts/1','Set options on the given socket.'],['fun','nksip','ranch_ssl:sockname/1','Return the local address and port of the connectio'],['fun','nksip','ranch_tcp:accept/1','Accept connections with the given listening socket'],['fun','nksip','ranch_tcp:close/1','Close the given socket.'],['fun','nksip','ranch_tcp:controlling_process/1','Give control of the socket to a new process.'],['fun','nksip','ranch_tcp:listen/2','Listen for connections on the given port number.'],['fun','nksip','ranch_tcp:messages/0','Atoms used to identify messages in {active, once |'],['fun','nksip','ranch_tcp:name/0','Name of this transport, tcp.'],['fun','nksip','ranch_tcp:peername/1','Return the remote address and port of the connecti'],['fun','nksip','ranch_tcp:recv/1','Receive data from a socket in passive mode.'],['fun','nksip','ranch_tcp:send/1','Send data on a socket.'],['fun','nksip','ranch_tcp:sendfile/1','Send a file on a socket.'],['fun','nksip','ranch_tcp:setopts/1','Set options on the given socket.'],['fun','nksip','ranch_tcp:sockname/1','Return the local address and port of the connectio'],['fun','nksip','remove_conn_and_wait_protocol:init/2',[]],['fun','nksip','remove_conn_and_wait_protocol:start_link/4',[]],['fun','nksip','sipapp_endpoint:ack/4',[]],['fun','nksip','sipapp_endpoint:add_callback/2',[]],['fun','nksip','sipapp_endpoint:authorize/4',[]],['fun','nksip','sipapp_endpoint:cancel/3',[]],['fun','nksip','sipapp_endpoint:dialog_update/3',[]],['fun','nksip','sipapp_endpoint:get_sessions/2',[]],['fun','nksip','sipapp_endpoint:get_user_pass/4',[]],['fun','nksip','sipapp_endpoint:handle_call/3',[]],['fun','nksip','sipapp_endpoint:init/1',[]],['fun','nksip','sipapp_endpoint:invite/4',[]],['fun','nksip','sipapp_endpoint:options/3',[]],['fun','nksip','sipapp_endpoint:ping_update/3',[]],['fun','nksip','sipapp_endpoint:register_update/3',[]],['fun','nksip','sipapp_endpoint:reinvite/4',[]],['fun','nksip','sipapp_endpoint:route/6',[]],['fun','nksip','sipapp_endpoint:session_update/3',[]],['fun','nksip','sipapp_endpoint:start/2',[]],['fun','nksip','sipapp_endpoint:stop/1',[]],['fun','nksip','sipapp_server:authorize/4',[]],['fun','nksip','sipapp_server:get_domains/1',[]],['fun','nksip','sipapp_server:get_user_pass/4',[]],['fun','nksip','sipapp_server:handle_call/3',[]],['fun','nksip','sipapp_server:handle_cast/2',[]],['fun','nksip','sipapp_server:handle_info/2',[]],['fun','nksip','sipapp_server:init/1',[]],['fun','nksip','sipapp_server:route/6',[]],['fun','nksip','sipapp_server:set_domains/2',[]],['fun','nksip','sipapp_server:start/2',[]],['fun','nksip','sipapp_server:stop/1',[]],['fun','nksip','special_process:init/1',[]],['fun','nksip','special_process:start/0',[]],['fun','nksip','sync_error_logger:error_msg/1',[]],['fun','nksip','sync_error_logger:error_msg/2',[]],['fun','nksip','sync_error_logger:error_report/1',[]],['fun','nksip','sync_error_logger:error_report/2',[]],['fun','nksip','sync_error_logger:info_msg/1',[]],['fun','nksip','sync_error_logger:info_msg/2',[]],['fun','nksip','sync_error_logger:info_report/1',[]],['fun','nksip','sync_error_logger:info_report/2',[]],['fun','nksip','sync_error_logger:warning_msg/1',[]],['fun','nksip','sync_error_logger:warning_msg/2',[]],['fun','nksip','sync_error_logger:warning_report/1',[]],['fun','nksip','sync_error_logger:warning_report/2',[]],['fun','nksip','tcp_echo:start/0',[]],['fun','nksip','tests_util:empty/0',[]],['fun','nksip','tests_util:log/0',[]],['fun','nksip','tests_util:log/1',[]],['fun','nksip','tests_util:start_nksip/0',[]],['fun','nksip','tests_util:wait/2',[]]];