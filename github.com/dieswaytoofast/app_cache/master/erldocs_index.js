var index = [['app','app_cache','app_cache','[application]'],['mod','app_cache','app_cache','Generic app to provide caching.'],['mod','app_cache','app_cache_app','mnesia based cache application.'],['mod','app_cache','app_cache_processor','The cache processor.'],['mod','app_cache','app_cache_processor_sup','Main module for the supervisor.'],['mod','app_cache','app_cache_refresher','Refreshes individual entries in tables.'],['mod','app_cache','app_cache_refresher_sup','Main module for the supervisor.'],['mod','app_cache','app_cache_scavenger','Scavenger process that periodically removes stale '],['mod','app_cache','app_cache_scavenger_sup','Main module for the supervisor.'],['mod','app_cache','app_cache_sequence_cache','Cache sequences in the gen_server.'],['mod','app_cache','app_cache_sequence_cache_sup','Main module for the supervisor.'],['mod','app_cache','app_cache_sup','The cache processor.'],['fun','app_cache','app_cache:cache_init/1',[]],['fun','app_cache','app_cache:cache_init/1',[]],['fun','app_cache','app_cache:cache_time_to_live/1',[]],['fun','app_cache','app_cache:cached_sequence_all_sequences/0','Returns the list of all the sequences known to app'],['fun','app_cache','app_cache:cached_sequence_create/1','Create a cached sequence identified by Key, starti'],['fun','app_cache','app_cache:cached_sequence_create/1','Equivalent to cached_sequence_create(Key, Start, 1'],['fun','app_cache','app_cache:cached_sequence_create/1','Equivalent to cached_sequence_create(Key, 1, 10).'],['fun','app_cache','app_cache:cached_sequence_current_value/1','Get the current value of the cached sequence ident'],['fun','app_cache','app_cache:cached_sequence_delete/1','Remove the cached sequence identified by Key.'],['fun','app_cache','app_cache:cached_sequence_next_value/1','Get the next value of the cached sequence identifi'],['fun','app_cache','app_cache:cached_sequence_next_value/1','Equivalent to cached_sequence_next_value(Key, 1).'],['fun','app_cache','app_cache:cached_sequence_set_value/1','Set the cached sequence identified by Key to value'],['fun','app_cache','app_cache:create_metatable/0',[]],['fun','app_cache','app_cache:create_metatable/1',[]],['fun','app_cache','app_cache:create_table/1',[]],['fun','app_cache','app_cache:create_table/1',[]],['fun','app_cache','app_cache:create_tables/0',[]],['fun','app_cache','app_cache:create_tables/1',[]],['fun','app_cache','app_cache:current_time_in_gregorian_seconds/0',[]],['fun','app_cache','app_cache:get_after/1','Get all the entries in a table greater than or equ'],['fun','app_cache','app_cache:get_after/1','Equivalent to get_after(safe, Table, After).'],['fun','app_cache','app_cache:get_all_data/1','Get all the data in the table.'],['fun','app_cache','app_cache:get_all_data/1','Equivalent to get_all_data(safe, Table).'],['fun','app_cache','app_cache:get_data/1','Get all the records from the Table with the key Ke'],['fun','app_cache','app_cache:get_data/1','Equivalent to get_data(safe, Table, Key).'],['fun','app_cache','app_cache:get_data_by_first_key/1','Get the first item (in erlang term order) in Table'],['fun','app_cache','app_cache:get_data_by_first_key/1','Equivalent to get_data_by_first_key(safe, Table).'],['fun','app_cache','app_cache:get_data_by_last_key/1','Get the last item (in erlang term order) in Table.'],['fun','app_cache','app_cache:get_data_by_last_key/1','Equivalent to get_data_by_last_key(safe, Table).'],['fun','app_cache','app_cache:get_data_from_index/1','Get all the records from the Table where the Value'],['fun','app_cache','app_cache:get_data_from_index/1','Equivalent to get_data_from_index(safe, Table, Val'],['fun','app_cache','app_cache:get_env/0','Retrieve all key/value pairs in the env for the sp'],['fun','app_cache','app_cache:get_env/1','The official way to get a value from this applicat'],['fun','app_cache','app_cache:get_env/1','The official way to get a value from the apps env'],['fun','app_cache','app_cache:get_first_n_entries/1','Get the first N entries in the table.'],['fun','app_cache','app_cache:get_first_n_entries/1','Equivalent to get_first_n_entries(safe, Table, N).'],['fun','app_cache','app_cache:get_last_n_entries/1','Get the last N entries (in erlang term order) in T'],['fun','app_cache','app_cache:get_last_n_entries/1','Equivalent to get_last_n_entries(safe, Table, N).'],['fun','app_cache','app_cache:get_metatable/0',[]],['fun','app_cache','app_cache:get_record_fields/1',[]],['fun','app_cache','app_cache:get_records/1','Get any items in the table that (exactly) match Re'],['fun','app_cache','app_cache:get_records/1','Equivalent to get_records(safe, Record).'],['fun','app_cache','app_cache:init_metatable/0',[]],['fun','app_cache','app_cache:init_metatable/1',[]],['fun','app_cache','app_cache:init_table/1',[]],['fun','app_cache','app_cache:init_table/1',[]],['fun','app_cache','app_cache:key_exists/1','Check to see if a record w/ key Key exists in Tabl'],['fun','app_cache','app_cache:key_exists/1','Equivalent to key_exists(safe, Table, Key).'],['fun','app_cache','app_cache:last_update_to_datetime/1',[]],['fun','app_cache','app_cache:remove_all_data/1','Remove all the data in Table.'],['fun','app_cache','app_cache:remove_all_data/1','Equivalent to remove_all_data(safe, Table).'],['fun','app_cache','app_cache:remove_data/1','Remove (all) the record(s) with key Key (or keys K'],['fun','app_cache','app_cache:remove_data/1','Equivalent to remove_data(safe, Table, Key).'],['fun','app_cache','app_cache:remove_lots_of_data/1',[]],['fun','app_cache','app_cache:remove_lots_of_data/1','Equivalent to remove_lots_of_data(safe, Table, Key'],['fun','app_cache','app_cache:remove_record/1','Remove the record Record.'],['fun','app_cache','app_cache:remove_record/1','Equivalent to remove_record(safe, Record).'],['fun','app_cache','app_cache:remove_record_ignoring_timestamp/1','Remove the record Record ignoring any existing tim'],['fun','app_cache','app_cache:remove_record_ignoring_timestamp/1','Equivalent to remove_record_ignoring_timestamp(saf'],['fun','app_cache','app_cache:sequence_all_sequences/0','Equivalent to cached_sequence_all_sequences().'],['fun','app_cache','app_cache:sequence_create/1','Create a sequence identified by Key, starting at S'],['fun','app_cache','app_cache:sequence_create/1','Equivalent to sequence_create(Key, 1).'],['fun','app_cache','app_cache:sequence_current_value/1','Get the current value of the sequence identified b'],['fun','app_cache','app_cache:sequence_delete/1','Remove the sequence identified by Key.'],['fun','app_cache','app_cache:sequence_next_value/1','Get the next value of the sequence identified by K'],['fun','app_cache','app_cache:sequence_next_value/1','Equivalent to sequence_next_value(Key, 1).'],['fun','app_cache','app_cache:sequence_set_value/1','Set the value of the sequence identified by Key to'],['fun','app_cache','app_cache:set_data/1','Write the record "Value" to the table.'],['fun','app_cache','app_cache:set_data/1','Equivalent to set_data(safe, Value).'],['fun','app_cache','app_cache:set_data_if_unique/1','Write this entry only if the key doesnt exist.'],['fun','app_cache','app_cache:set_data_if_unique/1','Equivalent to set_data_if_unique(safe, Value).'],['fun','app_cache','app_cache:set_data_overwriting_timestamp/1','If your table is a bag and contains a timestamp fi'],['fun','app_cache','app_cache:set_data_overwriting_timestamp/1','Equivalent to set_data_overwriting_timestamp(safe,'],['fun','app_cache','app_cache:set_persist_function/1',[]],['fun','app_cache','app_cache:set_read_transform_function/1',[]],['fun','app_cache','app_cache:set_refresh_function/1',[]],['fun','app_cache','app_cache:set_write_transform_function/1',[]],['fun','app_cache','app_cache:setup/0','Equivalent to setup([node()]).'],['fun','app_cache','app_cache:setup/1','Does the necessary housekeeping on these nodes to '],['fun','app_cache','app_cache:start/0','Start the application and all its dependencies.'],['fun','app_cache','app_cache:stop/0','Stop the application and all its dependencies.'],['fun','app_cache','app_cache:table_fields/1',[]],['fun','app_cache','app_cache:table_info/1',[]],['fun','app_cache','app_cache:table_time_to_live/1',[]],['fun','app_cache','app_cache:table_version/1',[]],['fun','app_cache','app_cache:update_table_time_to_live/1',[]],['fun','app_cache','app_cache:upgrade_metatable/0',[]],['fun','app_cache','app_cache:upgrade_table/1',[]],['fun','app_cache','app_cache:upgrade_table/1',[]],['fun','app_cache','app_cache:upgrade_table/1',[]],['fun','app_cache','app_cache_app:start/1',[]],['fun','app_cache','app_cache_app:stop/1',[]],['fun','app_cache','app_cache_processor:check_key_exists/1',[]],['fun','app_cache','app_cache_processor:code_change/3',[]],['fun','app_cache','app_cache_processor:create_metatable/1',[]],['fun','app_cache','app_cache_processor:delete_all_data/1',[]],['fun','app_cache','app_cache_processor:delete_data/1',[]],['fun','app_cache','app_cache_processor:delete_record/1',[]],['fun','app_cache','app_cache_processor:double_test_table_1_value/1','Double whatever is in the value field of the inu'],['fun','app_cache','app_cache_processor:get_functions/1',[]],['fun','app_cache','app_cache_processor:get_ttl_and_field_index/1',[]],['fun','app_cache','app_cache_processor:handle_call/3',[]],['fun','app_cache','app_cache_processor:handle_cast/2',[]],['fun','app_cache','app_cache_processor:handle_info/2',[]],['fun','app_cache','app_cache_processor:increment_data/1',[]],['fun','app_cache','app_cache_processor:increment_data/1',[]],['fun','app_cache','app_cache_processor:init/1',[]],['fun','app_cache','app_cache_processor:read_after/1',[]],['fun','app_cache','app_cache_processor:read_all_data/1',[]],['fun','app_cache','app_cache_processor:read_data/1',[]],['fun','app_cache','app_cache_processor:read_data_by_first_key/1','It returns the smallest key in the table       Th'],['fun','app_cache','app_cache_processor:read_data_by_last_key/1','It returns the largest key in the table       Thi'],['fun','app_cache','app_cache_processor:read_data_from_index/1',[]],['fun','app_cache','app_cache_processor:read_first_n_entries/1',[]],['fun','app_cache','app_cache_processor:read_last_n_entries/1',[]],['fun','app_cache','app_cache_processor:read_records/1',[]],['fun','app_cache','app_cache_processor:start_link/0',[]],['fun','app_cache','app_cache_processor:start_link/1',[]],['fun','app_cache','app_cache_processor:table_fields/1',[]],['fun','app_cache','app_cache_processor:table_info/1',[]],['fun','app_cache','app_cache_processor:terminate/2',[]],['fun','app_cache','app_cache_processor:upgrade_metatable/0',[]],['fun','app_cache','app_cache_processor:upgrade_table/1',[]],['fun','app_cache','app_cache_processor:upgrade_table/1',[]],['fun','app_cache','app_cache_processor:upgrade_table/1',[]],['fun','app_cache','app_cache_processor:write_data/1',[]],['fun','app_cache','app_cache_processor:write_data_if_unique/1',[]],['fun','app_cache','app_cache_processor:write_data_overwriting_timestamp/1',[]],['fun','app_cache','app_cache_processor_sup:init/1',[]],['fun','app_cache','app_cache_processor_sup:start_link/0',[]],['fun','app_cache','app_cache_refresher:apply_refresh_function/1','Run the refresh function on the key in the table.'],['fun','app_cache','app_cache_refresher:clear_table/1','remove all the entries for this table.'],['fun','app_cache','app_cache_refresher:code_change/3',[]],['fun','app_cache','app_cache_refresher:handle_call/3',[]],['fun','app_cache','app_cache_refresher:handle_cast/2',[]],['fun','app_cache','app_cache_refresher:handle_info/2','We use this to capture refresh_functon requests wh'],['fun','app_cache','app_cache_refresher:refresh_data/2',[]],['fun','app_cache','app_cache_refresher:remove_function/1',[]],['fun','app_cache','app_cache_refresher:remove_key/1','remove the entry for this key.'],['fun','app_cache','app_cache_refresher:reset_cache/0','Reset the cache.'],['fun','app_cache','app_cache_refresher:reset_function/1',[]],['fun','app_cache','app_cache_refresher:start_link/0',[]],['fun','app_cache','app_cache_refresher:terminate/2',[]],['fun','app_cache','app_cache_refresher_sup:init/1',[]],['fun','app_cache','app_cache_refresher_sup:start_link/0',[]],['fun','app_cache','app_cache_scavenger:code_change/3',[]],['fun','app_cache','app_cache_scavenger:expired_entries/1',[]],['fun','app_cache','app_cache_scavenger:get_timers/0',[]],['fun','app_cache','app_cache_scavenger:handle_call/3',[]],['fun','app_cache','app_cache_scavenger:handle_cast/2',[]],['fun','app_cache','app_cache_scavenger:handle_info/2',[]],['fun','app_cache','app_cache_scavenger:reset_cache/0','Reset the cache.'],['fun','app_cache','app_cache_scavenger:reset_timer/1',[]],['fun','app_cache','app_cache_scavenger:scavenge/1',[]],['fun','app_cache','app_cache_scavenger:start_link/0',[]],['fun','app_cache','app_cache_scavenger:terminate/2',[]],['fun','app_cache','app_cache_scavenger_sup:init/1',[]],['fun','app_cache','app_cache_scavenger_sup:start_link/0',[]],['fun','app_cache','app_cache_sequence_cache:code_change/3',[]],['fun','app_cache','app_cache_sequence_cache:handle_call/3',[]],['fun','app_cache','app_cache_sequence_cache:handle_cast/2',[]],['fun','app_cache','app_cache_sequence_cache:handle_info/2',[]],['fun','app_cache','app_cache_sequence_cache:reset_cache/0','Reset the cache from the sequence table.'],['fun','app_cache','app_cache_sequence_cache:start_link/0',[]],['fun','app_cache','app_cache_sequence_cache:terminate/2',[]],['fun','app_cache','app_cache_sequence_cache_sup:init/1',[]],['fun','app_cache','app_cache_sequence_cache_sup:start_link/0',[]],['fun','app_cache','app_cache_sup:init/1',[]],['fun','app_cache','app_cache_sup:start_link/0',[]]];