var index = [['app','canvas','canvas','[application]'],['mod','canvas','canvas','Canvas server application runner       See 3.1.2 '],['mod','canvas','canvas_app','Callbacks for the canvas application.'],['mod','canvas','canvas_deps','Ensure that the relatively-installed dependencies '],['mod','canvas','canvas_sup','Supervisor for the canvas server application.'],['mod','canvas','canvas_web','Web server for canvas.'],['mod','canvas','client_list','Client list abtraction       Currently only suppo'],['mod','canvas','client_mailbox','Client mailbox, holds client session lines.'],['mod','canvas','client_manager','Client Manager, manages client list       See 3.1'],['mod','canvas','line_store','Line Store       See 3.1.2.2 Database in SRS.'],['mod','canvas','raster_manager','Manages rasterization of drawing data.'],['mod','canvas','raster_painter','Raster drawing interface.'],['mod','canvas','request_controller','Request Controller, routes and handles incoming re'],['mod','canvas','spatial','Spatial functions.'],['mod','canvas','test_runner','Generic module test runner.'],['mod','canvas','util','Misc.'],['fun','canvas','canvas:start/0','Start the canvas server.'],['fun','canvas','canvas:stop/0','Stop the canvas server.'],['fun','canvas','canvas:stop/1',[]],['fun','canvas','canvas_app:start/2','application start callback for canvas.'],['fun','canvas','canvas_app:stop/1','application stop callback for canvas.'],['fun','canvas','canvas_deps:deps_on_path/0','List of project dependencies on the path.'],['fun','canvas','canvas_deps:ensure/0','Ensure that the ebin and include paths for depende'],['fun','canvas','canvas_deps:ensure/1','Ensure that all ebin and include paths for depende'],['fun','canvas','canvas_deps:get_base_dir/0','Return the application directory for this applicat'],['fun','canvas','canvas_deps:get_base_dir/1','Return the application directory for Module.'],['fun','canvas','canvas_deps:local_path/1','Return an application-relative directory for this '],['fun','canvas','canvas_deps:local_path/1','Return an application-relative directory from Modu'],['fun','canvas','canvas_deps:new_siblings/1','Find new siblings paths relative to Module that ar'],['fun','canvas','canvas_sup:init/1','supervisor callback.'],['fun','canvas','canvas_sup:start_link/0','API for starting the supervisor.'],['fun','canvas','canvas_sup:upgrade/0','Add processes if necessary.'],['fun','canvas','canvas_web:loop/3','Handle requests.'],['fun','canvas','canvas_web:start/1','Start the web interface.'],['fun','canvas','canvas_web:stop/0','Stop the web interface.'],['fun','canvas','client_list:fetch_sid/2','Return client associated with SID.'],['fun','canvas','client_list:filter_by_box/2','Return the client pids in a viewing box.'],['fun','canvas','client_list:new/0','Make a new client_list.'],['fun','canvas','client_list:remove_sid/2','Remove a pid from the list.'],['fun','canvas','client_list:save/4','Add or update a pid.'],['fun','canvas','client_list:sid_exists/2','Return whether SID exists.'],['fun','canvas','client_mailbox:client_manager_stub/1',[]],['fun','canvas','client_mailbox:code_change/3','Server code update.'],['fun','canvas','client_mailbox:empty_lines/1','Empty mailbox lines.'],['fun','canvas','client_mailbox:handle_call/3','Handle sync.'],['fun','canvas','client_mailbox:handle_cast/2','Handle async.'],['fun','canvas','client_mailbox:handle_info/2','Handle other messages.'],['fun','canvas','client_mailbox:init/1','Initiate server.'],['fun','canvas','client_mailbox:listener_stub/1',[]],['fun','canvas','client_mailbox:send_line/2','Send a line to a mailbox.'],['fun','canvas','client_mailbox:start_new/4','Start a new mailbox.'],['fun','canvas','client_mailbox:subscribe/2','Subscribe listener to mailbox.'],['fun','canvas','client_mailbox:terminate/2','Server termination.'],['fun','canvas','client_mailbox:unsubscribe/2','Unsubscribe listener from mailbox.'],['fun','canvas','client_manager:code_change/3','Server code update.'],['fun','canvas','client_manager:fetch_sid/2','Fetch a client by SID.'],['fun','canvas','client_manager:filter_by_box/2','Filter and return client list by box.'],['fun','canvas','client_manager:handle_call/3','Handle sync.'],['fun','canvas','client_manager:handle_cast/2','Handle async.'],['fun','canvas','client_manager:handle_info/2','Handle other messages sent to manager.'],['fun','canvas','client_manager:init/1','Called when a connection is made to the server.'],['fun','canvas','client_manager:list/1','Get the list of current clients.'],['fun','canvas','client_manager:new_sid/1','Create a new SID.'],['fun','canvas','client_manager:remove_sid/2','Remove a client by SId.'],['fun','canvas','client_manager:start/0','Start a new client manager.'],['fun','canvas','client_manager:terminate/2','Server termination.'],['fun','canvas','client_manager:update_sid/4','Update a client by SID.'],['fun','canvas','line_store:archive_line/2','Archive a line.'],['fun','canvas','line_store:connect/0','Connect to the database.'],['fun','canvas','line_store:disconnect/1',[]],['fun','canvas','line_store:ensure_tile/3',[]],['fun','canvas','line_store:get_lines/3','Get lines within Box and after T0.'],['fun','canvas','line_store:get_next_tiles_to_paint/2','Gets the next tiles that require painting.'],['fun','canvas','line_store:save_line/2','Save a line to the database.'],['fun','canvas','line_store:set_tile_last_line/4','Set the last_line of a tile.'],['fun','canvas','line_store:set_tile_last_painted/3','Set the last_painted of a tile.'],['fun','canvas','line_store:set_tile_painting_status/3','Set the painting status for a tile.'],['fun','canvas','line_store:unpainted_line_tiles_count/2','Find the number of unpainted tiles intersecting a '],['fun','canvas','raster_manager:code_change/3','Server code update.'],['fun','canvas','raster_manager:handle_call/3','Handle sync.'],['fun','canvas','raster_manager:handle_cast/2','Handle async.'],['fun','canvas','raster_manager:handle_info/2','Handle other messages sent to manager.'],['fun','canvas','raster_manager:init/1','Called when a connection is made to the server.'],['fun','canvas','raster_manager:start/0','Start a new client manager.'],['fun','canvas','raster_manager:terminate/2','Server termination.'],['fun','canvas','raster_manager:test/0',[]],['fun','canvas','raster_manager:test/1','Fetch a client by SID.'],['fun','canvas','raster_manager:tile_drawer/2',[]],['fun','canvas','raster_painter:draw_line/2',[]],['fun','canvas','raster_painter:init/0',[]],['fun','canvas','raster_painter:start/0',[]],['fun','canvas','raster_painter:start_drawing/4',[]],['fun','canvas','raster_painter:stop/1',[]],['fun','canvas','raster_painter:stop_drawing/1',[]],['fun','canvas','request_controller:join/2','/join action: User joins the system and gets a SID'],['fun','canvas','request_controller:route_request/2','Route a request to an action based on its requesti'],['fun','canvas','request_controller:send_line/2','/send_line action: User is sending a line.'],['fun','canvas','request_controller:send_line_worker/3','Distribute lines to mailboxes and line store.'],['fun','canvas','request_controller:update/2','/update action: User is requesting lines.'],['fun','canvas','spatial:boxes_box/1','Calculates the surrounding box for a list of boxes'],['fun','canvas','spatial:boxes_box/2','Calculates the surrounding box for two boxes.'],['fun','canvas','spatial:boxes_intersect/2','Determines if two boxes intersect.'],['fun','canvas','spatial:point_on_box/3','Determines if point is located on a box.'],['fun','canvas','spatial:points_box/1','build a bounding box for a list of coords.'],['fun','canvas','test_runner:test_app_modules/1','Run all tests available in given appss modules.'],['fun','canvas','test_runner:test_module/1','Test module.'],['fun','canvas','test_runner:test_modules/1','Run tests if they exist on each given nodule.'],['fun','canvas','util:ceil/1',[]],['fun','canvas','util:floor/1',[]],['fun','canvas','util:hex_to_int/1','Convert hex to integer.'],['fun','canvas','util:make_dir_path/1','Create full directory path.'],['fun','canvas','util:now_microseconds/0','Return now() in microseconds.'],['fun','canvas','util:now_microseconds/1','Return given now() format time in microseconds.'],['fun','canvas','util:now_milliseconds/0','Return now() in milliseconds.'],['fun','canvas','util:now_milliseconds/1','Return given now() format time in milliseconds.'],['fun','canvas','util:now_seconds/0','Return now() in seconds.'],['fun','canvas','util:now_seconds/1','Return given now() in seconds.'],['fun','canvas','util:num_to_str/1','Convert number to string.'],['fun','canvas','util:reducel/2','Reduce list left.'],['fun','canvas','util:reducer/2','Reduce list right.'],['fun','canvas','util:str_to_num/1','Convert string to number.'],['fun','canvas','util:str_to_term/1','Convert string to term.'],['fun','canvas','util:to_hex/1','Convert term to hex.']];