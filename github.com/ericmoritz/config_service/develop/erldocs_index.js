var index = [['app','config_backend','config_backend','[application]'],['mod','config_backend','config_backend','   Public API to the config_backend.'],['mod','config_backend','config_backend_app',[]],['mod','config_backend','config_backend_sup',[]],['fun','config_backend','config_backend:backend/0',[]],['fun','config_backend','config_backend:delete_config/1','  Delete a config.'],['fun','config_backend','config_backend:get_config_graph/1','  Retrieve the config DAG as a list.'],['fun','config_backend','config_backend:pool/0',[]],['fun','config_backend','config_backend:poolname/0',[]],['fun','config_backend','config_backend:start/0',[]],['fun','config_backend','config_backend:store_config/1','  Store a config.'],['fun','config_backend','config_backend_app:start/2',[]],['fun','config_backend','config_backend_app:stop/1',[]],['fun','config_backend','config_backend_sup:init/1',[]],['fun','config_backend','config_backend_sup:start_link/0',[]],['app','config_data','config_data','[application]'],['mod','config_data','config_data','   prototypical inheritence of proplists.'],['fun','config_data','config_data:fold/1','Fold over deduped key/value pairs ---------------'],['fun','config_data','config_data:get_value/1','returns the value from the prototype graph  retur'],['fun','config_data','config_data:get_value/1','returns the value from the prototype graph.'],['fun','config_data','config_data:new/1','  Create a new  [Properties, Parent, Grandparent'],['fun','config_data','config_data:store/1','Update the root proplist with the property.'],['app','config_rest','config_rest','[application]'],['mod','config_rest','config_rest','.'],['mod','config_rest','config_rest_app',[]],['mod','config_rest','config_rest_config_handler','   RESTful handler for single configuration nodes'],['mod','config_rest','config_rest_config_view_handler','   RESTful cowboy handler for materalized configu'],['mod','config_rest','config_rest_sup',[]],['mod','config_rest','config_rest_urls','   URLs for the rest service.'],['fun','config_rest','config_rest:start/0',[]],['fun','config_rest','config_rest_app:start/2',[]],['fun','config_rest','config_rest_app:stop/1',[]],['fun','config_rest','config_rest_config_handler:allowed_methods/2',[]],['fun','config_rest','config_rest_config_handler:content_types_provided/2',[]],['fun','config_rest','config_rest_config_handler:init/3',[]],['fun','config_rest','config_rest_config_handler:resource_exists/2',[]],['fun','config_rest','config_rest_config_handler:rest_init/2',[]],['fun','config_rest','config_rest_config_handler:to_json/2',[]],['fun','config_rest','config_rest_sup:init/1',[]],['fun','config_rest','config_rest_sup:start_link/0',[]],['fun','config_rest','config_rest_urls:config_url/1','  Return the URL for a single config.'],['fun','config_rest','config_rest_urls:dispatch/0','  Returns the cowboy dispatch for the config_rest'],['app','config_service','config_service','[application]'],['app','config_service','config_service','[application]'],['mod','config_service','config_service','.'],['mod','config_service','config_service_app',[]],['mod','config_service','config_service_sup','.'],['fun','config_service','config_service:port/0',[]],['fun','config_service','config_service:start/0',[]],['fun','config_service','config_service_app:start/2',[]],['fun','config_service','config_service_app:stop/1',[]],['fun','config_service','config_service_sup:init/1',[]],['fun','config_service','config_service_sup:start_link/1',[]],['fun','config_service','config_service_sup:start_link/2',[]]];