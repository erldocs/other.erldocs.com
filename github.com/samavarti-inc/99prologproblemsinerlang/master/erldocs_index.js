var index = [['app','99prologproblemsinerlang','99prologproblemsinerlang','[application]'],['mod','99prologproblemsinerlang','eliminateConsecutiveElementsInAList',[]],['mod','99prologproblemsinerlang','findLastButOneElementOfList',[]],['mod','99prologproblemsinerlang','findLastElementOfList',[]],['mod','99prologproblemsinerlang','findNthElementOfList',[]],['mod','99prologproblemsinerlang','flattenAList',[]],['mod','99prologproblemsinerlang','isListAPalindrome',[]],['mod','99prologproblemsinerlang','numberOfElementsOfList',[]],['mod','99prologproblemsinerlang','reverseAList',[]],['fun','99prologproblemsinerlang','eliminateConsecutiveElementsInAList:eliminateConsecutiveElementsInAList/1',[]],['fun','99prologproblemsinerlang','findLastButOneElementOfList:findLastButOneElementOfList/1',[]],['fun','99prologproblemsinerlang','findLastElementOfList:findLastElementOfList/1',[]],['fun','99prologproblemsinerlang','findLastElementOfList:findLastElementOfListUsingLibFunction/1',[]],['fun','99prologproblemsinerlang','findNthElementOfList:findNthElementOfList/2',[]],['fun','99prologproblemsinerlang','flattenAList:flattenAList/1',[]],['fun','99prologproblemsinerlang','isListAPalindrome:isListAPalindrome/1',[]],['fun','99prologproblemsinerlang','numberOfElementsOfList:numberOfElementsOfList/1',[]],['fun','99prologproblemsinerlang','reverseAList:reverseAList/1',[]],['fun','99prologproblemsinerlang','reverseAList:reverseAListTailRecursive/1',[]]];