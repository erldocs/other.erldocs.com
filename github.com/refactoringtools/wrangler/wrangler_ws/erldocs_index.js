var index = [['app','wrangler','wrangler','[application]'],['mod','wrangler','api_interface','This module provides API functions that map the te'],['mod','wrangler','api_refac','  This module defines the API exposed by Wrangler'],['mod','wrangler','api_wrangler','This module describes the refactoring commands tha'],['mod','wrangler','gen_composite_refac','This module defines the gen_composite_refac behavi'],['mod','wrangler','gen_refac','This module defines the gen_refac behaviour.'],['mod','wrangler','inspec_lib','This module describes the code inspection function'],['mod','wrangler','refac_api_migration','Wranglers support for API migration.'],['mod','wrangler','refac_chunking',[]],['mod','wrangler','refac_farm_intro',[]],['mod','wrangler','refac_map_intro',[]],['mod','wrangler','refac_pipe_intro',[]],['mod','wrangler','refac_s_group',[]],['mod','wrangler','wrangler_gen','This module specifies a suite of refactoring comma'],['mod','wrangler','wrangler_refacs','This module describes the refactorings that are cu'],['fun','wrangler','api_interface:expr_to_fun/1','Return the AST of the function to which Exp (an ex'],['fun','wrangler','api_interface:pos_to_expr/1','Returns the largest, left-most expression enclosed'],['fun','wrangler','api_interface:pos_to_expr1/3',[]],['fun','wrangler','api_interface:pos_to_expr_list/1','Return the expression sequence enclosed by start a'],['fun','wrangler','api_interface:pos_to_fun_def/1','Returns the AST representation of the function def'],['fun','wrangler','api_interface:pos_to_fun_name/1','Returns information about the function name which '],['fun','wrangler','api_interface:pos_to_node/1','Returns the outmost Node which encloses the cursor'],['fun','wrangler','api_interface:pos_to_var/1','Returns the variable node at position Pos.'],['fun','wrangler','api_interface:pos_to_var_name/1','Returns the variable name that occurs at the posit'],['fun','wrangler','api_interface:range_to_node/1','Returns the largest, left-most Node which is enclo'],['fun','wrangler','api_refac:add_to_export_after/1','Adds an entity FAtoAdd to the export list of an ex'],['fun','wrangler','api_refac:bound_var_names/1','Returns all the variable names that are declared w'],['fun','wrangler','api_refac:bound_vars/1','Returns all the variables, including both variable'],['fun','wrangler','api_refac:client_files/1','Returns those files, included in SearchPaths, whic'],['fun','wrangler','api_refac:defined_funs/1','Returns all the functions that are defined by an E'],['fun','wrangler','api_refac:env_var_names/1','Returns all the variable names that are visible to'],['fun','wrangler','api_refac:env_vars/1','Returns all the variables, including both variable'],['fun','wrangler','api_refac:exported_funs/1','Returns all the functions that are exported by an '],['fun','wrangler','api_refac:exported_var_names/1','Returns all the variable names that are declared w'],['fun','wrangler','api_refac:exported_vars/1','Returns all the variables, including both variable'],['fun','wrangler','api_refac:free_var_names/1','Returns all the variable names that are free withi'],['fun','wrangler','api_refac:free_vars/1','Returns all the variables, including both variable'],['fun','wrangler','api_refac:fun_define_info/1','Returns the MFA information attached a node that r'],['fun','wrangler','api_refac:get_app_args/1','For a function application node that matches ?FUN_'],['fun','wrangler','api_refac:get_app_fun/1','For a function application node that matches ?FUN_'],['fun','wrangler','api_refac:get_app_mod/1','For a function application node that matches ?FUN_'],['fun','wrangler','api_refac:get_ast/1','Returns the AST representation of an Erlang file.'],['fun','wrangler','api_refac:get_module_info/1','Returns the module-level information about the Erl'],['fun','wrangler','api_refac:imported_funs/1','Returns all the functions that are imported from M'],['fun','wrangler','api_refac:imported_funs/1','Returns all the functions that are (auto)imported '],['fun','wrangler','api_refac:inscope_funs/1','Returns all the functions that are in-scope in the'],['fun','wrangler','api_refac:insert_an_attr/1','Inserts an attribute before the first function def'],['fun','wrangler','api_refac:is_attribute/1','Returns true if Node represents an attribute     '],['fun','wrangler','api_refac:is_exported/1','Returns true if {FunName, Arity} is exported by th'],['fun','wrangler','api_refac:is_expr/1','Returns true if Node represents an expression (eit'],['fun','wrangler','api_refac:is_fun_name/1','Returns true if a string is lexically a legal func'],['fun','wrangler','api_refac:is_guard_expr/1','Returns true if Node represents a guard expression'],['fun','wrangler','api_refac:is_import/1','Returns true if Node represents an import attribut'],['fun','wrangler','api_refac:is_pattern/1','Returns true if Node represents a pattern, otherwi'],['fun','wrangler','api_refac:is_var_name/1','Returns true if a string is lexically a legal vari'],['fun','wrangler','api_refac:make_new_name/1','Generates a new name by appending "_1" to the end '],['fun','wrangler','api_refac:mfa_to_fun_def/1','Returns the function form that defines MFA; none i'],['fun','wrangler','api_refac:module_name/1','Returns the name of the module defined in File,.'],['fun','wrangler','api_refac:remove_from_import/1','Removes F/A from the entity list of the import att'],['fun','wrangler','api_refac:start_end_loc/1','Returns the start and end locations of the code re'],['fun','wrangler','api_refac:syntax_category/1','Returns the syntax category of Node.'],['fun','wrangler','api_refac:syntax_context/1','Returns the syntax context of Node.'],['fun','wrangler','api_refac:type/1','The function is the same as erl_syntax:type/1.'],['fun','wrangler','api_refac:update_app_args/1','Replaces the arguments of a function application n'],['fun','wrangler','api_refac:update_app_fun/1','Replaces the function name part of a function appl'],['fun','wrangler','api_refac:update_app_mod/1','Replaces the module name part of a function applic'],['fun','wrangler','api_refac:var_refs/1','Returns all the locations where a variable is used'],['fun','wrangler','api_refac:variable_define_pos/1','Returns the define location of the variable repres'],['fun','wrangler','api_wrangler:move_fun/1','Move a function to another module.'],['fun','wrangler','api_wrangler:refac_bug_cond/1','For QuickCheck only.'],['fun','wrangler','api_wrangler:rename_fun/1','Rename a function.'],['fun','wrangler','api_wrangler:rename_mod/1','Rename a module.'],['fun','wrangler','api_wrangler:similar_code/1','Similar code detection.'],['fun','wrangler','api_wrangler:start/0','Start a Wrangler application.'],['fun','wrangler','api_wrangler:stop/0','Stop a Wrangler application.'],['fun','wrangler','api_wrangler:undo/0','Undo the previous refactoring.'],['fun','wrangler','gen_refac:run_refac/1','The interface function for invoking a refactoring '],['fun','wrangler','inspec_lib:calls_to_fun/1','Report the functions by which the function specifi'],['fun','wrangler','inspec_lib:cyclic_dependent_modules/1','Report the cyclic module dependencies, if there is'],['fun','wrangler','inspec_lib:dependencies_of_a_module/1','Report modules that depend on the module specified'],['fun','wrangler','inspec_lib:find_var_instances/1','Find all the instances of a variable, including bo'],['fun','wrangler','inspec_lib:gen_function_callgraph/1','Generate the function callgraph for a given Erlang'],['fun','wrangler','inspec_lib:gen_module_graph/1','Generate the module graph for a given list of dire'],['fun','wrangler','inspec_lib:improper_inter_module_calls/1','Report improper module dependencies, if there is a'],['fun','wrangler','inspec_lib:large_modules/1','Report all the modules that consist of more than a'],['fun','wrangler','inspec_lib:long_functions/1','Report all the functions that consist of more than'],['fun','wrangler','inspec_lib:nested_exprs/1','Find all the functions that contain certain type o'],['fun','wrangler','inspec_lib:non_tail_recursive_servers/1','Report non tail-recursive server functions.'],['fun','wrangler','inspec_lib:not_flush_unknown_messages/1','Report functions whose receive expression, if ther'],['fun','wrangler','refac_api_migration:do_api_migration/1',[]],['fun','wrangler','refac_api_migration:generate_rule_based_api_migration_mod/1',[]],['fun','wrangler','refac_chunking:check_pre_cond/1',[]],['fun','wrangler','refac_chunking:input_par_prompts/0',[]],['fun','wrangler','refac_chunking:select_focus/1',[]],['fun','wrangler','refac_chunking:selective/0',[]],['fun','wrangler','refac_chunking:transform/1',[]],['fun','wrangler','refac_farm_intro:check_pre_cond/1',[]],['fun','wrangler','refac_farm_intro:input_par_prompts/0',[]],['fun','wrangler','refac_farm_intro:select_focus/1',[]],['fun','wrangler','refac_farm_intro:selective/0',[]],['fun','wrangler','refac_farm_intro:transform/1',[]],['fun','wrangler','refac_map_intro:check_pre_cond/1',[]],['fun','wrangler','refac_map_intro:input_par_prompts/0',[]],['fun','wrangler','refac_map_intro:select_focus/1',[]],['fun','wrangler','refac_map_intro:selective/0',[]],['fun','wrangler','refac_map_intro:transform/1',[]],['fun','wrangler','refac_pipe_intro:check_pre_cond/1',[]],['fun','wrangler','refac_pipe_intro:input_par_prompts/0',[]],['fun','wrangler','refac_pipe_intro:select_focus/1',[]],['fun','wrangler','refac_pipe_intro:selective/0',[]],['fun','wrangler','refac_pipe_intro:transform/1',[]],['fun','wrangler','refac_s_group:meta_rule_set/0',[]],['fun','wrangler','refac_s_group:old_apis/0',[]],['fun','wrangler','refac_s_group:simple_rule_set/0',[]],['fun','wrangler','wrangler_gen:add_to_export/1','Command generator for adding function names to the'],['fun','wrangler','wrangler_gen:fold_expr/1','Command generator for folding expressions against '],['fun','wrangler','wrangler_gen:gen_fun/1','Command generator for function generalisation.'],['fun','wrangler','wrangler_gen:move_fun/1','Command generator for moving functions from one mo'],['fun','wrangler','wrangler_gen:rename_fun/1','Command generator for renaming function names.'],['fun','wrangler','wrangler_gen:rename_mod/1','Command generator for renaming module names.'],['fun','wrangler','wrangler_gen:rename_var/1','Command generator for renaming variable names.'],['fun','wrangler','wrangler_gen:swap_args/1','Command generator for for swapping function argume'],['fun','wrangler','wrangler_gen:tuple_args/1','Command generator for tupling function arguments.'],['fun','wrangler','wrangler_gen:unfold_fun_app/1','Command generator for unfolding a function applica'],['fun','wrangler','wrangler_refacs:add_a_tag/1','Add a tag to all the messages received by a server'],['fun','wrangler','wrangler_refacs:apply_changes_eclipse/1','gen_refac refactorings - delegate functions in ord'],['fun','wrangler','wrangler_refacs:eqc_fsm_to_record/1','Turn a non-record representation of eqc_fsm state '],['fun','wrangler','wrangler_refacs:eqc_statem_to_record/1','Turn a non-record representation of eqc_statem sta'],['fun','wrangler','wrangler_refacs:fold_against_macro/1','Fold expressions/patterns against a macro definiti'],['fun','wrangler','wrangler_refacs:fold_expr/1','Fold expressions against a function definition.'],['fun','wrangler','wrangler_refacs:fun_extraction/1','Introduce a new function to represent an expressio'],['fun','wrangler','wrangler_refacs:fun_to_process/1','Turn a function into a server process (Beta).'],['fun','wrangler','wrangler_refacs:gen_fsm_to_record/1','Turn a non-record representation of gen_fsm state '],['fun','wrangler','wrangler_refacs:generalise/1',' Generalise a function definition.'],['fun','wrangler','wrangler_refacs:get_user_refactorings/1','get all user refactoring modules (gen_refac and ge'],['fun','wrangler','wrangler_refacs:inline_var/1','Inline a variable definition.'],['fun','wrangler','wrangler_refacs:intro_new_var/1','Introduce a new variable to represent an expressio'],['fun','wrangler','wrangler_refacs:merge_forall/2','Merge nested but undependent ?FORALLs into one ?FO'],['fun','wrangler','wrangler_refacs:merge_let/2','Merge nested but independent ?LETs into one ?LET.'],['fun','wrangler','wrangler_refacs:move_fun/1','Move a function definition from its current module'],['fun','wrangler','wrangler_refacs:new_let/1','Introduce ?LET.'],['fun','wrangler','wrangler_refacs:new_macro/1','Introduce a macro to represent a syntactically wel'],['fun','wrangler','wrangler_refacs:normalise_record_expr/1','Reorder the record fields in a record expression t'],['fun','wrangler','wrangler_refacs:partition_exports/1','Partition the exports of a module.'],['fun','wrangler','wrangler_refacs:register_pid/1','Register a process (Beta).'],['fun','wrangler','wrangler_refacs:rename_fun/6','Rename a function.'],['fun','wrangler','wrangler_refacs:rename_mod/1','Rename a module.'],['fun','wrangler','wrangler_refacs:rename_process/1','Rename a registered process (Beta).'],['fun','wrangler','wrangler_refacs:rename_var/1','Rename a variable.'],['fun','wrangler','wrangler_refacs:similar_code_detection/1','A similar code detector that searches for similar '],['fun','wrangler','wrangler_refacs:similar_code_detection_in_buffer/1','A similar code detector that searches for similar '],['fun','wrangler','wrangler_refacs:similar_expression_search_in_buffer/1','Search expression search in the current Erlang buf'],['fun','wrangler','wrangler_refacs:similar_expression_search_in_dirs/1','Simiar expression search across multiple Erlang mo'],['fun','wrangler','wrangler_refacs:tuple_funpar/1','Group a consecutive sequence of parameters of a fu'],['fun','wrangler','wrangler_refacs:unfold_fun_app/1','Unfold a function application to an instance of th']];