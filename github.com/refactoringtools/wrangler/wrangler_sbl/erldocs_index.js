var index = [['app','wrangler','wrangler','[application]'],['mod','wrangler','api_ast_traverse',[]],['mod','wrangler','api_interface','This module provides API functions that map the te'],['mod','wrangler','api_refac','  This module defines the API exposed by Wrangler'],['mod','wrangler','api_spec',[]],['mod','wrangler','api_wrangler','This module describes the refactoring commands tha'],['mod','wrangler','dict_to_map',[]],['mod','wrangler','distel',[]],['mod','wrangler','distel_ie',[]],['mod','wrangler','emacs_inspec',[]],['mod','wrangler','emacs_wrangler',[]],['mod','wrangler','fdoc',[]],['mod','wrangler','gen_composite_refac','This module defines the gen_composite_refac behavi'],['mod','wrangler','gen_refac','This module defines the gen_refac behaviour.'],['mod','wrangler','inspec_examples','  Some example code inspection functions using co'],['mod','wrangler','inspec_feedback_wrangler','Wranglers feedback interface module to Erlang E-l'],['mod','wrangler','inspec_lib','This module describes the code inspection function'],['mod','wrangler','keysearch_keyfind',[]],['mod','wrangler','otp_doc',[]],['mod','wrangler','refac_add_a_tag',[]],['mod','wrangler','refac_api_migration','Wranglers support for API migration.'],['mod','wrangler','refac_batch_rename_fun',[]],['mod','wrangler','refac_bug_cond',[]],['mod','wrangler','refac_clone_evolution',[]],['mod','wrangler','refac_comment_out_spec',[]],['mod','wrangler','refac_duplicated_code',[]],['mod','wrangler','refac_expr_search',[]],['mod','wrangler','refac_fold_against_macro',[]],['mod','wrangler','refac_fold_expression','This refactoring replaces instances of the right-h'],['mod','wrangler','refac_fun_to_process',[]],['mod','wrangler','refac_gen','Generalise a function by selecting a sub-expressio'],['mod','wrangler','refac_inc_sim_code',[]],['mod','wrangler','refac_inline_var','Inline a variable definition.'],['mod','wrangler','refac_intro_new_var',[]],['mod','wrangler','refac_move_fun','Move a function definition from its current module'],['mod','wrangler','refac_new_fun',[]],['mod','wrangler','refac_new_let',[]],['mod','wrangler','refac_new_macro',[]],['mod','wrangler','refac_qc_gen',[]],['mod','wrangler','refac_regexp_to_re',[]],['mod','wrangler','refac_register_pid','This refactoring register a process id, Pid say, w'],['mod','wrangler','refac_rename_fun','Rename a function with a user-supplied new functio'],['mod','wrangler','refac_rename_mod','Rename a module with a user-supplied new module na'],['mod','wrangler','refac_rename_process',[]],['mod','wrangler','refac_rename_var','Rename a variable with a user-supplied new variabl'],['mod','wrangler','refac_s_group',[]],['mod','wrangler','refac_sim_code',[]],['mod','wrangler','refac_sim_expr_search',[]],['mod','wrangler','refac_tuple','Group a consecutive sequence of arguments of a fun'],['mod','wrangler','refac_unfold_fun_app','Unfold a function application to an instance of th'],['mod','wrangler','regexp_re',[]],['mod','wrangler','wrangler',[]],['mod','wrangler','wrangler_add_new_refac','Rename a variable with a user-supplied new variabl'],['mod','wrangler','wrangler_annotate_ast',[]],['mod','wrangler','wrangler_annotate_pid',[]],['mod','wrangler','wrangler_anti_unification',[]],['mod','wrangler','wrangler_ast_server',[]],['mod','wrangler','wrangler_atom_annotation',[]],['mod','wrangler','wrangler_atom_utils',[]],['mod','wrangler','wrangler_backup_server',[]],['mod','wrangler','wrangler_callgraph',[]],['mod','wrangler','wrangler_callgraph_server',[]],['mod','wrangler','wrangler_cmd_server',[]],['mod','wrangler','wrangler_code_inspector_lib',[]],['mod','wrangler','wrangler_code_search_utils',[]],['mod','wrangler','wrangler_comment_scan','Functions for reading comment lines from Erlang so'],['mod','wrangler','wrangler_epp',[]],['mod','wrangler','wrangler_epp_dodger','epp_dodger - bypasses the Erlang preprocessor.'],['mod','wrangler','wrangler_error_logger',[]],['mod','wrangler','wrangler_expand_rule',[]],['mod','wrangler','wrangler_gen','This module specifies a suite of refactoring comma'],['mod','wrangler','wrangler_gen_refac_server',[]],['mod','wrangler','wrangler_generalised_unification',[]],['mod','wrangler','wrangler_io',[]],['mod','wrangler','wrangler_misc',[]],['mod','wrangler','wrangler_modularity_inspection',[]],['mod','wrangler','wrangler_module_graph',[]],['mod','wrangler','wrangler_modulegraph_server',[]],['mod','wrangler','wrangler_prettypr','Pretty printing of abstract Erlang syntax trees.'],['mod','wrangler','wrangler_prettypr_0','A generic pretty printer library.'],['mod','wrangler','wrangler_preview_server',[]],['mod','wrangler','wrangler_recomment','Inserting comments into abstract Erlang syntax tre'],['mod','wrangler','wrangler_refacs','This module describes the refactorings that are cu'],['mod','wrangler','wrangler_scan',[]],['mod','wrangler','wrangler_scan_with_layout',[]],['mod','wrangler','wrangler_side_effect',[]],['mod','wrangler','wrangler_slice','Forward and backward slicing of Erlang programs.'],['mod','wrangler','wrangler_slice_new',[]],['mod','wrangler','wrangler_suffix_tree',[]],['mod','wrangler','wrangler_sup',[]],['mod','wrangler','wrangler_syntax','Abstract Erlang syntax trees.'],['mod','wrangler','wrangler_syntax_lib','Support library for abstract Erlang syntax trees.'],['mod','wrangler','wrangler_undo_server',[]],['mod','wrangler','wrangler_unification',[]],['mod','wrangler','wrangler_write_file',[]],['fun','wrangler','api_ast_traverse:fold/2','Folds a function over all nodes of a syntax tree.'],['fun','wrangler','api_ast_traverse:fold_subtrees/2','Folds a function over the immediate subtrees of a '],['fun','wrangler','api_ast_traverse:foldl_listlist/2','Like lists:foldl/3, but over a list of lists.'],['fun','wrangler','api_ast_traverse:full_buTP/2','Full bottom_up type-preserving traversal of the ab'],['fun','wrangler','api_ast_traverse:full_tdTP/1',[]],['fun','wrangler','api_ast_traverse:full_tdTU/3',[]],['fun','wrangler','api_ast_traverse:map/2','Applies a function to each node of a syntax tree.'],['fun','wrangler','api_ast_traverse:map_subtrees/2','Applies a function to each immediate subtree of a '],['fun','wrangler','api_ast_traverse:mapfold/2','Combines map and fold in a single operation.'],['fun','wrangler','api_ast_traverse:mapfold_subtrees/2','Does a mapfold operation over the immediate subtre'],['fun','wrangler','api_ast_traverse:mapfoldl_listlist/3','Like lists:mapfoldl/3, but over a list of lists.'],['fun','wrangler','api_ast_traverse:once_tdTU/2','Once-topdown type-unifying traversal of the abstra'],['fun','wrangler','api_ast_traverse:stop_tdTP/2','Stop-topdown type-preserving traversal of the abst'],['fun','wrangler','api_ast_traverse:stop_tdTU/3',[]],['fun','wrangler','api_interface:expr_to_fun/1','Return the AST of the function to which Exp (an ex'],['fun','wrangler','api_interface:pos_to_expr/1','Returns the largest, left-most expression enclosed'],['fun','wrangler','api_interface:pos_to_expr1/3',[]],['fun','wrangler','api_interface:pos_to_expr_list/1','Return the expression sequence enclosed by start a'],['fun','wrangler','api_interface:pos_to_fun_def/1','Returns the AST representation of the function def'],['fun','wrangler','api_interface:pos_to_fun_name/1','Returns information about the function name which '],['fun','wrangler','api_interface:pos_to_node/1','Returns the outmost Node which encloses the cursor'],['fun','wrangler','api_interface:pos_to_var/1','Returns the variable node at position Pos.'],['fun','wrangler','api_interface:pos_to_var_name/1','Returns the variable name that occurs at the posit'],['fun','wrangler','api_interface:range_to_node/1','Returns the largest, left-most Node which is enclo'],['fun','wrangler','api_refac:add_to_export_after/1','Adds an entity FAtoAdd to the export list of an ex'],['fun','wrangler','api_refac:bound_var_names/1','Returns all the variable names that are declared w'],['fun','wrangler','api_refac:bound_vars/1','Returns all the variables, including both variable'],['fun','wrangler','api_refac:client_files/1','Returns those files, included in SearchPaths, whic'],['fun','wrangler','api_refac:defined_funs/1','Returns all the functions that are defined by an E'],['fun','wrangler','api_refac:env_var_names/1','Returns all the variable names that are visible to'],['fun','wrangler','api_refac:env_vars/1','Returns all the variables, including both variable'],['fun','wrangler','api_refac:exported_funs/1','Returns all the functions that are exported by an '],['fun','wrangler','api_refac:exported_var_names/1','Returns all the variable names that are declared w'],['fun','wrangler','api_refac:exported_vars/1','Returns all the variables, including both variable'],['fun','wrangler','api_refac:free_var_names/1','Returns all the variable names that are free withi'],['fun','wrangler','api_refac:free_vars/1','Returns all the variables, including both variable'],['fun','wrangler','api_refac:fun_define_info/1','Returns the MFA information attached a node that r'],['fun','wrangler','api_refac:get_app_args/1','For a function application node that matches ?FUN_'],['fun','wrangler','api_refac:get_app_fun/1','For a function application node that matches ?FUN_'],['fun','wrangler','api_refac:get_app_mod/1','For a function application node that matches ?FUN_'],['fun','wrangler','api_refac:get_ast/1','Returns the AST representation of an Erlang file.'],['fun','wrangler','api_refac:get_module_info/1','Returns the module-level information about the Erl'],['fun','wrangler','api_refac:imported_funs/1','Returns all the functions that are imported from M'],['fun','wrangler','api_refac:imported_funs/1','Returns all the functions that are (auto)imported '],['fun','wrangler','api_refac:inscope_funs/1','Returns all the functions that are in-scope in the'],['fun','wrangler','api_refac:insert_an_attr/1','Inserts an attribute before the first function def'],['fun','wrangler','api_refac:is_attribute/1','Returns true if Node represents an attribute     '],['fun','wrangler','api_refac:is_exported/1','Returns true if {FunName, Arity} is exported by th'],['fun','wrangler','api_refac:is_expr/1','Returns true if Node represents an expression (eit'],['fun','wrangler','api_refac:is_fun_name/1','Returns true if a string is lexically a legal func'],['fun','wrangler','api_refac:is_guard_expr/1','Returns true if Node represents a guard expression'],['fun','wrangler','api_refac:is_import/1','Returns true if Node represents an import attribut'],['fun','wrangler','api_refac:is_pattern/1','Returns true if Node represents a pattern, otherwi'],['fun','wrangler','api_refac:is_var_name/1','Returns true if a string is lexically a legal vari'],['fun','wrangler','api_refac:make_new_name/1','Generates a new name by appending "_1" to the end '],['fun','wrangler','api_refac:mfa_to_fun_def/1','Returns the function form that defines MFA; none i'],['fun','wrangler','api_refac:module_name/1','Returns the name of the module defined in File,.'],['fun','wrangler','api_refac:remove_from_import/1','Removes F/A from the entity list of the import att'],['fun','wrangler','api_refac:start_end_loc/1','Returns the start and end locations of the code re'],['fun','wrangler','api_refac:syntax_category/1','Returns the syntax category of Node.'],['fun','wrangler','api_refac:syntax_context/1','Returns the syntax context of Node.'],['fun','wrangler','api_refac:type/1','The function is the same as erl_syntax:type/1.'],['fun','wrangler','api_refac:update_app_args/1','Replaces the arguments of a function application n'],['fun','wrangler','api_refac:update_app_fun/1','Replaces the function name part of a function appl'],['fun','wrangler','api_refac:update_app_mod/1','Replaces the module name part of a function applic'],['fun','wrangler','api_refac:var_refs/1','Returns all the locations where a variable is used'],['fun','wrangler','api_refac:variable_define_pos/1','Returns the define location of the variable repres'],['fun','wrangler','api_spec:add_arg_type_to_spec/3',[]],['fun','wrangler','api_spec:is_type_spec/1',[]],['fun','wrangler','api_spec:is_type_spec/2',[]],['fun','wrangler','api_spec:rename_in_spec/2',[]],['fun','wrangler','api_spec:replace_arg_type_in_spec/3',[]],['fun','wrangler','api_spec:replace_ret_type_in_spec/2',[]],['fun','wrangler','api_spec:rm_arg_type_from_spec/2',[]],['fun','wrangler','api_spec:swap_arg_types_in_spec/3',[]],['fun','wrangler','api_spec:tuple_arg_types_in_spec/3',[]],['fun','wrangler','api_wrangler:move_fun/1','Move a function to another module.'],['fun','wrangler','api_wrangler:refac_bug_cond/1','For QuickCheck only.'],['fun','wrangler','api_wrangler:rename_fun/1','Rename a function.'],['fun','wrangler','api_wrangler:rename_mod/1','Rename a module.'],['fun','wrangler','api_wrangler:similar_code/1','Similar code detection.'],['fun','wrangler','api_wrangler:start/0','Start a Wrangler application.'],['fun','wrangler','api_wrangler:stop/0','Stop a Wrangler application.'],['fun','wrangler','api_wrangler:undo/0','Undo the previous refactoring.'],['fun','wrangler','dict_to_map:erase/2',[]],['fun','wrangler','dict_to_map:fetch/2',[]],['fun','wrangler','dict_to_map:fetch_keys/1',[]],['fun','wrangler','dict_to_map:fold/3',[]],['fun','wrangler','dict_to_map:from_list/1',[]],['fun','wrangler','dict_to_map:is_empty/1',[]],['fun','wrangler','dict_to_map:is_key/2',[]],['fun','wrangler','dict_to_map:keys/1',[]],['fun','wrangler','dict_to_map:map/2',[]],['fun','wrangler','dict_to_map:new/0',[]],['fun','wrangler','dict_to_map:old_api_module_name/0',[]],['fun','wrangler','dict_to_map:size/1',[]],['fun','wrangler','dict_to_map:store/3',[]],['fun','wrangler','dict_to_map:to_list/1',[]],['fun','wrangler','dict_to_map:update/3',[]],['fun','wrangler','distel_ie:ensure_registered/0',[]],['fun','wrangler','distel_ie:evaluate/2',[]],['fun','wrangler','distel_ie:init/1',[]],['fun','wrangler','distel_ie:loop/1',[]],['fun','wrangler','distel_ie:start/0',[]],['fun','wrangler','distel_ie:start/1',[]],['fun','wrangler','distel_ie:test1/0',[]],['fun','wrangler','distel_ie:test2/0',[]],['fun','wrangler','distel_ie:test3/0',[]],['fun','wrangler','distel_ie:test4/0',[]],['fun','wrangler','distel_ie:test5/0',[]],['fun','wrangler','emacs_inspec:input_par_prompts/2',[]],['fun','wrangler','emacs_wrangler:apply_refac/3',[]],['fun','wrangler','emacs_wrangler:apply_refac_1/3',[]],['fun','wrangler','fdoc:apropos/1',[]],['fun','wrangler','fdoc:describe/1',[]],['fun','wrangler','fdoc:describe/2',[]],['fun','wrangler','fdoc:describe/3',[]],['fun','wrangler','fdoc:describe2/1',[]],['fun','wrangler','fdoc:describe2/2',[]],['fun','wrangler','fdoc:describe2/3',[]],['fun','wrangler','fdoc:describe_file/1',[]],['fun','wrangler','fdoc:description/1',[]],['fun','wrangler','fdoc:description/2',[]],['fun','wrangler','fdoc:description/3',[]],['fun','wrangler','fdoc:file/1',[]],['fun','wrangler','fdoc:get_apropos/1',[]],['fun','wrangler','fdoc:init/0',[]],['fun','wrangler','fdoc:loop/0',[]],['fun','wrangler','fdoc:stop/0',[]],['fun','wrangler','fdoc:string/1',[]],['fun','wrangler','gen_refac:run_refac/1','The interface function for invoking a refactoring '],['fun','wrangler','inspec_examples:append_two_lists/1',[]],['fun','wrangler','inspec_examples:calls_to_specific_function/1',[]],['fun','wrangler','inspec_examples:is_non_tail_recursive/1',[]],['fun','wrangler','inspec_examples:non_tail_recursive_function/1',[]],['fun','wrangler','inspec_examples:test5/1',[]],['fun','wrangler','inspec_examples:top_level_if/1',[]],['fun','wrangler','inspec_examples:unnecessary_match/1',[]],['fun','wrangler','inspec_feedback_wrangler:append_two_lists/1',[]],['fun','wrangler','inspec_feedback_wrangler:calls_to_specific_function/1',[]],['fun','wrangler','inspec_feedback_wrangler:calls_to_specific_functions/1',[]],['fun','wrangler','inspec_feedback_wrangler:classify_pattern_match/1',[]],['fun','wrangler','inspec_feedback_wrangler:collect_function_apps/2',[]],['fun','wrangler','inspec_feedback_wrangler:collect_function_apps2/2',[]],['fun','wrangler','inspec_feedback_wrangler:do_code_inspection/1',[]],['fun','wrangler','inspec_feedback_wrangler:large_modules/1',[]],['fun','wrangler','inspec_feedback_wrangler:long_functions/1',[]],['fun','wrangler','inspec_feedback_wrangler:nested_case_exprs/1',[]],['fun','wrangler','inspec_feedback_wrangler:nested_if_exprs/1',[]],['fun','wrangler','inspec_feedback_wrangler:nested_receive_exprs/1',[]],['fun','wrangler','inspec_feedback_wrangler:non_tail_recursive_function/1',[]],['fun','wrangler','inspec_feedback_wrangler:not_flush_unknown_messages/1',[]],['fun','wrangler','inspec_feedback_wrangler:test/1',[]],['fun','wrangler','inspec_feedback_wrangler:top_level_if/1',[]],['fun','wrangler','inspec_feedback_wrangler:unnecessary_match/1',[]],['fun','wrangler','inspec_feedback_wrangler:use_of_export_all/1',[]],['fun','wrangler','inspec_feedback_wrangler:use_of_specific_ops/1',[]],['fun','wrangler','inspec_lib:calls_to_fun/1','Report the functions by which the function specifi'],['fun','wrangler','inspec_lib:cyclic_dependent_modules/1','Report the cyclic module dependencies, if there is'],['fun','wrangler','inspec_lib:dependencies_of_a_module/1','Report modules that depend on the module specified'],['fun','wrangler','inspec_lib:find_var_instances/1','Find all the instances of a variable, including bo'],['fun','wrangler','inspec_lib:gen_function_callgraph/1','Generate the function callgraph for a given Erlang'],['fun','wrangler','inspec_lib:gen_module_graph/1','Generate the module graph for a given list of dire'],['fun','wrangler','inspec_lib:improper_inter_module_calls/1','Report improper module dependencies, if there is a'],['fun','wrangler','inspec_lib:large_modules/1','Report all the modules that consist of more than a'],['fun','wrangler','inspec_lib:long_functions/1','Report all the functions that consist of more than'],['fun','wrangler','inspec_lib:nested_exprs/1','Find all the functions that contain certain type o'],['fun','wrangler','inspec_lib:non_tail_recursive_servers/1','Report non tail-recursive server functions.'],['fun','wrangler','inspec_lib:not_flush_unknown_messages/1','Report functions whose receive expression, if ther'],['fun','wrangler','keysearch_keyfind:old_api_module_name/0',[]],['fun','wrangler','otp_doc:arguments/2',[]],['fun','wrangler','otp_doc:code_change/3',[]],['fun','wrangler','otp_doc:distel/4',[]],['fun','wrangler','otp_doc:firefox/1',[]],['fun','wrangler','otp_doc:firefox/2',[]],['fun','wrangler','otp_doc:firefox/3',[]],['fun','wrangler','otp_doc:funcsf/3',[]],['fun','wrangler','otp_doc:functions/2',[]],['fun','wrangler','otp_doc:handle_call/3',[]],['fun','wrangler','otp_doc:handle_cast/2',[]],['fun','wrangler','otp_doc:handle_info/2',[]],['fun','wrangler','otp_doc:init/1',[]],['fun','wrangler','otp_doc:modules/1',[]],['fun','wrangler','otp_doc:sig/1',[]],['fun','wrangler','otp_doc:sig/2',[]],['fun','wrangler','otp_doc:sig/3',[]],['fun','wrangler','otp_doc:start/0',[]],['fun','wrangler','otp_doc:stop/0',[]],['fun','wrangler','otp_doc:terminate/2',[]],['fun','wrangler','refac_add_a_tag:add_a_tag/7',[]],['fun','wrangler','refac_api_migration:do_api_migration/1',[]],['fun','wrangler','refac_api_migration:generate_rule_based_api_migration_mod/1',[]],['fun','wrangler','refac_batch_rename_fun:composite_refac/1',[]],['fun','wrangler','refac_batch_rename_fun:select_focus/1',[]],['fun','wrangler','refac_bug_cond:check_pre_cond/1',[]],['fun','wrangler','refac_bug_cond:input_par_prompts/0',[]],['fun','wrangler','refac_bug_cond:refac_bug_cond/1',[]],['fun','wrangler','refac_bug_cond:select_focus/1',[]],['fun','wrangler','refac_bug_cond:selective/0',[]],['fun','wrangler','refac_bug_cond:transform/1',[]],['fun','wrangler','refac_clone_evolution:gen_clone_report/1',[]],['fun','wrangler','refac_clone_evolution:gen_clone_report/3',[]],['fun','wrangler','refac_clone_evolution:inc_sim_code_detection_in_buffer/8',[]],['fun','wrangler','refac_comment_out_spec:comment_out/1',[]],['fun','wrangler','refac_duplicated_code:duplicated_code/5',[]],['fun','wrangler','refac_duplicated_code:duplicated_code_command_line/5',[]],['fun','wrangler','refac_duplicated_code:duplicated_code_eclipse/5','Find duplicated code in a Erlang source files.'],['fun','wrangler','refac_expr_search:contained_exprs/2',[]],['fun','wrangler','refac_expr_search:expr_search_eclipse/4',[]],['fun','wrangler','refac_expr_search:expr_search_in_buffer/1','Search for identical clones of an expression/ expr'],['fun','wrangler','refac_expr_search:expr_search_in_dirs/1','Search for identical clones of an expression/ expr'],['fun','wrangler','refac_fold_against_macro:fold_against_macro/1',[]],['fun','wrangler','refac_fold_against_macro:fold_against_macro/7',[]],['fun','wrangler','refac_fold_against_macro:fold_against_macro_1/1',[]],['fun','wrangler','refac_fold_against_macro:fold_against_macro_1_eclipse/5',[]],['fun','wrangler','refac_fold_against_macro:fold_against_macro_eclipse/5',[]],['fun','wrangler','refac_fold_expression:do_fold_expression/5',[]],['fun','wrangler','refac_fold_expression:do_fold_expression/6',[]],['fun','wrangler','refac_fold_expression:fold_expr_1_eclipse/5',[]],['fun','wrangler','refac_fold_expression:fold_expr_by_loc/6',[]],['fun','wrangler','refac_fold_expression:fold_expr_by_loc_eclipse/5',[]],['fun','wrangler','refac_fold_expression:fold_expr_by_name/8',[]],['fun','wrangler','refac_fold_expression:fold_expr_by_name_eclipse/7',[]],['fun','wrangler','refac_fold_expression:fold_expression_1/5',[]],['fun','wrangler','refac_fun_to_process:fun_to_process/7',[]],['fun','wrangler','refac_fun_to_process:fun_to_process_1/8',[]],['fun','wrangler','refac_fun_to_process:fun_to_process_1_eclipse/6',[]],['fun','wrangler','refac_fun_to_process:fun_to_process_eclipse/6',[]],['fun','wrangler','refac_gen:gen_fun_1/12',[]],['fun','wrangler','refac_gen:gen_fun_1_eclipse/11',[]],['fun','wrangler','refac_gen:gen_fun_clause/11',[]],['fun','wrangler','refac_gen:gen_fun_clause_eclipse/10',[]],['fun','wrangler','refac_gen:generalise/7',[]],['fun','wrangler','refac_gen:generalise_eclipse/6',[]],['fun','wrangler','refac_inc_sim_code:inc_sim_code_detection/6',[]],['fun','wrangler','refac_inc_sim_code:inc_sim_code_detection/8',[]],['fun','wrangler','refac_inc_sim_code:inc_sim_code_detection_command/8',[]],['fun','wrangler','refac_inc_sim_code:inc_sim_code_detection_eclipse/8',[]],['fun','wrangler','refac_inc_sim_code:inc_sim_code_detection_in_buffer/8',[]],['fun','wrangler','refac_inline_var:inline_var/6',[]],['fun','wrangler','refac_inline_var:inline_var_1/8',[]],['fun','wrangler','refac_inline_var:inline_var_eclipse/5',[]],['fun','wrangler','refac_inline_var:inline_var_eclipse_1/6',[]],['fun','wrangler','refac_intro_new_var:do_intro_new_var_in_fun/3',[]],['fun','wrangler','refac_intro_new_var:intro_new_var/7',[]],['fun','wrangler','refac_intro_new_var:intro_new_var_eclipse/6',[]],['fun','wrangler','refac_move_fun:analyze_file/1',[]],['fun','wrangler','refac_move_fun:move_fun/1',[]],['fun','wrangler','refac_move_fun:move_fun_1/1',[]],['fun','wrangler','refac_move_fun:move_fun_1_eclipse/1',[]],['fun','wrangler','refac_move_fun:move_fun_by_name/1',[]],['fun','wrangler','refac_move_fun:move_fun_eclipse/1',[]],['fun','wrangler','refac_new_fun:fun_extraction/6',[]],['fun','wrangler','refac_new_fun:fun_extraction_1/6',[]],['fun','wrangler','refac_new_fun:fun_extraction_1_eclipse/5',[]],['fun','wrangler','refac_new_fun:fun_extraction_eclipse/5',[]],['fun','wrangler','refac_new_let:merge_forall/4',[]],['fun','wrangler','refac_new_let:merge_forall_1/6',[]],['fun','wrangler','refac_new_let:merge_forall_1_eclipse/4',[]],['fun','wrangler','refac_new_let:merge_forall_eclipse/3',[]],['fun','wrangler','refac_new_let:merge_let/4',[]],['fun','wrangler','refac_new_let:merge_let_1/6',[]],['fun','wrangler','refac_new_let:merge_let_1_eclipse/4',[]],['fun','wrangler','refac_new_let:merge_let_eclipse/3',[]],['fun','wrangler','refac_new_let:new_let/7',[]],['fun','wrangler','refac_new_let:new_let_1/1',[]],['fun','wrangler','refac_new_let:new_let_1_eclipse/6',[]],['fun','wrangler','refac_new_let:new_let_eclipse/6',[]],['fun','wrangler','refac_new_macro:new_macro/7',[]],['fun','wrangler','refac_new_macro:new_macro_eclipse/6',[]],['fun','wrangler','refac_new_macro:replace_expr_with_macro/3',[]],['fun','wrangler','refac_qc_gen:test_cases_to_property/5',[]],['fun','wrangler','refac_qc_gen:test_cases_to_property_eclipse/5',[]],['fun','wrangler','refac_regexp_to_re:meta_rule_set/0',[]],['fun','wrangler','refac_regexp_to_re:old_apis/0',[]],['fun','wrangler','refac_regexp_to_re:simple_rule_set/0',[]],['fun','wrangler','refac_register_pid:register_pid/7',[]],['fun','wrangler','refac_register_pid:register_pid_1/10',[]],['fun','wrangler','refac_register_pid:register_pid_2/9',[]],['fun','wrangler','refac_register_pid:register_pid_eclipse/6',[]],['fun','wrangler','refac_rename_fun:get_fun_name/5',[]],['fun','wrangler','refac_rename_fun:rename_fun/7',[]],['fun','wrangler','refac_rename_fun:rename_fun_1/6',[]],['fun','wrangler','refac_rename_fun:rename_fun_1/7',[]],['fun','wrangler','refac_rename_fun:rename_fun_1_eclipse/6',[]],['fun','wrangler','refac_rename_fun:rename_fun_by_name/6',[]],['fun','wrangler','refac_rename_fun:rename_fun_by_name/7',[]],['fun','wrangler','refac_rename_fun:rename_fun_eclipse/6',[]],['fun','wrangler','refac_rename_mod:rename_mod/5',[]],['fun','wrangler','refac_rename_mod:rename_mod_1/6',[]],['fun','wrangler','refac_rename_mod:rename_mod_1_eclipse/5',[]],['fun','wrangler','refac_rename_mod:rename_mod_command/3',[]],['fun','wrangler','refac_rename_mod:rename_mod_eclipse/4',[]],['fun','wrangler','refac_rename_process:rename_process/7',[]],['fun','wrangler','refac_rename_process:rename_process_1/7',[]],['fun','wrangler','refac_rename_process:rename_process_1_eclipse/5',[]],['fun','wrangler','refac_rename_process:rename_process_eclipse/6',[]],['fun','wrangler','refac_rename_var:cond_check/4',[]],['fun','wrangler','refac_rename_var:get_var_name/5',[]],['fun','wrangler','refac_rename_var:rename/3',[]],['fun','wrangler','refac_rename_var:rename_var/1',[]],['fun','wrangler','refac_rename_var:rename_var/7',[]],['fun','wrangler','refac_rename_var:rename_var_composite/7',[]],['fun','wrangler','refac_rename_var:rename_var_eclipse/1',[]],['fun','wrangler','refac_s_group:meta_rule_set/0',[]],['fun','wrangler','refac_s_group:old_apis/0',[]],['fun','wrangler','refac_s_group:simple_rule_set/0',[]],['fun','wrangler','refac_sim_code:sim_code_detection/6',[]],['fun','wrangler','refac_sim_code:sim_code_detection_eclipse/6',[]],['fun','wrangler','refac_sim_code:sim_code_detection_in_buffer/6',[]],['fun','wrangler','refac_sim_expr_search:normalise_record_expr/6',[]],['fun','wrangler','refac_sim_expr_search:normalise_record_expr_eclipse/5',[]],['fun','wrangler','refac_sim_expr_search:sim_expr_search_in_buffer/6','Search for expressions that are similar to an ex'],['fun','wrangler','refac_sim_expr_search:sim_expr_search_in_buffer_eclipse/6',[]],['fun','wrangler','refac_sim_expr_search:sim_expr_search_in_dirs/6',[]],['fun','wrangler','refac_sim_expr_search:sim_expr_search_in_dirs_eclipse/6',[]],['fun','wrangler','refac_tuple:tuple_args/7',[]],['fun','wrangler','refac_tuple:tuple_funpar/6',[]],['fun','wrangler','refac_tuple:tuple_funpar/7',[]],['fun','wrangler','refac_tuple:tuple_funpar_1/6',[]],['fun','wrangler','refac_tuple:tuple_funpar_1_eclipse/1',[]],['fun','wrangler','refac_tuple:tuple_funpar_eclipse/1',[]],['fun','wrangler','refac_unfold_fun_app:unfold_fun_app/5',[]],['fun','wrangler','refac_unfold_fun_app:unfold_fun_app_eclipse/4',[]],['fun','wrangler','regexp_re:first_match/2',[]],['fun','wrangler','regexp_re:gsub/3',[]],['fun','wrangler','regexp_re:match/2',[]],['fun','wrangler','regexp_re:matches/2',[]],['fun','wrangler','regexp_re:old_api_module_name/0',[]],['fun','wrangler','regexp_re:parse/1',[]],['fun','wrangler','regexp_re:split/2',[]],['fun','wrangler','regexp_re:sub/3',[]],['fun','wrangler','wrangler:start/2',[]],['fun','wrangler','wrangler:stop/1',[]],['fun','wrangler','wrangler_add_new_refac:add/6',[]],['fun','wrangler','wrangler_add_new_refac:remove/6',[]],['fun','wrangler','wrangler_annotate_ast:add_fun_def_info/4',[]],['fun','wrangler','wrangler_annotate_ast:add_fun_define_locations/2',[]],['fun','wrangler','wrangler_annotate_pid:ann_pid_info/2',[]],['fun','wrangler','wrangler_anti_unification:anti_unification/2',[]],['fun','wrangler','wrangler_anti_unification:anti_unification_with_score/3',[]],['fun','wrangler','wrangler_anti_unification:generate_anti_unifier/3',[]],['fun','wrangler','wrangler_anti_unification:generate_anti_unifier_and_num_of_new_vars/3',[]],['fun','wrangler','wrangler_anti_unification:subst_sanity_check/2',[]],['fun','wrangler','wrangler_ast_server:add_range/2',[]],['fun','wrangler','wrangler_ast_server:code_change/3',[]],['fun','wrangler','wrangler_ast_server:handle_call/3',[]],['fun','wrangler','wrangler_ast_server:handle_cast/2',[]],['fun','wrangler','wrangler_ast_server:handle_info/2',[]],['fun','wrangler','wrangler_ast_server:init/1',[]],['fun','wrangler','wrangler_ast_server:mfa_to_fun_def/1',[]],['fun','wrangler','wrangler_ast_server:parse_annotate_file/1',[]],['fun','wrangler','wrangler_ast_server:parse_annotate_file/1',[]],['fun','wrangler','wrangler_ast_server:parse_annotate_file/1',[]],['fun','wrangler','wrangler_ast_server:parse_annotate_file/1','Parse an Erlang file, and annotate the abstract sy'],['fun','wrangler','wrangler_ast_server:quick_parse_annotate_file/3',[]],['fun','wrangler','wrangler_ast_server:start_ast_server/0',[]],['fun','wrangler','wrangler_ast_server:terminate/2',[]],['fun','wrangler','wrangler_ast_server:update_ast/2',[]],['fun','wrangler','wrangler_atom_annotation:type_ann_ast/5',[]],['fun','wrangler','wrangler_atom_utils:check_unsure_atoms/5',[]],['fun','wrangler','wrangler_atom_utils:collect_unsure_atoms_in_file/3',[]],['fun','wrangler','wrangler_atom_utils:has_warning_msg/1',[]],['fun','wrangler','wrangler_atom_utils:output_atom_warning_msg/3',[]],['fun','wrangler','wrangler_atom_utils:start_atom_process/0',[]],['fun','wrangler','wrangler_atom_utils:stop_atom_process/1',[]],['fun','wrangler','wrangler_backup_server:add_atomic_cr_start_point/1',[]],['fun','wrangler','wrangler_backup_server:add_to_backups/1',[]],['fun','wrangler','wrangler_backup_server:code_change/3',[]],['fun','wrangler','wrangler_backup_server:handle_call/3',[]],['fun','wrangler','wrangler_backup_server:handle_cast/2',[]],['fun','wrangler','wrangler_backup_server:handle_info/2',[]],['fun','wrangler','wrangler_backup_server:init/1',[]],['fun','wrangler','wrangler_backup_server:recover_backups/0',[]],['fun','wrangler','wrangler_backup_server:reset_backups/0',[]],['fun','wrangler','wrangler_backup_server:rollback_atomic_cr/1',[]],['fun','wrangler','wrangler_backup_server:start_backup_server/0',[]],['fun','wrangler','wrangler_backup_server:terminate/2',[]],['fun','wrangler','wrangler_callgraph:construct/1',[]],['fun','wrangler','wrangler_callgraph_server:build_callercallee_callgraph/1',[]],['fun','wrangler','wrangler_callgraph_server:build_scc_callgraph/1',[]],['fun','wrangler','wrangler_callgraph_server:called_funs/1',[]],['fun','wrangler','wrangler_callgraph_server:code_change/3',[]],['fun','wrangler','wrangler_callgraph_server:fun_callgraph_to_dot/1',[]],['fun','wrangler','wrangler_callgraph_server:fun_callgraph_to_dot/2',[]],['fun','wrangler','wrangler_callgraph_server:fun_callgraph_to_png/1',[]],['fun','wrangler','wrangler_callgraph_server:gen_digraph_callgraph/1',[]],['fun','wrangler','wrangler_callgraph_server:get_callgraph/1',[]],['fun','wrangler','wrangler_callgraph_server:get_sccs_including_fun/2',[]],['fun','wrangler','wrangler_callgraph_server:get_sccs_including_mod/2',[]],['fun','wrangler','wrangler_callgraph_server:get_sorted_funs/1',[]],['fun','wrangler','wrangler_callgraph_server:get_sorted_funs/2',[]],['fun','wrangler','wrangler_callgraph_server:handle_call/3',[]],['fun','wrangler','wrangler_callgraph_server:handle_cast/2',[]],['fun','wrangler','wrangler_callgraph_server:handle_info/2',[]],['fun','wrangler','wrangler_callgraph_server:init/1',[]],['fun','wrangler','wrangler_callgraph_server:start_callgraph_server/0',[]],['fun','wrangler','wrangler_callgraph_server:terminate/2',[]],['fun','wrangler','wrangler_cmd_server:atomic_refac_loop/2',[]],['fun','wrangler','wrangler_cmd_server:code_change/3',[]],['fun','wrangler','wrangler_cmd_server:elementary_refac_loop/2',[]],['fun','wrangler','wrangler_cmd_server:get_next_command/1',[]],['fun','wrangler','wrangler_cmd_server:handle_call/3',[]],['fun','wrangler','wrangler_cmd_server:handle_cast/2',[]],['fun','wrangler','wrangler_cmd_server:handle_info/2',[]],['fun','wrangler','wrangler_cmd_server:if_then_refac_loop/2',[]],['fun','wrangler','wrangler_cmd_server:init/1',[]],['fun','wrangler','wrangler_cmd_server:interactive_refac_loop/2',[]],['fun','wrangler','wrangler_cmd_server:non_atomic_refac_loop/2',[]],['fun','wrangler','wrangler_cmd_server:repeat_interactive_refac_loop/2',[]],['fun','wrangler','wrangler_cmd_server:start_link/1',[]],['fun','wrangler','wrangler_cmd_server:stop/0',[]],['fun','wrangler','wrangler_cmd_server:terminate/2',[]],['fun','wrangler','wrangler_cmd_server:update_entity/1',[]],['fun','wrangler','wrangler_cmd_server:while_refac_loop/2',[]],['fun','wrangler','wrangler_code_inspector_lib:calls_to_fun/5',[]],['fun','wrangler','wrangler_code_inspector_lib:calls_to_fun_1/5',[]],['fun','wrangler','wrangler_code_inspector_lib:calls_to_specific_function/2',[]],['fun','wrangler','wrangler_code_inspector_lib:calls_to_specific_functions/2',[]],['fun','wrangler','wrangler_code_inspector_lib:dependencies_of_a_module/2',[]],['fun','wrangler','wrangler_code_inspector_lib:find_var_instances/5',[]],['fun','wrangler','wrangler_code_inspector_lib:large_modules/3',[]],['fun','wrangler','wrangler_code_inspector_lib:long_functions/4',[]],['fun','wrangler','wrangler_code_inspector_lib:nested_exprs/5',[]],['fun','wrangler','wrangler_code_inspector_lib:nested_exprs_1/5',[]],['fun','wrangler','wrangler_code_inspector_lib:non_tail_recursive_servers/3',[]],['fun','wrangler','wrangler_code_inspector_lib:not_flush_unknown_messages/3',[]],['fun','wrangler','wrangler_code_inspector_lib:not_flush_unknown_messages_1/3',[]],['fun','wrangler','wrangler_code_search_utils:add_new_export_var/2',[]],['fun','wrangler','wrangler_code_search_utils:display_a_clone/2',[]],['fun','wrangler','wrangler_code_search_utils:display_clone_result/2',[]],['fun','wrangler','wrangler_code_search_utils:display_search_results/3',[]],['fun','wrangler','wrangler_code_search_utils:gen_new_var_name/1',[]],['fun','wrangler','wrangler_code_search_utils:generalisable/1',[]],['fun','wrangler','wrangler_code_search_utils:get_new_export_vars/1',[]],['fun','wrangler','wrangler_code_search_utils:identifier_name/1',[]],['fun','wrangler','wrangler_code_search_utils:remove_sub_clones/1',[]],['fun','wrangler','wrangler_code_search_utils:start_counter_process/0',[]],['fun','wrangler','wrangler_code_search_utils:start_counter_process/1',[]],['fun','wrangler','wrangler_code_search_utils:stop_counter_process/1',[]],['fun','wrangler','wrangler_code_search_utils:var_binding_structure/1',[]],['fun','wrangler','wrangler_comment_scan:file/1','Extracts comments from an Erlang source code file.'],['fun','wrangler','wrangler_comment_scan:file/2',[]],['fun','wrangler','wrangler_comment_scan:join_lines/1','Joins individual comment lines into multi-line com'],['fun','wrangler','wrangler_comment_scan:scan_lines/1','Extracts individual comment lines from a source co'],['fun','wrangler','wrangler_comment_scan:string/1','Extracts comments from a string containing Erlang '],['fun','wrangler','wrangler_epp:expand_macros/2',[]],['fun','wrangler','wrangler_epp:interpret_file_attribute/1',[]],['fun','wrangler','wrangler_epp:parse_file/3',[]],['fun','wrangler','wrangler_epp:parse_file/5',[]],['fun','wrangler','wrangler_epp_dodger:fix_pos_in_form/2',[]],['fun','wrangler','wrangler_epp_dodger:normal_parser/2',[]],['fun','wrangler','wrangler_epp_dodger:parse_file/2','Reads and parses a file.'],['fun','wrangler','wrangler_epp_dodger:parse_tokens/1',[]],['fun','wrangler','wrangler_epp_dodger:rewrite_list/1',[]],['fun','wrangler','wrangler_epp_dodger:scan_form/2',[]],['fun','wrangler','wrangler_epp_dodger:scan_macros/2',[]],['fun','wrangler','wrangler_error_logger:add_to_logger/1',[]],['fun','wrangler','wrangler_error_logger:code_change/3',[]],['fun','wrangler','wrangler_error_logger:get_logged_info/0',[]],['fun','wrangler','wrangler_error_logger:handle_call/3',[]],['fun','wrangler','wrangler_error_logger:handle_cast/2',[]],['fun','wrangler','wrangler_error_logger:handle_info/2',[]],['fun','wrangler','wrangler_error_logger:init/1',[]],['fun','wrangler','wrangler_error_logger:remove_all_from_logger/0',[]],['fun','wrangler','wrangler_error_logger:remove_from_logger/1',[]],['fun','wrangler','wrangler_error_logger:start_wrangler_error_logger/0',[]],['fun','wrangler','wrangler_error_logger:terminate/2',[]],['fun','wrangler','wrangler_expand_rule:parse_transform/2',[]],['fun','wrangler','wrangler_gen:add_to_export/1','Command generator for adding function names to the'],['fun','wrangler','wrangler_gen:fold_expr/1','Command generator for folding expressions against '],['fun','wrangler','wrangler_gen:gen_fun/1','Command generator for function generalisation.'],['fun','wrangler','wrangler_gen:move_fun/1','Command generator for moving functions from one mo'],['fun','wrangler','wrangler_gen:rename_fun/1','Command generator for renaming function names.'],['fun','wrangler','wrangler_gen:rename_mod/1','Command generator for renaming module names.'],['fun','wrangler','wrangler_gen:rename_var/1','Command generator for renaming variable names.'],['fun','wrangler','wrangler_gen:swap_args/1','Command generator for for swapping function argume'],['fun','wrangler','wrangler_gen:tuple_args/1','Command generator for tupling function arguments.'],['fun','wrangler','wrangler_gen:unfold_fun_app/1','Command generator for unfolding a function applica'],['fun','wrangler','wrangler_gen_refac_server:add_change_cand/2',[]],['fun','wrangler','wrangler_gen_refac_server:code_change/3',[]],['fun','wrangler','wrangler_gen_refac_server:delete_change_set/1',[]],['fun','wrangler','wrangler_gen_refac_server:delete_flag/1',[]],['fun','wrangler','wrangler_gen_refac_server:get_change_set/1',[]],['fun','wrangler','wrangler_gen_refac_server:get_flag/1',[]],['fun','wrangler','wrangler_gen_refac_server:handle_call/3',[]],['fun','wrangler','wrangler_gen_refac_server:handle_cast/2',[]],['fun','wrangler','wrangler_gen_refac_server:handle_info/2',[]],['fun','wrangler','wrangler_gen_refac_server:init/1',[]],['fun','wrangler','wrangler_gen_refac_server:set_flag/1',[]],['fun','wrangler','wrangler_gen_refac_server:start_gen_refac_server/0',[]],['fun','wrangler','wrangler_gen_refac_server:terminate/2',[]],['fun','wrangler','wrangler_generalised_unification:expr_match/1',[]],['fun','wrangler','wrangler_generalised_unification:expr_match/2',[]],['fun','wrangler','wrangler_generalised_unification:extended_expr_match/3',[]],['fun','wrangler','wrangler_io:format/1',[]],['fun','wrangler','wrangler_io:format/2',[]],['fun','wrangler','wrangler_io:format/3',[]],['fun','wrangler','wrangler_io:scan_erl_form/5',[]],['fun','wrangler','wrangler_misc:apply_style_funs/0',[]],['fun','wrangler','wrangler_misc:bound_vars/1','Returns all the variables, including both variable'],['fun','wrangler','wrangler_misc:callback_funs/1','Pre-defined callback functions by the standard Erl'],['fun','wrangler','wrangler_misc:collect_used_macros/1',[]],['fun','wrangler','wrangler_misc:collect_used_records/1',[]],['fun','wrangler','wrangler_misc:collect_var_names/1',[]],['fun','wrangler','wrangler_misc:collect_var_source_def_pos_info/1',[]],['fun','wrangler','wrangler_misc:commontest_callback_funs/0',[]],['fun','wrangler','wrangler_misc:concat_toks/1',[]],['fun','wrangler','wrangler_misc:default_incls/0',[]],['fun','wrangler','wrangler_misc:delete_from_ann/2',[]],['fun','wrangler','wrangler_misc:eqc_fsm_callback_funs/0',[]],['fun','wrangler','wrangler_misc:eqc_statem_callback_funs/0',[]],['fun','wrangler','wrangler_misc:expand_files/2','Recursively collect all the files with the given f'],['fun','wrangler','wrangler_misc:exported_vars/1','Returns all the variables, including both variable'],['fun','wrangler','wrangler_misc:file_format/1',[]],['fun','wrangler','wrangler_misc:filehash/1',[]],['fun','wrangler','wrangler_misc:format_search_paths/1',[]],['fun','wrangler','wrangler_misc:free_vars/1','Returns all the variables, including both variable'],['fun','wrangler','wrangler_misc:funname_to_defpos/2',[]],['fun','wrangler','wrangler_misc:get_modules_by_file/1','The a list of files to a list of two-element tuple'],['fun','wrangler','wrangler_misc:get_start_end_loc_with_comment/1',[]],['fun','wrangler','wrangler_misc:get_toks/1','Return the token list annoated to a form if there '],['fun','wrangler','wrangler_misc:ghead/2','Same as erlang:hd/1, except the first argument whi'],['fun','wrangler','wrangler_misc:glast/2','Same as lists:last(L), except the first argument w'],['fun','wrangler','wrangler_misc:group_by/2',[]],['fun','wrangler','wrangler_misc:is_callback_fun/3',[]],['fun','wrangler','wrangler_misc:is_fun_name/1','Returns true if a string is lexically a legal func'],['fun','wrangler','wrangler_misc:is_literal/1',[]],['fun','wrangler','wrangler_misc:is_macro_name/1',[]],['fun','wrangler','wrangler_misc:is_spawn_app/1',[]],['fun','wrangler','wrangler_misc:is_var_name/1','Returns true if a string is lexically a legal vari'],['fun','wrangler','wrangler_misc:max/2',[]],['fun','wrangler','wrangler_misc:min/2',[]],['fun','wrangler','wrangler_misc:modname_to_filename/2',[]],['fun','wrangler','wrangler_misc:remove_duplicates/1',[]],['fun','wrangler','wrangler_misc:reset_ann/1',[]],['fun','wrangler','wrangler_misc:reset_ann_and_pos/1',[]],['fun','wrangler','wrangler_misc:reset_attrs/1','Reset all the annotations in the subtree to the de'],['fun','wrangler','wrangler_misc:reset_pos/1',[]],['fun','wrangler','wrangler_misc:reset_pos_and_range/1',[]],['fun','wrangler','wrangler_misc:rewrite/2',[]],['fun','wrangler','wrangler_misc:rewrite_with_wrapper/2',[]],['fun','wrangler','wrangler_misc:spawn_funs/0',[]],['fun','wrangler','wrangler_misc:start_end_loc/1','Returns the start and end locations of an AST node'],['fun','wrangler','wrangler_misc:test_framework_used/1',[]],['fun','wrangler','wrangler_misc:testserver_callback_funs/0',[]],['fun','wrangler','wrangler_misc:to_lower/1','Convert a string into lower case.'],['fun','wrangler','wrangler_misc:to_upper/1','Convert a string into upper case.'],['fun','wrangler','wrangler_misc:tokenize/1',[]],['fun','wrangler','wrangler_misc:try_eval/4',[]],['fun','wrangler','wrangler_misc:update_ann/1','Update a specific annotation of the Node with the '],['fun','wrangler','wrangler_modularity_inspection:component_extraction_suggestion/1',[]],['fun','wrangler','wrangler_modularity_inspection:cyclic_dependent_modules/3',[]],['fun','wrangler','wrangler_modularity_inspection:gen_function_callgraph/3',[]],['fun','wrangler','wrangler_modularity_inspection:gen_module_graph/4',[]],['fun','wrangler','wrangler_modularity_inspection:improper_inter_module_calls/2',[]],['fun','wrangler','wrangler_modularity_inspection:modules_with_big_fanin/4',[]],['fun','wrangler','wrangler_modularity_inspection:modules_with_big_fanout/4',[]],['fun','wrangler','wrangler_modularity_inspection:partition_exports/5',[]],['fun','wrangler','wrangler_modularity_inspection:partition_exports_eclipse/4',[]],['fun','wrangler','wrangler_module_graph:add_edges/3',[]],['fun','wrangler','wrangler_module_graph:get_called_mods/2',[]],['fun','wrangler','wrangler_module_graph:module_callergraph_to_dot/4',[]],['fun','wrangler','wrangler_module_graph:module_graph/1',[]],['fun','wrangler','wrangler_module_graph:module_graph_to_dot/3',[]],['fun','wrangler','wrangler_module_graph:module_graph_to_dot/4',[]],['fun','wrangler','wrangler_module_graph:module_graph_with_funs/1',[]],['fun','wrangler','wrangler_module_graph:module_sccs_to_dot/4',[]],['fun','wrangler','wrangler_module_graph:module_subgraph_to_dot/4',[]],['fun','wrangler','wrangler_modulegraph_server:code_change/3',[]],['fun','wrangler','wrangler_modulegraph_server:get_called_modules/2',[]],['fun','wrangler','wrangler_modulegraph_server:get_client_files/2','Return the list of files (Erlang modules) which ma'],['fun','wrangler','wrangler_modulegraph_server:get_client_files_basic/2',[]],['fun','wrangler','wrangler_modulegraph_server:handle_call/3',[]],['fun','wrangler','wrangler_modulegraph_server:handle_cast/2',[]],['fun','wrangler','wrangler_modulegraph_server:handle_info/2',[]],['fun','wrangler','wrangler_modulegraph_server:init/1',[]],['fun','wrangler','wrangler_modulegraph_server:start_modulegraph_server/0',[]],['fun','wrangler','wrangler_modulegraph_server:terminate/2',[]],['fun','wrangler','wrangler_prettypr:calc_levenshtein_dist/3',[]],['fun','wrangler','wrangler_prettypr:format/1','Equivalent to format(Tree, []).'],['fun','wrangler','wrangler_prettypr:has_parentheses/2',[]],['fun','wrangler','wrangler_prettypr:levenshtein_dist/3',[]],['fun','wrangler','wrangler_prettypr:pp_a_form/4',[]],['fun','wrangler','wrangler_prettypr:print_ast/2',[]],['fun','wrangler','wrangler_prettypr:print_ast/3',[]],['fun','wrangler','wrangler_prettypr:print_ast_and_get_changes/3',[]],['fun','wrangler','wrangler_prettypr_0:above/1','Concatenates documents vertically.'],['fun','wrangler','wrangler_prettypr_0:beside/1','Concatenates documents horizontally.'],['fun','wrangler','wrangler_prettypr_0:best/1','Selects a "best" layout for a document, creating a'],['fun','wrangler','wrangler_prettypr_0:break/1','Forces a line break at the end of the given docume'],['fun','wrangler','wrangler_prettypr_0:empty/0','Yields the empty document, which has neither heigh'],['fun','wrangler','wrangler_prettypr_0:floating/1','Creates a "floating" document.'],['fun','wrangler','wrangler_prettypr_0:floating/1','Equivalent to floating(D, 0, 0).'],['fun','wrangler','wrangler_prettypr_0:follow/1','Separates two documents by either a single space, '],['fun','wrangler','wrangler_prettypr_0:follow/1','Equivalent to follow(D1, D2, 0).'],['fun','wrangler','wrangler_prettypr_0:format/1','Computes a layout for a document and returns the c'],['fun','wrangler','wrangler_prettypr_0:format/1','Equivalent to format(D, PaperWidth, 65).'],['fun','wrangler','wrangler_prettypr_0:format/1','Equivalent to format(D, 80).'],['fun','wrangler','wrangler_prettypr_0:horizontal/1',[]],['fun','wrangler','wrangler_prettypr_0:layout/2',[]],['fun','wrangler','wrangler_prettypr_0:layout/3',[]],['fun','wrangler','wrangler_prettypr_0:nest/1','Indents a document a number of character positions'],['fun','wrangler','wrangler_prettypr_0:null_text/1','Similar to text/1, but the result is treated as ha'],['fun','wrangler','wrangler_prettypr_0:par/1','Arranges documents in a paragraph-like layout.'],['fun','wrangler','wrangler_prettypr_0:par/1','Equivalent to par(Ds, 0).'],['fun','wrangler','wrangler_prettypr_0:sep/1','Arranges documents horizontally or vertically, sep'],['fun','wrangler','wrangler_prettypr_0:text/1','Yields a document representing a fixed, unbreakabl'],['fun','wrangler','wrangler_prettypr_0:text/2',[]],['fun','wrangler','wrangler_prettypr_0:text_par/1','Yields a document representing paragraph-formatted'],['fun','wrangler','wrangler_prettypr_0:text_par/1','Equivalent to text_par(Text, 0).'],['fun','wrangler','wrangler_prettypr_0:text_par/3',[]],['fun','wrangler','wrangler_preview_server:abort/0',[]],['fun','wrangler','wrangler_preview_server:add_files/1',[]],['fun','wrangler','wrangler_preview_server:code_change/3',[]],['fun','wrangler','wrangler_preview_server:commit/0',[]],['fun','wrangler','wrangler_preview_server:handle_call/3',[]],['fun','wrangler','wrangler_preview_server:handle_cast/2',[]],['fun','wrangler','wrangler_preview_server:handle_info/2',[]],['fun','wrangler','wrangler_preview_server:init/1',[]],['fun','wrangler','wrangler_preview_server:start_preview_server/0',[]],['fun','wrangler','wrangler_preview_server:terminate/2',[]],['fun','wrangler','wrangler_recomment:build_tree/1',[]],['fun','wrangler','wrangler_recomment:quick_recomment_forms/2','Like recomment_forms/2, but only inserts top-level'],['fun','wrangler','wrangler_recomment:recomment_forms/2','Attaches comments to the syntax tree/trees represe'],['fun','wrangler','wrangler_recomment:recomment_tree/1','Attaches comments to a syntax tree.'],['fun','wrangler','wrangler_refacs:add_a_tag/1','Add a tag to all the messages received by a server'],['fun','wrangler','wrangler_refacs:apply_changes_eclipse/1','gen_refac refactorings - delegate functions in ord'],['fun','wrangler','wrangler_refacs:eqc_fsm_to_record/1','Turn a non-record representation of eqc_fsm state '],['fun','wrangler','wrangler_refacs:eqc_statem_to_record/1','Turn a non-record representation of eqc_statem sta'],['fun','wrangler','wrangler_refacs:fold_against_macro/1','Fold expressions/patterns against a macro definiti'],['fun','wrangler','wrangler_refacs:fold_expr/1','Fold expressions against a function definition.'],['fun','wrangler','wrangler_refacs:fun_extraction/1','Introduce a new function to represent an expressio'],['fun','wrangler','wrangler_refacs:fun_to_process/1','Turn a function into a server process (Beta).'],['fun','wrangler','wrangler_refacs:gen_fsm_to_record/1','Turn a non-record representation of gen_fsm state '],['fun','wrangler','wrangler_refacs:generalise/1',' Generalise a function definition.'],['fun','wrangler','wrangler_refacs:get_user_refactorings/1','get all user refactoring modules (gen_refac and ge'],['fun','wrangler','wrangler_refacs:inline_var/1','Inline a variable definition.'],['fun','wrangler','wrangler_refacs:intro_new_var/1','Introduce a new variable to represent an expressio'],['fun','wrangler','wrangler_refacs:merge_forall/2','Merge nested but undependent ?FORALLs into one ?FO'],['fun','wrangler','wrangler_refacs:merge_let/2','Merge nested but independent ?LETs into one ?LET.'],['fun','wrangler','wrangler_refacs:move_fun/1','Move a function definition from its current module'],['fun','wrangler','wrangler_refacs:new_let/1','Introduce ?LET.'],['fun','wrangler','wrangler_refacs:new_macro/1','Introduce a macro to represent a syntactically wel'],['fun','wrangler','wrangler_refacs:normalise_record_expr/1','Reorder the record fields in a record expression t'],['fun','wrangler','wrangler_refacs:partition_exports/1','Partition the exports of a module.'],['fun','wrangler','wrangler_refacs:register_pid/1','Register a process (Beta).'],['fun','wrangler','wrangler_refacs:rename_fun/6','Rename a function.'],['fun','wrangler','wrangler_refacs:rename_mod/1','Rename a module.'],['fun','wrangler','wrangler_refacs:rename_process/1','Rename a registered process (Beta).'],['fun','wrangler','wrangler_refacs:rename_var/1','Rename a variable.'],['fun','wrangler','wrangler_refacs:similar_code_detection/1','A similar code detector that searches for similar '],['fun','wrangler','wrangler_refacs:similar_code_detection_in_buffer/1','A similar code detector that searches for similar '],['fun','wrangler','wrangler_refacs:similar_expression_search_in_buffer/1','Search expression search in the current Erlang buf'],['fun','wrangler','wrangler_refacs:similar_expression_search_in_dirs/1','Simiar expression search across multiple Erlang mo'],['fun','wrangler','wrangler_refacs:tuple_funpar/1','Group a consecutive sequence of parameters of a fu'],['fun','wrangler','wrangler_refacs:unfold_fun_app/1','Unfold a function application to an instance of th'],['fun','wrangler','wrangler_scan:format_error/1',[]],['fun','wrangler','wrangler_scan:reserved_word/1',[]],['fun','wrangler','wrangler_scan:string/1',[]],['fun','wrangler','wrangler_scan:string/2',[]],['fun','wrangler','wrangler_scan:string/4',[]],['fun','wrangler','wrangler_scan:tokens/3',[]],['fun','wrangler','wrangler_scan_with_layout:string/1',[]],['fun','wrangler','wrangler_scan_with_layout:string/2',[]],['fun','wrangler','wrangler_scan_with_layout:string/3',[]],['fun','wrangler','wrangler_scan_with_layout:string/4',[]],['fun','wrangler','wrangler_side_effect:build_lib_side_effect_tab/1','Build the side effect table for Erlang libraries s'],['fun','wrangler','wrangler_side_effect:build_local_side_effect_tab/1','Build a local side effect table for File and the f'],['fun','wrangler','wrangler_side_effect:has_side_effect/1','Return true if the abstract syntax tree represente'],['fun','wrangler','wrangler_side_effect:has_side_effect/1',[]],['fun','wrangler','wrangler_slice:backward_slice/1','Backward slice the program with expression Expr, w'],['fun','wrangler','wrangler_slice:forward_slice/1','Forward slice the program with expression Expr, wh'],['fun','wrangler','wrangler_slice_new:backward_intra_fun_slice/1',[]],['fun','wrangler','wrangler_slice_new:backward_slice/2',[]],['fun','wrangler','wrangler_suffix_tree:get_clones_by_suffix_tree/7',[]],['fun','wrangler','wrangler_suffix_tree:get_clones_by_suffix_tree_inc/6',[]],['fun','wrangler','wrangler_suffix_tree:init/1',[]],['fun','wrangler','wrangler_sup:init/1',[]],['fun','wrangler','wrangler_sup:start/0',[]],['fun','wrangler','wrangler_syntax:abstract/1','Returns the syntax tree corresponding to an Erlang'],['fun','wrangler','wrangler_syntax:add_ann/1','Appends the term Annotation to the list of user  '],['fun','wrangler','wrangler_syntax:add_postcomments/1','Appends Comments to the post-comments of  Node.'],['fun','wrangler','wrangler_syntax:add_precomments/1','Appends Comments to the pre-comments of  Node.'],['fun','wrangler','wrangler_syntax:application/1','Creates an abstract function application expressio'],['fun','wrangler','wrangler_syntax:application/2','Creates an abstract function application expressio'],['fun','wrangler','wrangler_syntax:application_arguments/1','Returns the list of argument subtrees of an  appl'],['fun','wrangler','wrangler_syntax:application_operator/1','Returns the operator subtree of an application  n'],['fun','wrangler','wrangler_syntax:arity_qualifier/1','Creates an abstract arity qualifier.'],['fun','wrangler','wrangler_syntax:arity_qualifier_argument/1','Returns the argument (the arity) subtree of an  a'],['fun','wrangler','wrangler_syntax:arity_qualifier_body/1','Returns the body subtree of an arity_qualifier  n'],['fun','wrangler','wrangler_syntax:atom/1','Creates an abstract atom literal.'],['fun','wrangler','wrangler_syntax:atom_literal/1','Returns the literal string represented by an atom '],['fun','wrangler','wrangler_syntax:atom_name/1','Returns the printname of an atom node.'],['fun','wrangler','wrangler_syntax:atom_value/1','Returns the value represented by an atom node.'],['fun','wrangler','wrangler_syntax:attribute/1','Creates an abstract program attribute.'],['fun','wrangler','wrangler_syntax:attribute/1','Equivalent to attribute(Name, none).'],['fun','wrangler','wrangler_syntax:attribute_arguments/1','Returns the list of argument subtrees of an  attr'],['fun','wrangler','wrangler_syntax:attribute_name/1','Returns the name subtree of an attribute node.'],['fun','wrangler','wrangler_syntax:binary/1','Creates an abstract binary-object template.'],['fun','wrangler','wrangler_syntax:binary_comp/1','Creates an abstract binary comprehension.'],['fun','wrangler','wrangler_syntax:binary_comp_body/1','Returns the list of body subtrees of a binary_comp'],['fun','wrangler','wrangler_syntax:binary_comp_template/1','Returns the template subtree of a binary_comp node'],['fun','wrangler','wrangler_syntax:binary_field/1','Creates an abstract binary template field.'],['fun','wrangler','wrangler_syntax:binary_field/1','Creates an abstract binary template field.'],['fun','wrangler','wrangler_syntax:binary_field/1','Equivalent to binary_field(Body, []).'],['fun','wrangler','wrangler_syntax:binary_field_body/1','Returns the body subtree of a binary_field.'],['fun','wrangler','wrangler_syntax:binary_field_size/1','Returns the size specifier subtree of a  binary_f'],['fun','wrangler','wrangler_syntax:binary_field_types/1','Returns the list of type-specifier subtrees of a '],['fun','wrangler','wrangler_syntax:binary_fields/1','Returns the list of field subtrees of a binary  n'],['fun','wrangler','wrangler_syntax:binary_generator/1','Creates an abstract binary_generator.'],['fun','wrangler','wrangler_syntax:binary_generator_body/1','Returns the body subtree of a generator node.'],['fun','wrangler','wrangler_syntax:binary_generator_pattern/1','Returns the pattern subtree of a generator node.'],['fun','wrangler','wrangler_syntax:block_expr/1','Creates an abstract block expression.'],['fun','wrangler','wrangler_syntax:block_expr_body/1','Returns the list of body subtrees of a block_expr'],['fun','wrangler','wrangler_syntax:case_expr/1','Creates an abstract case-expression.'],['fun','wrangler','wrangler_syntax:case_expr_argument/1','Returns the argument subtree of a case_expr node.'],['fun','wrangler','wrangler_syntax:case_expr_clauses/1','Returns the list of clause subtrees of a case_expr'],['fun','wrangler','wrangler_syntax:catch_expr/1','Creates an abstract catch-expression.'],['fun','wrangler','wrangler_syntax:catch_expr_body/1','Returns the body subtree of a catch_expr node.'],['fun','wrangler','wrangler_syntax:char/1','Creates an abstract character literal.'],['fun','wrangler','wrangler_syntax:char_literal/1','Returns the literal string represented by a char '],['fun','wrangler','wrangler_syntax:char_value/1','Returns the value represented by a char node.'],['fun','wrangler','wrangler_syntax:class_qualifier/1','Creates an abstract class qualifier.'],['fun','wrangler','wrangler_syntax:class_qualifier_argument/1','Returns the argument (the class) subtree of a  cl'],['fun','wrangler','wrangler_syntax:class_qualifier_body/1','Returns the body subtree of a class_qualifier node'],['fun','wrangler','wrangler_syntax:clause/1','Creates an abstract clause.'],['fun','wrangler','wrangler_syntax:clause/2','Equivalent to clause([], Guard, Body).'],['fun','wrangler','wrangler_syntax:clause_body/1','Return the list of body subtrees of a clause  nod'],['fun','wrangler','wrangler_syntax:clause_guard/1','Returns the guard subtree of a clause node, if  a'],['fun','wrangler','wrangler_syntax:clause_patterns/1','Returns the list of pattern subtrees of a clause '],['fun','wrangler','wrangler_syntax:comment/1','Equivalent to comment(none, Strings).'],['fun','wrangler','wrangler_syntax:comment/2','Creates an abstract comment with the given padding'],['fun','wrangler','wrangler_syntax:comment_padding/1','Returns the amount of padding before the comment, '],['fun','wrangler','wrangler_syntax:comment_text/1','Returns the lines of text of the abstract comment.'],['fun','wrangler','wrangler_syntax:compact_list/1','Yields the most compact form for an abstract list '],['fun','wrangler','wrangler_syntax:concrete/1','Returns the Erlang term represented by a syntax tr'],['fun','wrangler','wrangler_syntax:cond_expr/1','Creates an abstract cond-expression.'],['fun','wrangler','wrangler_syntax:cond_expr_clauses/1','Returns the list of clause subtrees of a cond_expr'],['fun','wrangler','wrangler_syntax:conjunction/1','Creates an abstract conjunction.'],['fun','wrangler','wrangler_syntax:conjunction_body/1','Returns the list of body subtrees of a  conjuncti'],['fun','wrangler','wrangler_syntax:cons/1','"Optimising" list skeleton cons operation.'],['fun','wrangler','wrangler_syntax:copy_ann/1','Copies the list of user annotations from Source to'],['fun','wrangler','wrangler_syntax:copy_attrs/1','Copies the attributes from Source to  Target.'],['fun','wrangler','wrangler_syntax:copy_comments/1','Copies the pre- and postcomments from Source to  '],['fun','wrangler','wrangler_syntax:copy_pos/1','Copies the position information from Source to  T'],['fun','wrangler','wrangler_syntax:data/1','For special purposes only.'],['fun','wrangler','wrangler_syntax:default_literals_vars/2',[]],['fun','wrangler','wrangler_syntax:disjunction/1','Creates an abstract disjunction.'],['fun','wrangler','wrangler_syntax:disjunction_body/1','Returns the list of body subtrees of a  disjuncti'],['fun','wrangler','wrangler_syntax:empty_node/0',[]],['fun','wrangler','wrangler_syntax:eof_marker/0','Creates an abstract end-of-file marker.'],['fun','wrangler','wrangler_syntax:error_marker/1','Creates an abstract error marker.'],['fun','wrangler','wrangler_syntax:error_marker_info/1','Returns the ErrorInfo structure of an error_marker'],['fun','wrangler','wrangler_syntax:fake_parentheses/1',[]],['fun','wrangler','wrangler_syntax:fake_parentheses_body/1',[]],['fun','wrangler','wrangler_syntax:flatten_form_list/1','Flattens sublists of a form_list node.'],['fun','wrangler','wrangler_syntax:float/1','Creates an abstract floating-point literal.'],['fun','wrangler','wrangler_syntax:float_literal/1','Returns the numeral string represented by a float'],['fun','wrangler','wrangler_syntax:float_value/1','Returns the value represented by a float node.'],['fun','wrangler','wrangler_syntax:form_list/1','Creates an abstract sequence of "source code forms'],['fun','wrangler','wrangler_syntax:form_list_elements/1','Returns the list of subnodes of a form_list node.'],['fun','wrangler','wrangler_syntax:fun_expr/1','Creates an abstract fun-expression.'],['fun','wrangler','wrangler_syntax:fun_expr_arity/1','Returns the arity of a fun_expr node.'],['fun','wrangler','wrangler_syntax:fun_expr_clauses/1','Returns the list of clause subtrees of a fun_expr'],['fun','wrangler','wrangler_syntax:function/1','Creates an abstract function definition.'],['fun','wrangler','wrangler_syntax:function_arity/1','Returns the arity of a function node.'],['fun','wrangler','wrangler_syntax:function_clause/1',[]],['fun','wrangler','wrangler_syntax:function_clause/2',[]],['fun','wrangler','wrangler_syntax:function_clause_name/1',[]],['fun','wrangler','wrangler_syntax:function_clauses/1','Returns the list of clause subtrees of a function'],['fun','wrangler','wrangler_syntax:function_name/1','Returns the name subtree of a function node.'],['fun','wrangler','wrangler_syntax:generator/1','Creates an abstract generator.'],['fun','wrangler','wrangler_syntax:generator_body/1','Returns the body subtree of a generator node.'],['fun','wrangler','wrangler_syntax:generator_pattern/1','Returns the pattern subtree of a generator node.'],['fun','wrangler','wrangler_syntax:get_ann/1','Returns the list of user annotations associated wi'],['fun','wrangler','wrangler_syntax:get_attrs/1','Returns a representation of the attributes associa'],['fun','wrangler','wrangler_syntax:get_pos/1','Returns the position information associated with '],['fun','wrangler','wrangler_syntax:get_postcomments/1','Returns the associated post-comments of a node.'],['fun','wrangler','wrangler_syntax:get_precomments/1','Returns the associated pre-comments of a node.'],['fun','wrangler','wrangler_syntax:has_comments/1','Yields false if the node has no associated  comme'],['fun','wrangler','wrangler_syntax:if_expr/1','Creates an abstract if-expression.'],['fun','wrangler','wrangler_syntax:if_expr_clauses/1','Returns the list of clause subtrees of an if_expr'],['fun','wrangler','wrangler_syntax:implicit_fun/1','Creates an abstract "implicit fun" expression.'],['fun','wrangler','wrangler_syntax:implicit_fun/1','Creates an abstract "implicit fun" expression.'],['fun','wrangler','wrangler_syntax:implicit_fun_name/1','Returns the name subtree of an implicit_fun node.'],['fun','wrangler','wrangler_syntax:infix_expr/1','Creates an abstract infix operator expression.'],['fun','wrangler','wrangler_syntax:infix_expr_left/1','Returns the left argument subtree of an  infix_ex'],['fun','wrangler','wrangler_syntax:infix_expr_operator/1','Returns the operator subtree of an infix_expr  no'],['fun','wrangler','wrangler_syntax:infix_expr_right/1','Returns the right argument subtree of an  infix_e'],['fun','wrangler','wrangler_syntax:integer/1','Creates an abstract integer literal.'],['fun','wrangler','wrangler_syntax:integer_literal/1','Returns the numeral string represented by an  int'],['fun','wrangler','wrangler_syntax:integer_value/1','Returns the value represented by an integer node.'],['fun','wrangler','wrangler_syntax:is_atom/1','Returns true if Node has type  atom and represent'],['fun','wrangler','wrangler_syntax:is_char/1','Returns true if Node has type  char and represent'],['fun','wrangler','wrangler_syntax:is_form/1','Returns true if Node is a syntax tree  representi'],['fun','wrangler','wrangler_syntax:is_integer/1','Returns true if Node has type  integer and repres'],['fun','wrangler','wrangler_syntax:is_leaf/1','Returns true if Node is a leaf node,  otherwise f'],['fun','wrangler','wrangler_syntax:is_list_skeleton/1','Returns true if Node has type  list or nil, other'],['fun','wrangler','wrangler_syntax:is_literal/1','Returns true if Node represents a  literal term, '],['fun','wrangler','wrangler_syntax:is_proper_list/1','Returns true if Node represents a  proper list, a'],['fun','wrangler','wrangler_syntax:is_string/1','Returns true if Node has type  string and represe'],['fun','wrangler','wrangler_syntax:is_tree/1','For special purposes only.'],['fun','wrangler','wrangler_syntax:is_wrapper/1','Returns true if the argument is a wrapper  struct'],['fun','wrangler','wrangler_syntax:join_comments/1','Appends the comments of Source to the current  co'],['fun','wrangler','wrangler_syntax:list/1','Equivalent to list(List, none).'],['fun','wrangler','wrangler_syntax:list/2','Constructs an abstract list skeleton.'],['fun','wrangler','wrangler_syntax:list_comp/1','Creates an abstract list comprehension.'],['fun','wrangler','wrangler_syntax:list_comp_body/1','Returns the list of body subtrees of a list_comp '],['fun','wrangler','wrangler_syntax:list_comp_template/1','Returns the template subtree of a list_comp node.'],['fun','wrangler','wrangler_syntax:list_elements/1','Returns the list of element subtrees of a list ske'],['fun','wrangler','wrangler_syntax:list_head/1','Returns the head element subtree of a list node.'],['fun','wrangler','wrangler_syntax:list_length/1','Returns the number of element subtrees of a list s'],['fun','wrangler','wrangler_syntax:list_prefix/1','Returns the prefix element subtrees of a list node'],['fun','wrangler','wrangler_syntax:list_suffix/1','Returns the suffix subtree of a list node, if one'],['fun','wrangler','wrangler_syntax:list_tail/1','Returns the tail of a list node.'],['fun','wrangler','wrangler_syntax:macro/1','Creates an abstract macro application.'],['fun','wrangler','wrangler_syntax:macro/1','Equivalent to macro(Name, none).'],['fun','wrangler','wrangler_syntax:macro_arguments/1','Returns the list of argument subtrees of a macro '],['fun','wrangler','wrangler_syntax:macro_name/1','Returns the name subtree of a macro node.'],['fun','wrangler','wrangler_syntax:make_tree/1','Creates a syntax tree with the given type and subt'],['fun','wrangler','wrangler_syntax:map_expr/1','Creates an abstract map expression.'],['fun','wrangler','wrangler_syntax:map_expr/1','Equivalent to map_expr(none, Fields).'],['fun','wrangler','wrangler_syntax:map_expr_argument/1','Returns the argument subtree of a map_expr node, i'],['fun','wrangler','wrangler_syntax:map_expr_fields/1','Returns the list of field subtrees of a map_expr n'],['fun','wrangler','wrangler_syntax:map_field_assoc/1','Creates an abstract map assoc field.'],['fun','wrangler','wrangler_syntax:map_field_assoc_name/1','Returns the name subtree of a map_field_assoc node'],['fun','wrangler','wrangler_syntax:map_field_assoc_value/1','Returns the value subtree of a map_field_assoc nod'],['fun','wrangler','wrangler_syntax:map_field_exact/1','Creates an abstract map exact field.'],['fun','wrangler','wrangler_syntax:map_field_exact_name/1','Returns the name subtree of a map_field_exact node'],['fun','wrangler','wrangler_syntax:map_field_exact_value/1','Returns the value subtree of a map_field_exact nod'],['fun','wrangler','wrangler_syntax:match_expr/1','Creates an abstract match-expression.'],['fun','wrangler','wrangler_syntax:match_expr_body/1','Returns the body subtree of a match_expr node.'],['fun','wrangler','wrangler_syntax:match_expr_pattern/1','Returns the pattern subtree of a match_expr node.'],['fun','wrangler','wrangler_syntax:meta/1','Creates a meta-representation of a syntax tree.'],['fun','wrangler','wrangler_syntax:module_qualifier/1','Creates an abstract module qualifier.'],['fun','wrangler','wrangler_syntax:module_qualifier_argument/1','Returns the argument (the module) subtree of a  m'],['fun','wrangler','wrangler_syntax:module_qualifier_body/1','Returns the body subtree of a module_qualifier  n'],['fun','wrangler','wrangler_syntax:named_fun_expr/1','Creates an abstract named fun-expression.'],['fun','wrangler','wrangler_syntax:named_fun_expr_arity/1','Returns the arity of a named_fun_expr node.'],['fun','wrangler','wrangler_syntax:named_fun_expr_clauses/1','Returns the list of clause subtrees of a named_fun'],['fun','wrangler','wrangler_syntax:named_fun_expr_name/1','Returns the name subtree of a named_fun_expr node.'],['fun','wrangler','wrangler_syntax:nil/0','Creates an abstract empty list.'],['fun','wrangler','wrangler_syntax:normalize_list/1','Expands an abstract list skeleton to its most expl'],['fun','wrangler','wrangler_syntax:operator/1','Creates an abstract operator.'],['fun','wrangler','wrangler_syntax:operator_literal/1','Returns the literal string represented by an  ope'],['fun','wrangler','wrangler_syntax:operator_name/1','Returns the name of an operator node.'],['fun','wrangler','wrangler_syntax:parentheses/1','Creates an abstract parenthesised expression.'],['fun','wrangler','wrangler_syntax:parentheses_body/1','Returns the body subtree of a parentheses node.'],['fun','wrangler','wrangler_syntax:prefix_expr/1','Creates an abstract prefix operator expression.'],['fun','wrangler','wrangler_syntax:prefix_expr_argument/1','Returns the argument subtree of a prefix_expr  no'],['fun','wrangler','wrangler_syntax:prefix_expr_operator/1','Returns the operator subtree of a prefix_expr  no'],['fun','wrangler','wrangler_syntax:qualified_name/1','Creates an abstract qualified name.'],['fun','wrangler','wrangler_syntax:qualified_name_segments/1','Returns the list of name segments of a  qualified'],['fun','wrangler','wrangler_syntax:query_expr/1','Creates an abstract Mnemosyne query expression.'],['fun','wrangler','wrangler_syntax:query_expr_body/1','Returns the body subtree of a query_expr node.'],['fun','wrangler','wrangler_syntax:receive_expr/1','Creates an abstract receive-expression.'],['fun','wrangler','wrangler_syntax:receive_expr/1','Equivalent to receive_expr(Clauses, none, []).'],['fun','wrangler','wrangler_syntax:receive_expr_action/1','Returns the list of action body subtrees of a  re'],['fun','wrangler','wrangler_syntax:receive_expr_clauses/1','Returns the list of clause subtrees of a  receive'],['fun','wrangler','wrangler_syntax:receive_expr_timeout/1','Returns the timeout subtree of a receive_expr node'],['fun','wrangler','wrangler_syntax:record_access/1','Creates an abstract record field access expression'],['fun','wrangler','wrangler_syntax:record_access/2','Equivalent to record_access(Argument, none, Field)'],['fun','wrangler','wrangler_syntax:record_access_argument/1','Returns the argument subtree of a record_access  '],['fun','wrangler','wrangler_syntax:record_access_field/1','Returns the field subtree of a record_access  nod'],['fun','wrangler','wrangler_syntax:record_access_type/1','Returns the type subtree of a record_access node,'],['fun','wrangler','wrangler_syntax:record_expr/2','Creates an abstract record expression.'],['fun','wrangler','wrangler_syntax:record_expr/2','Equivalent to record_expr(none, Type, Fields).'],['fun','wrangler','wrangler_syntax:record_expr_argument/1','Returns the argument subtree of a record_expr node'],['fun','wrangler','wrangler_syntax:record_expr_fields/1','Returns the list of field subtrees of a  record_e'],['fun','wrangler','wrangler_syntax:record_expr_type/1','Returns the type subtree of a record_expr node.'],['fun','wrangler','wrangler_syntax:record_field/1','Creates an abstract record field specification.'],['fun','wrangler','wrangler_syntax:record_field/1','Equivalent to record_field(Name, none).'],['fun','wrangler','wrangler_syntax:record_field_name/1','Returns the name subtree of a record_field node.'],['fun','wrangler','wrangler_syntax:record_field_value/1','Returns the value subtree of a record_field node,'],['fun','wrangler','wrangler_syntax:record_index_expr/1','Creates an abstract record field index expression.'],['fun','wrangler','wrangler_syntax:record_index_expr_field/1','Returns the field subtree of a record_index_expr '],['fun','wrangler','wrangler_syntax:record_index_expr_type/1','Returns the type subtree of a record_index_expr  '],['fun','wrangler','wrangler_syntax:remove_comments/1','Clears the associated comments of Node.'],['fun','wrangler','wrangler_syntax:revert/1','Returns an erl_parse-compatible representation of '],['fun','wrangler','wrangler_syntax:revert_clause_disjunction/1',[]],['fun','wrangler','wrangler_syntax:revert_forms/1','Reverts a sequence of Erlang source code forms.'],['fun','wrangler','wrangler_syntax:rule/1','Creates an abstract Mnemosyne rule.'],['fun','wrangler','wrangler_syntax:rule_arity/1','Returns the arity of a rule node.'],['fun','wrangler','wrangler_syntax:rule_clauses/1','Returns the list of clause subtrees of a rule node'],['fun','wrangler','wrangler_syntax:rule_name/1','Returns the name subtree of a rule node.'],['fun','wrangler','wrangler_syntax:set_ann/1','Sets the list of user annotations of Node to  Ann'],['fun','wrangler','wrangler_syntax:set_attrs/1','Sets the attributes of Node to  Attributes.'],['fun','wrangler','wrangler_syntax:set_name/2',[]],['fun','wrangler','wrangler_syntax:set_pos/1','Sets the position information of Node to  Pos.'],['fun','wrangler','wrangler_syntax:set_postcomments/1','Sets the post-comments of Node to  Comments.'],['fun','wrangler','wrangler_syntax:set_precomments/1','Sets the pre-comments of Node to  Comments.'],['fun','wrangler','wrangler_syntax:size_qualifier/1','Creates an abstract size qualifier.'],['fun','wrangler','wrangler_syntax:size_qualifier_argument/1','Returns the argument subtree (the size) of a  siz'],['fun','wrangler','wrangler_syntax:size_qualifier_body/1','Returns the body subtree of a size_qualifier  nod'],['fun','wrangler','wrangler_syntax:string/1','Creates an abstract string literal.'],['fun','wrangler','wrangler_syntax:string_literal/1','Returns the literal string represented by a string'],['fun','wrangler','wrangler_syntax:string_value/1','Returns the value represented by a string node.'],['fun','wrangler','wrangler_syntax:subtrees/1','Returns the grouped list of all subtrees of a synt'],['fun','wrangler','wrangler_syntax:text/1','Creates an abstract piece of source code text.'],['fun','wrangler','wrangler_syntax:text_string/1','Returns the character sequence represented by a  '],['fun','wrangler','wrangler_syntax:tree/1','For special purposes only.'],['fun','wrangler','wrangler_syntax:tree/1','Equivalent to tree(Type, []).'],['fun','wrangler','wrangler_syntax:try_after_expr/1','Equivalent to try_expr(Body, [], [], After).'],['fun','wrangler','wrangler_syntax:try_expr/1','Creates an abstract try-expression.'],['fun','wrangler','wrangler_syntax:try_expr/1','Equivalent to try_expr(Body, Clauses, Handlers, []'],['fun','wrangler','wrangler_syntax:try_expr/1','Equivalent to try_expr(Body, [], Handlers).'],['fun','wrangler','wrangler_syntax:try_expr_after/1','Returns the list of "after" subtrees of a try_expr'],['fun','wrangler','wrangler_syntax:try_expr_body/1','Returns the list of body subtrees of a try_expr  '],['fun','wrangler','wrangler_syntax:try_expr_clauses/1','Returns the list of case-clause subtrees of a  tr'],['fun','wrangler','wrangler_syntax:try_expr_handlers/1','Returns the list of handler-clause subtrees of a '],['fun','wrangler','wrangler_syntax:tuple/1','Creates an abstract tuple.'],['fun','wrangler','wrangler_syntax:tuple_elements/1','Returns the list of element subtrees of a tuple  '],['fun','wrangler','wrangler_syntax:tuple_size/1','Returns the number of elements of a tuple node.'],['fun','wrangler','wrangler_syntax:type/1','Returns the type tag of Node.'],['fun','wrangler','wrangler_syntax:typed_record_field/1',[]],['fun','wrangler','wrangler_syntax:typed_record_field_name/1',[]],['fun','wrangler','wrangler_syntax:typed_record_field_value/1',[]],['fun','wrangler','wrangler_syntax:typed_record_type/1',[]],['fun','wrangler','wrangler_syntax:underscore/0','Creates an abstract universal pattern ("_").'],['fun','wrangler','wrangler_syntax:update_tree/1','Creates a syntax tree with the same type and attri'],['fun','wrangler','wrangler_syntax:variable/1','Creates an abstract variable with the given name.'],['fun','wrangler','wrangler_syntax:variable_literal/1','Returns the name of a variable node as a string.'],['fun','wrangler','wrangler_syntax:variable_name/1','Returns the name of a variable node as an atom.'],['fun','wrangler','wrangler_syntax:warning_marker/1','Creates an abstract warning marker.'],['fun','wrangler','wrangler_syntax:warning_marker_info/1','Returns the ErrorInfo structure of a warning_marke'],['fun','wrangler','wrangler_syntax_lib:analyze_application/1','Returns the name of a called function.'],['fun','wrangler','wrangler_syntax_lib:analyze_attribute/1','Analyzes an attribute node.'],['fun','wrangler','wrangler_syntax_lib:analyze_export_attribute/1','Returns the list of function names declared by an '],['fun','wrangler','wrangler_syntax_lib:analyze_file_attribute/1','Returns the file name and line number of a file  '],['fun','wrangler','wrangler_syntax_lib:analyze_form/1','Analyzes a "source code form" node.'],['fun','wrangler','wrangler_syntax_lib:analyze_forms/1','Analyzes a sequence of "program forms".'],['fun','wrangler','wrangler_syntax_lib:analyze_function/1','Returns the name and arity of a function definitio'],['fun','wrangler','wrangler_syntax_lib:analyze_function_name/1','Returns the function name represented by a syntax '],['fun','wrangler','wrangler_syntax_lib:analyze_implicit_fun/1','Returns the name of an implicit fun expression "fu'],['fun','wrangler','wrangler_syntax_lib:analyze_import_attribute/1','Returns the module name and (if present) list of f'],['fun','wrangler','wrangler_syntax_lib:analyze_module_attribute/1','Returns the module name declared by a module attri'],['fun','wrangler','wrangler_syntax_lib:analyze_record_attribute/1','Returns the name and the list of fields of a recor'],['fun','wrangler','wrangler_syntax_lib:analyze_record_expr/1','Returns the record name and field name/names of a '],['fun','wrangler','wrangler_syntax_lib:analyze_record_field/1','Returns the label and value-expression of a record'],['fun','wrangler','wrangler_syntax_lib:analyze_rule/1','Returns the name and arity of a Mnemosyne rule.'],['fun','wrangler','wrangler_syntax_lib:analyze_wild_attribute/1','Returns the name and value of a "wild" attribute.'],['fun','wrangler','wrangler_syntax_lib:annotate_bindings/1','Adds or updates annotations on nodes in a syntax t'],['fun','wrangler','wrangler_syntax_lib:annotate_bindings/1','Adds or updates annotations on nodes in a syntax t'],['fun','wrangler','wrangler_syntax_lib:annotate_bindings/3',[]],['fun','wrangler','wrangler_syntax_lib:annotate_expr/1',[]],['fun','wrangler','wrangler_syntax_lib:function_name_expansions/1','Creates a mapping from corresponding short names t'],['fun','wrangler','wrangler_syntax_lib:is_fail_expr/1','Returns true if Tree represents an  expression wh'],['fun','wrangler','wrangler_syntax_lib:limit/1','Limits a syntax tree to a specified depth.'],['fun','wrangler','wrangler_syntax_lib:limit/2','Equivalent to limit(Tree, Depth, Text) using the '],['fun','wrangler','wrangler_syntax_lib:new_variable_name/1','Returns an atom which is not already in the set  '],['fun','wrangler','wrangler_syntax_lib:new_variable_name/2','Returns a user-named atom which is not already in '],['fun','wrangler','wrangler_syntax_lib:new_variable_names/1','Like new_variable_name/2, but generates a list of'],['fun','wrangler','wrangler_syntax_lib:new_variable_names/1','Like new_variable_name/1, but generates a list of'],['fun','wrangler','wrangler_syntax_lib:split_lines/1',[]],['fun','wrangler','wrangler_syntax_lib:strip_comments/1','Removes all comments from all nodes of a syntax tr'],['fun','wrangler','wrangler_syntax_lib:to_comment/1','Transforms a syntax tree into an abstract comment.'],['fun','wrangler','wrangler_syntax_lib:to_comment/1','Equivalent to to_comment(Tree, Prefix, F) for a  '],['fun','wrangler','wrangler_syntax_lib:to_comment/1','Equivalent to to_comment(Tree, "% ").'],['fun','wrangler','wrangler_syntax_lib:var_annotate_clause/4',[]],['fun','wrangler','wrangler_syntax_lib:variables/1','Returns the names of variables occurring in a synt'],['fun','wrangler','wrangler_undo_server:add_to_history/1',[]],['fun','wrangler','wrangler_undo_server:code_change/3',[]],['fun','wrangler','wrangler_undo_server:files_to_change/0',[]],['fun','wrangler','wrangler_undo_server:handle_call/3',[]],['fun','wrangler','wrangler_undo_server:handle_cast/2',[]],['fun','wrangler','wrangler_undo_server:handle_info/2',[]],['fun','wrangler','wrangler_undo_server:init/1',[]],['fun','wrangler','wrangler_undo_server:start_undo_server/0',[]],['fun','wrangler','wrangler_undo_server:terminate/2',[]],['fun','wrangler','wrangler_undo_server:undo/0',[]],['fun','wrangler','wrangler_undo_server:undo_emacs/0',[]],['fun','wrangler','wrangler_unification:expr_match/2',[]],['fun','wrangler','wrangler_unification:expr_unification/1',[]],['fun','wrangler','wrangler_unification:expr_unification_extended/2',[]],['fun','wrangler','wrangler_write_file:write_refactored_files/4',[]],['fun','wrangler','wrangler_write_file:write_refactored_files/5','Pretty-print the abstract syntax trees to a files,'],['fun','wrangler','wrangler_write_file:write_refactored_files_for_preview/3',[]]];