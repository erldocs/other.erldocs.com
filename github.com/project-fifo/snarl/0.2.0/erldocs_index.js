var index = [['app','snarl','snarl','[application]'],['app','snarl','snarl','[application]'],['mod','snarl','bench',[]],['mod','snarl','crash',[]],['mod','snarl','lager','The lager logging framework.'],['mod','snarl','lager_console_backend','Console backend for lager.'],['mod','snarl','lager_crash_backend',[]],['mod','snarl','lager_crash_log','Lager crash log writer.'],['mod','snarl','lager_file_backend','File backend for lager, with multiple file support'],['mod','snarl','lager_format',[]],['mod','snarl','lager_mochiglobal','Abuse module constant pools as a "read-only shared'],['mod','snarl','lager_stdlib','Functions from Erlang OTP distribution that are re'],['mod','snarl','lager_test_backend',[]],['mod','snarl','lager_transform','The parse transform used for lager messages.'],['mod','snarl','lager_trunc_io','Module to print out terms for logging.'],['mod','snarl','lager_util',[]],['mod','snarl','redo',[]],['mod','snarl','redo_concurrency_test',[]],['mod','snarl','redo_redis_proto',[]],['mod','snarl','redo_tests',[]],['mod','snarl','redo_uri',[]],['mod','snarl','snarl_app',[]],['mod','snarl','snarl_app',[]],['mod','snarl','snarl_srv','.'],['mod','snarl','snarl_srv','.'],['mod','snarl','snarl_sup',[]],['mod','snarl','snarl_sup',[]],['mod','snarl','special_process',[]],['mod','snarl','sync_error_logger',[]],['mod','snarl','trunc_io_eqc',[]],['mod','snarl','uuid','  Erlang UUID.'],['mod','snarl','uuid_tests','  Erlang UUID.'],['fun','snarl','crash:code_change/3',[]],['fun','snarl','crash:handle_call/3',[]],['fun','snarl','crash:handle_cast/2',[]],['fun','snarl','crash:handle_info/2',[]],['fun','snarl','crash:init/1',[]],['fun','snarl','crash:start/0',[]],['fun','snarl','crash:terminate/2',[]],['fun','snarl','lager:clear_all_traces/0',[]],['fun','snarl','lager:dispatch_log/1',[]],['fun','snarl','lager:get_loglevel/1','Get the loglevel for a particular backend.'],['fun','snarl','lager:log/1','Manually log a message into lager without using th'],['fun','snarl','lager:log/1','Manually log a message into lager without using th'],['fun','snarl','lager:posix_error/1','Try to convert an atom to a posix error, but fall '],['fun','snarl','lager:safe_format/3','Print the format string Fmt with Args safely with '],['fun','snarl','lager:set_loglevel/2','Set the loglevel for a particular backend.'],['fun','snarl','lager:set_loglevel/3','Set the loglevel for a particular backend that has'],['fun','snarl','lager:start/0','Start the application.'],['fun','snarl','lager:status/0',[]],['fun','snarl','lager:stop_trace/1',[]],['fun','snarl','lager:trace_console/1',[]],['fun','snarl','lager:trace_console/2',[]],['fun','snarl','lager:trace_file/2',[]],['fun','snarl','lager:trace_file/3',[]],['fun','snarl','lager_crash_backend:code_change/3',[]],['fun','snarl','lager_crash_backend:handle_call/2',[]],['fun','snarl','lager_crash_backend:handle_event/2',[]],['fun','snarl','lager_crash_backend:handle_info/2',[]],['fun','snarl','lager_crash_backend:init/1',[]],['fun','snarl','lager_crash_backend:terminate/2',[]],['fun','snarl','lager_format:format/3',[]],['fun','snarl','lager_format:format/4',[]],['fun','snarl','lager_mochiglobal:delete/1','Delete term stored at K, no-op if non-existent.'],['fun','snarl','lager_mochiglobal:get/1','Get the term for K or return Default.'],['fun','snarl','lager_mochiglobal:get/1','Equivalent to get(K, undefined).'],['fun','snarl','lager_mochiglobal:put/1','Store term V at K, replaces an existing term if pr'],['fun','snarl','lager_stdlib:is_my_error_report/1',[]],['fun','snarl','lager_stdlib:is_my_info_report/1',[]],['fun','snarl','lager_stdlib:maybe_utc/1',[]],['fun','snarl','lager_stdlib:proc_lib_format/1',[]],['fun','snarl','lager_stdlib:string_p/1',[]],['fun','snarl','lager_stdlib:sup_get/1',[]],['fun','snarl','lager_stdlib:write_time/2',[]],['fun','snarl','lager_test_backend:code_change/3',[]],['fun','snarl','lager_test_backend:handle_call/2',[]],['fun','snarl','lager_test_backend:handle_event/2',[]],['fun','snarl','lager_test_backend:handle_info/2',[]],['fun','snarl','lager_test_backend:init/1',[]],['fun','snarl','lager_test_backend:terminate/2',[]],['fun','snarl','lager_trunc_io:format/3',[]],['fun','snarl','lager_trunc_io:format/4',[]],['fun','snarl','lager_trunc_io:fprint/1','Returns an flattened list containing the ASCII rep'],['fun','snarl','lager_trunc_io:fprint/1','Returns an flattened list containing the ASCII rep'],['fun','snarl','lager_trunc_io:print/1','Returns {List, Length}.'],['fun','snarl','lager_trunc_io:print/1','Returns {List, Length}.'],['fun','snarl','lager_trunc_io:safe/1','Same as print, but never crashes.'],['fun','snarl','lager_util:calculate_next_rotation/1',[]],['fun','snarl','lager_util:check_traces/4',[]],['fun','snarl','lager_util:ensure_logfile/4',[]],['fun','snarl','lager_util:format_time/0',[]],['fun','snarl','lager_util:format_time/1',[]],['fun','snarl','lager_util:level_to_num/1',[]],['fun','snarl','lager_util:levels/0',[]],['fun','snarl','lager_util:localtime_ms/0',[]],['fun','snarl','lager_util:maybe_utc/1',[]],['fun','snarl','lager_util:num_to_level/1',[]],['fun','snarl','lager_util:open_logfile/2',[]],['fun','snarl','lager_util:parse_rotation_date_spec/1',[]],['fun','snarl','lager_util:rotate_logfile/2',[]],['fun','snarl','lager_util:validate_trace/1',[]],['fun','snarl','redo:cmd/1',[]],['fun','snarl','redo:cmd/1',[]],['fun','snarl','redo:cmd/2',[]],['fun','snarl','redo:code_change/3',[]],['fun','snarl','redo:handle_call/3',[]],['fun','snarl','redo:handle_cast/2',[]],['fun','snarl','redo:handle_info/2',[]],['fun','snarl','redo:init/1',[]],['fun','snarl','redo:shutdown/1',[]],['fun','snarl','redo:start_link/0',[]],['fun','snarl','redo:start_link/1',[]],['fun','snarl','redo:start_link/1',[]],['fun','snarl','redo:subscribe/1',[]],['fun','snarl','redo:subscribe/1',[]],['fun','snarl','redo:terminate/2',[]],['fun','snarl','redo_concurrency_test:run/2',[]],['fun','snarl','redo_redis_proto:package/1',[]],['fun','snarl','redo_redis_proto:parse/1',[]],['fun','snarl','redo_uri:parse/1',[]],['fun','snarl','snarl_app:load/0',[]],['fun','snarl','snarl_app:load/0',[]],['fun','snarl','snarl_app:start/2',[]],['fun','snarl','snarl_app:start/2',[]],['fun','snarl','snarl_app:stop/1',[]],['fun','snarl','snarl_app:stop/1',[]],['fun','snarl','snarl_srv:call/2',[]],['fun','snarl','snarl_srv:call/2',[]],['fun','snarl','snarl_srv:initialize/0',[]],['fun','snarl','snarl_srv:initialize/0',[]],['fun','snarl','snarl_srv:initialize/2',[]],['fun','snarl','snarl_srv:initialize/2',[]],['fun','snarl','snarl_srv:initialize_groups/0',[]],['fun','snarl','snarl_srv:initialize_groups/0',[]],['fun','snarl','snarl_srv:match/2',[]],['fun','snarl','snarl_srv:match/2',[]],['fun','snarl','snarl_srv:reregister/0',[]],['fun','snarl','snarl_srv:reregister/0',[]],['fun','snarl','snarl_srv:start_link/0','  Starts the server.'],['fun','snarl','snarl_srv:start_link/0','  Starts the server.'],['fun','snarl','snarl_sup:init/1',[]],['fun','snarl','snarl_sup:init/1',[]],['fun','snarl','snarl_sup:start_link/0',[]],['fun','snarl','snarl_sup:start_link/0',[]],['fun','snarl','special_process:init/1',[]],['fun','snarl','special_process:start/0',[]],['fun','snarl','sync_error_logger:error_msg/1',[]],['fun','snarl','sync_error_logger:error_msg/2',[]],['fun','snarl','sync_error_logger:error_report/1',[]],['fun','snarl','sync_error_logger:error_report/2',[]],['fun','snarl','sync_error_logger:info_msg/1',[]],['fun','snarl','sync_error_logger:info_msg/2',[]],['fun','snarl','sync_error_logger:info_report/1',[]],['fun','snarl','sync_error_logger:info_report/2',[]],['fun','snarl','sync_error_logger:warning_msg/1',[]],['fun','snarl','sync_error_logger:warning_msg/2',[]],['fun','snarl','sync_error_logger:warning_report/1',[]],['fun','snarl','sync_error_logger:warning_report/2',[]],['fun','snarl','uuid:to_binary/1',' Format uuid binary from string.'],['fun','snarl','uuid:to_string/1',' Format UUID string from binary.'],['fun','snarl','uuid:to_string/2',[]],['fun','snarl','uuid:uuid4/0',' Create a UUID v4 (random) as a binary.'],['fun','snarl','uuid:uuid5/1',' Create a UUID v5 (name based) as a binary.']];