var index = [['app','ehtm','ehtm','[application]'],['mod','ehtm','ehtm_app',[]],['mod','ehtm','entry_node',[]],['mod','ehtm','intermediate_node',[]],['mod','ehtm','layer_sup',[]],['mod','ehtm','network',[]],['mod','ehtm','network_sup',[]],['mod','ehtm','node',[]],['mod','ehtm','output_node',[]],['mod','ehtm','temporal_pooler',[]],['mod','ehtm','utils',[]],['fun','ehtm','ehtm_app:start/2',[]],['fun','ehtm','ehtm_app:stop/1',[]],['fun','ehtm','entry_node:code_change/3',[]],['fun','ehtm','entry_node:handle_call/3',[]],['fun','ehtm','entry_node:handle_cast/2',[]],['fun','ehtm','entry_node:handle_info/2',[]],['fun','ehtm','entry_node:init/1','Starts an entry_node process.'],['fun','ehtm','entry_node:start_link/2','Starts an entry_node process.'],['fun','ehtm','entry_node:terminate/2',[]],['fun','ehtm','intermediate_node:code_change/3',[]],['fun','ehtm','intermediate_node:handle_call/3',[]],['fun','ehtm','intermediate_node:handle_cast/2',[]],['fun','ehtm','intermediate_node:handle_info/2',[]],['fun','ehtm','intermediate_node:init/1','Starts an entry_node process.'],['fun','ehtm','intermediate_node:start_link/2','Starts an entry_node process.'],['fun','ehtm','intermediate_node:terminate/2',[]],['fun','ehtm','layer_sup:init/1',[]],['fun','ehtm','layer_sup:make_process_name/1',[]],['fun','ehtm','layer_sup:start_link/2',[]],['fun','ehtm','network:code_change/3',[]],['fun','ehtm','network:feed/2',[]],['fun','ehtm','network:handle_call/3',[]],['fun','ehtm','network:handle_cast/2',[]],['fun','ehtm','network:handle_info/2',[]],['fun','ehtm','network:inference/1',[]],['fun','ehtm','network:init/1','Starts an entry_node process.'],['fun','ehtm','network:make_process_name/1','Given the name of the network, returns a process n'],['fun','ehtm','network:read_output/1',[]],['fun','ehtm','network:start_link/2','Starts the network process.'],['fun','ehtm','network:terminate/2',[]],['fun','ehtm','network_sup:init/1',[]],['fun','ehtm','network_sup:start_link/0',[]],['fun','ehtm','node:feed/2','Feed data to a node process via a sync request.'],['fun','ehtm','node:get_upper_layer/1','Given a layer name, returns the name of the layer '],['fun','ehtm','node:make_ets_name/1','Given a process name, returns a fully qualified na'],['fun','ehtm','node:make_process_name/2','Given a node name and the layer it belongs to, ret'],['fun','ehtm','node:read_state/1','Read the state of a node.'],['fun','ehtm','node:register_child/2','Register a child in a parent node.'],['fun','ehtm','node:set_state/2','Set the state of a node.'],['fun','ehtm','output_node:code_change/3',[]],['fun','ehtm','output_node:handle_call/3',[]],['fun','ehtm','output_node:handle_cast/2',[]],['fun','ehtm','output_node:handle_info/2',[]],['fun','ehtm','output_node:init/1','Starts an entry_node process.'],['fun','ehtm','output_node:start_link/2','Starts an entry_node process.'],['fun','ehtm','output_node:terminate/2',[]],['fun','ehtm','temporal_pooler:default_temporal_cluster/3',[]],['fun','ehtm','temporal_pooler:growing_group/3','Given a temporal group, the Temporal Connection ve'],['fun','ehtm','utils:configuration_file/0',[]],['fun','ehtm','utils:extract_widx/1','Given an input message, returns the list of winnin'],['fun','ehtm','utils:norm/3','Compute the Euclidean norm between two binaries, d'],['fun','ehtm','utils:read_network_structure/1',[]],['fun','ehtm','utils:table_lookup/3',[]]];