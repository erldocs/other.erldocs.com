var index = [['app','j_cache','j_cache','[application]'],['mod','j_cache','jc','This module wraps the mnesia-interacting, lower-le'],['mod','j_cache','jc_app','Application module for the JC application.'],['mod','j_cache','jc_bridge','   Receives requests in the form of {CallerPid::p'],['mod','j_cache','jc_eviction_manager','jc_eviction_manager spys on the cache tables, crea'],['mod','j_cache','jc_psub','jc_psub 1) notifies clients of changes to j_cache '],['mod','j_cache','jc_store','This module manages the mapping of a Map and   Ke'],['mod','j_cache','jc_sup','Top-level supervisor for jc.'],['fun','j_cache','jc:cache_nodes/0','Return all nodes that offer the JCache service.'],['fun','j_cache','jc:cache_size/0','Returns table size information in records and word'],['fun','j_cache','jc:clear/1','Evict an entire Map.'],['fun','j_cache','jc:contains_key/1','Return true if the Key is in the map, else false.'],['fun','j_cache','jc:delete_record_by_ref/1','Delete the cache element by its record reference.'],['fun','j_cache','jc:evict/1','Evict Map, Key.'],['fun','j_cache','jc:evict_match/1','Evict Map/Key from the cache for Keys whose value'],['fun','j_cache','jc:flush/0','Remove all existing items from the cache.'],['fun','j_cache','jc:get/1','Retrieve the data associated with Key, extend the '],['fun','j_cache','jc:get_all/2','Retrieve the data associated with the keys in the '],['fun','j_cache','jc:key_set/1','Return all the keys for a given map.'],['fun','j_cache','jc:map_size/1','Returns the number of objects in the map.'],['fun','j_cache','jc:put/1','Put the entry into the cache with the given TTL.'],['fun','j_cache','jc:put/1','Put the entry into the cache with a TTL of infinit'],['fun','j_cache','jc:put_all/1','Put all the {K,V} pairs contained in the list.'],['fun','j_cache','jc:put_all/1','Put all the {K,V} pairs contained in the list.'],['fun','j_cache','jc:stop/0','Stop the cache at this node.'],['fun','j_cache','jc:up/0','Returns the date of cluster creation and uptime.'],['fun','j_cache','jc:values/1','Return all values in the given map.'],['fun','j_cache','jc:values_match/1','Return the Values where the value matches the supp'],['fun','j_cache','jc_app:stop/1','Called when the application is stopped.'],['fun','j_cache','jc_bridge:init/1',[]],['fun','j_cache','jc_bridge:start_link/0','Starts the server.'],['fun','j_cache','jc_eviction_manager:add_timer/1','Create a TTL timer for the cache entry with the su'],['fun','j_cache','jc_eviction_manager:cancel_timer/1','Cancel the timer for the cache entry with the supp'],['fun','j_cache','jc_eviction_manager:extend_timer/1','Extend the TTL for a record.'],['fun','j_cache','jc_eviction_manager:start_link/0','Starts the server and links the caller to it.'],['fun','j_cache','jc_psub:client_count/0','Return the number of distinct, subscribing Pids be'],['fun','j_cache','jc_psub:load/0','Return an estimate of how much load the server is '],['fun','j_cache','jc_psub:map_event/1','Push a map-related event to the server.'],['fun','j_cache','jc_psub:map_subscribe/1','Adds a subscription on behalf of the process indic'],['fun','j_cache','jc_psub:map_unsubscribe/1','Client unsubcribes from notifiction.'],['fun','j_cache','jc_psub:start_link/0','Starts the change_relay server and links the calle'],['fun','j_cache','jc_psub:topic_event/1','Push a topic message to the server.'],['fun','j_cache','jc_psub:topic_subscribe/1','Client subscribes to notifications regarding the g'],['fun','j_cache','jc_psub:topic_unsubscribe/1','Client unsubscribes to notifications regarding the'],['fun','j_cache','jc_store:clear/1','Clear all data for the given map.'],['fun','j_cache','jc_store:delete_record_by_ref/1','Delete the cache element by its record reference.'],['fun','j_cache','jc_store:evict/1','Evict Map/Key from the cache.'],['fun','j_cache','jc_store:flush/0','Delete the  entire cache.'],['fun','j_cache','jc_store:fun_match/1','Select those Map items whose JSON value, at the gi'],['fun','j_cache','jc_store:get/1','Return the #key_to_value{} which contains the data'],['fun','j_cache','jc_store:get_map/1','Return all the #key_to_value() for a given Map.'],['fun','j_cache','jc_store:init/0','Either join an existing mnesia cluster or create t'],['fun','j_cache','jc_store:put/1','Put the {link @map_name().'],['fun','j_cache','jc_store:stats/1','Return information size and uptime information.'],['fun','j_cache','jc_store:up_nodes/0',[]],['fun','j_cache','jc_sup:start_link/0','Start the supervisor.']];