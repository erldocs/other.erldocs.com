var index = [['app','sbroker','sbroker','[application]'],['mod','sbroker','sbroker','  This module provides a process match making ser'],['mod','sbroker','sbroker_time','This module provides time utility functions.'],['mod','sbroker','squeue','  This module provides sojourn-time based active '],['mod','sbroker','squeue_codel','Implements CoDel based roughly on Controlling Queu'],['mod','sbroker','squeue_codel_timeout','Implements CoDel based roughly on Controlling Queu'],['mod','sbroker','squeue_naive','Implements a naive queue management algorithm wher'],['mod','sbroker','squeue_timeout','Implements a basic queue management algorithm wher'],['mod','sbroker','sregulator','  This module provides a load regulation service.'],['mod','sbroker','sscheduler','This modules provides utility functions for basic '],['mod','sbroker','svalve','  This module provides sojourn-time based active '],['mod','sbroker','svalve_codel_r','Implements a feedback loop similar to CoDel, see r'],['mod','sbroker','svalve_naive','Implements a naive feedback loop that attempts to '],['mod','sbroker','svalve_timeout','Implements a basic feedback loop where items are d'],['fun','sbroker','sbroker:ask/1','Tries to match with a process calling ask_r/1 on t'],['fun','sbroker','sbroker:ask_r/1','Tries to match with a process calling ask/1 on the'],['fun','sbroker','sbroker:async_ask/1','Monitors the broker and sends an asynchronous requ'],['fun','sbroker','sbroker:async_ask/2','Sends an asynchronous request to match with a proc'],['fun','sbroker','sbroker:async_ask_r/1','Monitors the broker and sends an asynchronous requ'],['fun','sbroker','sbroker:async_ask_r/2','Sends an asynchronous request to match with a proc'],['fun','sbroker','sbroker:await/2','Await the response to an asynchronous request iden'],['fun','sbroker','sbroker:cancel/3','Cancels an asynchronous request.'],['fun','sbroker','sbroker:change_config/2','Change the configuration of the broker.'],['fun','sbroker','sbroker:len/2','Get the length of the ask queue in the broker, Bro'],['fun','sbroker','sbroker:len_r/2','Get the length of the ask_r queue in the broker, B'],['fun','sbroker','sbroker:nb_ask/1','Tries to match with a process calling ask_r/1 on t'],['fun','sbroker','sbroker:nb_ask_r/1','Tries to match with a process calling ask/1 on the'],['fun','sbroker','sbroker:start_link/2','Starts a broker with callback module Module and ar'],['fun','sbroker','sbroker:start_link/3','Starts a broker with name Name, callback module Mo'],['fun','sbroker','sbroker_time:milli_seconds/0','Get the time, MilliSeconds, as an integer() in mil'],['fun','sbroker','sbroker_time:milli_seconds_to_native/1','Convert a time, MilliSeconds, in milliseconds to n'],['fun','sbroker','sbroker_time:native/0','Get the time, Native, as an integer() in the nativ'],['fun','sbroker','sbroker_time:native_to_milli_seconds/1','Convert a time, Native, in native time units to mi'],['fun','sbroker','squeue:drop/1','Equivalent to drop(time(S), S).'],['fun','sbroker','squeue:drop/2','Advances the queue, S, to time Time and drops item'],['fun','sbroker','squeue:drop_r/1','Equivalent to drop_r(time(S), S).'],['fun','sbroker','squeue:drop_r/2','Advances the queue, S, to time Time and drops item'],['fun','sbroker','squeue:filter/2','Equivalent to filter(time(S), Filter, S).'],['fun','sbroker','squeue:filter/3','Advances the queue, S, to time Time  and applies a'],['fun','sbroker','squeue:in/2','Equivalent to in(time(S), time(S), Item, S).'],['fun','sbroker','squeue:in/3','Equivalent to in(Time, Time, Item, S).'],['fun','sbroker','squeue:in/4','Advances the queue, S, to time Time and then inser'],['fun','sbroker','squeue:is_queue/1','Tests if a term, Term, is an squeue queue, returns'],['fun','sbroker','squeue:join/2','Joins two queues, S1 and S2, into one queue, NS, w'],['fun','sbroker','squeue:len/1','Returns the length of the queue, S.'],['fun','sbroker','squeue:new/0','Equivalent to new(0, squeue_naive, undefined).'],['fun','sbroker','squeue:new/1','Equivalent to new(Time, squeue_naive, undefined).'],['fun','sbroker','squeue:new/2','Equivalent to new(0, Module, Args).'],['fun','sbroker','squeue:new/3','Returns an empty queue, S, with the Module managem'],['fun','sbroker','squeue:out/1','Equivalent to out(time(S), S).'],['fun','sbroker','squeue:out/2','Advances the queue, S, to time Time and removes th'],['fun','sbroker','squeue:out_r/1','Equivalent to out_r(time(S), S).'],['fun','sbroker','squeue:out_r/2','Advances the queue, S, to time Time and removes th'],['fun','sbroker','squeue:time/1','Returns the current time, Time, of the queue, S.'],['fun','sbroker','squeue:time/2','Advances the queue, S, to time Time, without apply'],['fun','sbroker','squeue:timeout/1','Equivalent to timeout(time(S), S).'],['fun','sbroker','squeue:timeout/2','Advances the queue, S, to time Time.'],['fun','sbroker','squeue:to_list/1','Returns a list of items, List, in the queue, S.'],['fun','sbroker','sregulator:ask/1','Tries to gain a work lock with the regulator.'],['fun','sbroker','sregulator:async_ask/1','Monitors the regulator and sends an asynchronous r'],['fun','sbroker','sregulator:async_ask/2','Sends an asynchronous request to gain a work lock '],['fun','sbroker','sregulator:async_update/3','Asynchronously update the regulator, Regulator, wi'],['fun','sbroker','sregulator:async_update/4','Asynchronous update the regulator, Regulator, with'],['fun','sbroker','sregulator:await/2','Await the response to an asynchronous request iden'],['fun','sbroker','sregulator:cancel/3','Cancels an asynchronous request.'],['fun','sbroker','sregulator:change_config/2','Change the configuration of the regulator.'],['fun','sbroker','sregulator:done/3','Release lock, Ref, on regulator Regulator.'],['fun','sbroker','sregulator:drop/2','Signal a drop.'],['fun','sbroker','sregulator:ensure_dropped/3','Signal a drop and release the lock.'],['fun','sbroker','sregulator:len/2','Get the length of the queue in the regulator, Regu'],['fun','sbroker','sregulator:nb_ask/1','Tries to gain a work lock with the regulator but d'],['fun','sbroker','sregulator:size/2','Get the number of active process using the regulat'],['fun','sbroker','sregulator:start_link/2','Starts a regulator with callback module Module and'],['fun','sbroker','sregulator:start_link/3','Starts a regulator with name Name, callback module'],['fun','sbroker','sregulator:update/4','Update the regulator, Regulator, with a relative s'],['fun','sbroker','sscheduler:send/2','Send a message to one element, selected based on t'],['fun','sbroker','sscheduler:whereis_name/1','Lookup the pid or process name of one element, sel'],['fun','sbroker','svalve:close/1','Disable the feedback loop from dequeuing items fro'],['fun','sbroker','svalve:drop/1','Equivalent to drop(time(V), V).'],['fun','sbroker','svalve:drop/2','Advances the queue, V, to time Time and drops item'],['fun','sbroker','svalve:drop_r/1','Equivalent to drop_r(time(V), V).'],['fun','sbroker','svalve:drop_r/2','Advances the queue, V, to time Time and drops item'],['fun','sbroker','svalve:dropped/1','Equivalent to dropped(time(V), time(V), V).'],['fun','sbroker','svalve:dropped/2','Equivalent to dropped(Time, Time, V).'],['fun','sbroker','svalve:dropped/3','Advance time of the queue, V, to Time and signal t'],['fun','sbroker','svalve:dropped_r/1','Equivalent to dropped_r(time(V), time(V), V).'],['fun','sbroker','svalve:dropped_r/2','Equivalent to dropped_r(Time, Time, V).'],['fun','sbroker','svalve:dropped_r/3','Advance time of the queue, V, to Time and signal t'],['fun','sbroker','svalve:filter/2','Equivalent to filter(time(V), Filter, V).'],['fun','sbroker','svalve:filter/3','Advances the queue, V, to time Time  and applies a'],['fun','sbroker','svalve:in/2','Equivalent to in(time(V), time(V), Item, V).'],['fun','sbroker','svalve:in/3','Equivalent to in(Time, Time, Item, V).'],['fun','sbroker','svalve:in/4','Advances the queue, V, to time Time and inserts th'],['fun','sbroker','svalve:is_queue/1','Tests if a term, Term, is an svalve queue, returns'],['fun','sbroker','svalve:join/2','Joins two queues, V1 and V2, into one queue, VS, w'],['fun','sbroker','svalve:len/1','Returns the length of the queue, V.'],['fun','sbroker','svalve:new/0','Equivalent to new(0, svalve_naive, undefined).'],['fun','sbroker','svalve:new/1','Equivalent to new(Time, svalve_naive, undefined).'],['fun','sbroker','svalve:new/2','Equivalent to new(0, Module, Args).'],['fun','sbroker','svalve:new/3','Returns an empty queue, V, with the Module feedbac'],['fun','sbroker','svalve:open/1','Enable the feedback loop to dequeue items from que'],['fun','sbroker','svalve:out/1','Equivalent to out(time(V), V).'],['fun','sbroker','svalve:out/2','Advances the queue, V, to time Time and removes th'],['fun','sbroker','svalve:out_r/1','Equivalent to out_r(time(V), V).'],['fun','sbroker','svalve:out_r/2','Advances the queue, V, to time Time and removes th'],['fun','sbroker','svalve:sojourn/2','Equivalent to sojourn(time(V), time(V), SojournTim'],['fun','sbroker','svalve:sojourn/3','Equivalent to sojourn(Time, Time, SojournTime, V).'],['fun','sbroker','svalve:sojourn/4','Advance time of the queue, V, to Time and signal t'],['fun','sbroker','svalve:sojourn_r/2','Equivalent to sojourn_r(time(V), time(V), SojournT'],['fun','sbroker','svalve:sojourn_r/3','Equivalent to sojourn_r(Time, Time, SojournTime, V'],['fun','sbroker','svalve:sojourn_r/4','Advance time of the queue, V, to Time and signal t'],['fun','sbroker','svalve:squeue/1','Get the internal squeue inside the queue, V.'],['fun','sbroker','svalve:squeue/2','Replace the internal squeue inside the queue, V.'],['fun','sbroker','svalve:time/1','Returns the current time, Time, of the queue, V.'],['fun','sbroker','svalve:time/2','Advances the queue, V, to time Time, without apply'],['fun','sbroker','svalve:timeout/1','Equivalent to timeout(time(V), V).'],['fun','sbroker','svalve:timeout/2','Advances the queue, V, to time Time.'],['fun','sbroker','svalve:to_list/1','Returns a list of items, List, in the queue, V.']];