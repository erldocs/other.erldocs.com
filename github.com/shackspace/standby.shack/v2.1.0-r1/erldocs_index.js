var index = [['app','standby.shack','standby.shack','[application]'],['mod','standby.shack','database','.'],['mod','standby.shack','eventSourceHandler','.'],['mod','standby.shack','jsonHandler','.'],['mod','standby.shack','light','.'],['mod','standby.shack','lightcontrol_app','.'],['mod','standby.shack','lightcontrol_sup','.'],['mod','standby.shack','mainServer','.'],['mod','standby.shack','plainTextHandler','.'],['mod','standby.shack','rawpower','.'],['mod','standby.shack','restV1handler','   rest version 1.'],['mod','standby.shack','restV2handler','   rest version 1.'],['mod','standby.shack','udpServer','.'],['fun','standby.shack','database:getAllID/0','  get all light ids.'],['fun','standby.shack','database:getID/1','  get ID(s)(fake ID(s)) which match Address.'],['fun','standby.shack','database:getPossibleState/1','  get possible states for ID.'],['fun','standby.shack','database:getRealID/1','  get real ids, based on ID(fake ID).'],['fun','standby.shack','database:getState/1','  get light state of ID(fake ID).'],['fun','standby.shack','database:init/0','  init tables.'],['fun','standby.shack','database:logPower/4','  log power state.'],['fun','standby.shack','database:updateState/2','  update the state of light ID(fake ID) in databa'],['fun','standby.shack','eventSourceHandler:info/3',[]],['fun','standby.shack','eventSourceHandler:init/3',[]],['fun','standby.shack','eventSourceHandler:terminate/3',[]],['fun','standby.shack','jsonHandler:encodePower/1','  encode power events.'],['fun','standby.shack','jsonHandler:getLight/1','  returns the current light state as a json binar'],['fun','standby.shack','jsonHandler:setLight/2','  decode a json binary string and tries to execut'],['fun','standby.shack','light:getLight/1','  get light.'],['fun','standby.shack','light:getRealLight/1','  get light state based on real id.'],['fun','standby.shack','light:setLight/2','  set light state.'],['fun','standby.shack','light:toggleLight/1','  toggle light state.'],['fun','standby.shack','light:updateLight/2',[]],['fun','standby.shack','light:updateRealLight/2','  update light state in database, based on the Re'],['fun','standby.shack','lightcontrol_sup:start_link/0','  Starts the supervisor.'],['fun','standby.shack','mainServer:addListener/1','  add an event listener.'],['fun','standby.shack','mainServer:getLight/1','  get light status.'],['fun','standby.shack','mainServer:getListener/0','  returns all listeners.'],['fun','standby.shack','mainServer:getRealLight/1','  get light state based on real id.'],['fun','standby.shack','mainServer:logPower/4','  log power state.'],['fun','standby.shack','mainServer:removeListener/1','  removes an listener.'],['fun','standby.shack','mainServer:sendEvent/1','  send an event to all regestrated listeners.'],['fun','standby.shack','mainServer:setLight/2','  set light.'],['fun','standby.shack','mainServer:start_link/0','  Starts the server.'],['fun','standby.shack','mainServer:toggleLight/1','  toggle light.'],['fun','standby.shack','mainServer:updateHttpRouter/0','  updates cowboy router.'],['fun','standby.shack','mainServer:updateRealLight/2','  update light state in database, based on the Re'],['fun','standby.shack','plainTextHandler:getLight/1','  get light state as plain text.'],['fun','standby.shack','plainTextHandler:setLight/2','  set light state.'],['fun','standby.shack','rawpower:start_link/0','  Starts the server.'],['fun','standby.shack','restV1handler:allowed_methods/2','  allow GET and PUT requests.'],['fun','standby.shack','restV1handler:applicationJsonGet/2','  application/json get handler.'],['fun','standby.shack','restV1handler:applicationJsonPut/2','  application/json put handler.'],['fun','standby.shack','restV1handler:content_types_accepted/2','  mime type specific handlers for PUT requests.'],['fun','standby.shack','restV1handler:content_types_provided/2','  mime type specific handlers, to handle GET requ'],['fun','standby.shack','restV1handler:init/3','  upgrade request to rest.'],['fun','standby.shack','restV1handler:textPlainGet/2','  plaintext get handler.'],['fun','standby.shack','restV1handler:textPlainPut/2','  plain text put handler.'],['fun','standby.shack','restV2handler:allowed_methods/2','  allow GET and PUT requests.'],['fun','standby.shack','restV2handler:applicationJsonGet/2','  application/json get handler.'],['fun','standby.shack','restV2handler:applicationJsonPut/2','  application/json put handler.'],['fun','standby.shack','restV2handler:content_types_accepted/2','  mime type specific handlers for PUT requests.'],['fun','standby.shack','restV2handler:content_types_provided/2','  mime type specific handlers, to handle GET requ'],['fun','standby.shack','restV2handler:convertURL_ID/1','  converts url path to light id.'],['fun','standby.shack','restV2handler:convertURL_ID/2',[]],['fun','standby.shack','restV2handler:init/3','  upgrade request to rest.'],['fun','standby.shack','restV2handler:textPlainGet/2','  plaintext get handler.'],['fun','standby.shack','restV2handler:textPlainPut/2','  plain text put handler.'],['fun','standby.shack','udpServer:handle_info/2','  starts a loop, to set light.'],['fun','standby.shack','udpServer:setLight/2','  set the light state based on the RealID, and Re'],['fun','standby.shack','udpServer:start_link/0','  Starts the server.']];