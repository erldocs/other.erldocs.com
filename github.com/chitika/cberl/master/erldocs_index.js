var index = [['app','cberl','cberl','[application]'],['mod','cberl','cberl',[]],['mod','cberl','cberl_app',[]],['mod','cberl','cberl_nif',[]],['mod','cberl','cberl_sup',[]],['mod','cberl','cberl_transcoder',[]],['mod','cberl','cberl_worker',[]],['fun','cberl','cberl:add/1','Equivalent to store(PoolPid, add, Key, Value, Tran'],['fun','cberl','cberl:add/1','Equivalent to add(PoolPid, Key, Exp, Value, standa'],['fun','cberl','cberl:append/1',[]],['fun','cberl','cberl:append/1','Deprecated append function which accepts an _unuse'],['fun','cberl','cberl:arithmetic/1','perform an arithmetic operation on the given key '],['fun','cberl','cberl:decr/3',[]],['fun','cberl','cberl:decr/4',[]],['fun','cberl','cberl:decr/5',[]],['fun','cberl','cberl:flush/1','flush all documents from the current bucket  Inst'],['fun','cberl','cberl:flush/1','flush all documents from the bucket  Instance lib'],['fun','cberl','cberl:foldl/3',[]],['fun','cberl','cberl:foldr/3',[]],['fun','cberl','cberl:foreach/2',[]],['fun','cberl','cberl:get/1',[]],['fun','cberl','cberl:get_and_lock/1',[]],['fun','cberl','cberl:get_and_touch/1',[]],['fun','cberl','cberl:getl/1','Get an item with a lock that has a timeout  Insta'],['fun','cberl','cberl:http/1','execute a command with the REST API  PoolPid pid '],['fun','cberl','cberl:incr/3',[]],['fun','cberl','cberl:incr/4',[]],['fun','cberl','cberl:incr/5',[]],['fun','cberl','cberl:mget/1','get the value for the given key  Instance libcouc'],['fun','cberl','cberl:mget/2',[]],['fun','cberl','cberl:mtouch/1',[]],['fun','cberl','cberl:prepend/1',[]],['fun','cberl','cberl:prepend/1','Deprecated prepend function which accepts an _unus'],['fun','cberl','cberl:remove/1','remove the value for given key  Instance libcouch'],['fun','cberl','cberl:remove_design_doc/2',[]],['fun','cberl','cberl:replace/1','Equivalent to store(PoolPid, replace, "", Key, Val'],['fun','cberl','cberl:replace/1','Equivalent to replace(PoolPid, Key, Exp, Value, st'],['fun','cberl','cberl:set/1','Equivalent to store(PoolPid, set, "", Key, Value, '],['fun','cberl','cberl:set/1','Equivalent to set(PoolPid, Key, Exp, Value, standa'],['fun','cberl','cberl:set_design_doc/3',[]],['fun','cberl','cberl:start_link/1',[]],['fun','cberl','cberl:start_link/2','Equivalent to start_link(PoolName, NumCon, "localh'],['fun','cberl','cberl:start_link/3','Equivalent to start_link(PoolName, NumCon, Host, "'],['fun','cberl','cberl:start_link/5','Equivalent to start_link(PoolName, NumCon, Host, U'],['fun','cberl','cberl:start_link/6','Create an instance of libcouchbase  hosts A list '],['fun','cberl','cberl:stop/1',[]],['fun','cberl','cberl:store/1','main store function takes care of all storing  In'],['fun','cberl','cberl:touch/1','Touch (set expiration time) on the given key  Poo'],['fun','cberl','cberl:unlock/1',[]],['fun','cberl','cberl:view/4','Query a view  PoolPid pid of connection pool  Do'],['fun','cberl','cberl_app:start/2',[]],['fun','cberl','cberl_app:stop/1',[]],['fun','cberl','cberl_nif:control/3',[]],['fun','cberl','cberl_nif:destroy/1',[]],['fun','cberl','cberl_nif:new/0',[]],['fun','cberl','cberl_sup:init/1',[]],['fun','cberl','cberl_sup:start_link/0',[]],['fun','cberl','cberl_transcoder:decode_value/1',[]],['fun','cberl','cberl_transcoder:encode_value/1',[]],['fun','cberl','cberl_transcoder:flag/1',[]],['fun','cberl','cberl_worker:start_link/1','  Starts the server.']];