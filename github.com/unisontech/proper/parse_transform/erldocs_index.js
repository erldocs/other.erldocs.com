var index = [['app','proper','proper','[application]'],['mod','proper','proper','This is the main PropEr module.'],['mod','proper','proper_fsm','This module defines the proper_fsm behaviour, usef'],['mod','proper','proper_gen','Generator subsystem and generators for basic types'],['mod','proper','proper_statem','This module defines the proper_statem behaviour, u'],['mod','proper','proper_symb','Symbolic datatypes handling functions.'],['mod','proper','proper_transformer','PropErs main parse transform.'],['mod','proper','proper_types','Type manipulation functions and predefined types.'],['mod','proper','proper_typeserver','Erlang type system - PropEr type system integratio'],['mod','proper','strip_types','A parse transform that removes all type-related an'],['fun','proper','proper:aggregate/1','Same as collect/3, but accepts a list of categorie'],['fun','proper','proper:aggregate/1','Same as collect/2, but accepts a list of categorie'],['fun','proper','proper:check/1','Same as check/2, but also accepts a list of option'],['fun','proper','proper:check/1','Re-checks a specific counterexample CExm against t'],['fun','proper','proper:check_spec/1','Same as check_spec/1, but also accepts a list of o'],['fun','proper','proper:check_spec/1','Tests the accuracy of an exported functions spec.'],['fun','proper','proper:check_specs/1','Same as check_specs/1, but also accepts a list of '],['fun','proper','proper:check_specs/1','Tests all exported, -speced functions of a module '],['fun','proper','proper:classify/1','Same as collect/2, but can accept both a single ca'],['fun','proper','proper:clean_garbage/0','Cleans up the process dictionary of all PropEr-pro'],['fun','proper','proper:collect/1','Same as collect/2, but also accepts a fun Printer '],['fun','proper','proper:collect/1','Specifies that test cases produced by this propert'],['fun','proper','proper:conjunction/1','Returns a property that is true only if all of the'],['fun','proper','proper:counterexample/0','Retrieves the last (simplest) counterexample produ'],['fun','proper','proper:counterexample/1','Same as counterexample/1, but also accepts a list '],['fun','proper','proper:counterexample/1','Equivalent to quickcheck(OuterTest, [long_result])'],['fun','proper','proper:counterexamples/0','Returns a counterexample for each failing property'],['fun','proper','proper:equals/1','A custom property that evaluates to true only if A'],['fun','proper','proper:fails/1','Specifies that we expect the property Test to fail'],['fun','proper','proper:measure/1','A function that collects numeric statistics on the'],['fun','proper','proper:module/1','Same as module/1, but also accepts a list of optio'],['fun','proper','proper:module/1','Tests all properties (i.e., all 0-arity functions '],['fun','proper','proper:numtests/1','Specifies the number N of tests to run when testin'],['fun','proper','proper:on_output/1','Specifies an output function Print to be used by P'],['fun','proper','proper:quickcheck/1','Same as quickcheck/1, but also accepts a list of o'],['fun','proper','proper:quickcheck/1','Runs PropEr on the property OuterTest.'],['fun','proper','proper:with_title/1','A predefined function that accepts an atom or stri'],['fun','proper','proper_fsm:behaviour_info/1','Specifies the callback functions that should be ex'],['fun','proper','proper_fsm:commands/1','Similar to commands/1, but generated command seque'],['fun','proper','proper_fsm:commands/1','A special PropEr type which generates random comma'],['fun','proper','proper_fsm:run_commands/1','Similar to run_commands/2, but also accepts an env'],['fun','proper','proper_fsm:run_commands/1','Evaluates a given symbolic command sequence Cmds a'],['fun','proper','proper_fsm:state_names/1','Extracts the names of the states from a given comm'],['fun','proper','proper_gen:pick/1','Generates a random instance of Type, of size Size.'],['fun','proper','proper_gen:pick/1','Equivalent to pick(Type, 10).'],['fun','proper','proper_gen:sample/1','Generates and prints one random instance of Type f'],['fun','proper','proper_gen:sample/1','Equivalent to sample(Type, 10, 20).'],['fun','proper','proper_gen:sampleshrink/1','Generates a random instance of Type, of size Size,'],['fun','proper','proper_gen:sampleshrink/1','Equivalent to sampleshrink(Type, 10).'],['fun','proper','proper_statem:behaviour_info/1','Specifies the callback functions that should be ex'],['fun','proper','proper_statem:command_names/1','Extracts the names of the commands from a given co'],['fun','proper','proper_statem:commands/1','Similar to commands/1, but generated command seque'],['fun','proper','proper_statem:commands/1','A special PropEr type which generates random comma'],['fun','proper','proper_statem:more_commands/1','Increases the expected length of command sequences'],['fun','proper','proper_statem:parallel_commands/1','Similar to parallel_commands/1, but generated comm'],['fun','proper','proper_statem:parallel_commands/1','A special PropEr type which generates parallel tes'],['fun','proper','proper_statem:run_commands/1',' Similar to run_commands/2, but also accepts an en'],['fun','proper','proper_statem:run_commands/1','Evaluates a given symbolic command sequence Cmds a'],['fun','proper','proper_statem:run_parallel_commands/1','Similar to run_parallel_commands/2, but also accep'],['fun','proper','proper_statem:run_parallel_commands/1','Runs a given parallel testcase according to the st'],['fun','proper','proper_statem:state_after/1','Returns the symbolic state after running a given c'],['fun','proper','proper_statem:zip/2','Behaves like lists:zip/2, but the input lists do n'],['fun','proper','proper_symb:defined/1','Returns true if the SymbTerm symbolic instance can'],['fun','proper','proper_symb:eval/1','Intended for use inside the property-testing code,'],['fun','proper','proper_symb:eval/1','Equivalent to eval([], SymbTerm).'],['fun','proper','proper_symb:pretty_print/1','Similar in calling convention to eval/2, but retur'],['fun','proper','proper_symb:pretty_print/1','Equivalent to pretty_print([], SymbTerm).'],['fun','proper','proper_symb:well_defined/1','An attribute which can be applied to any symbolic '],['fun','proper','proper_types:any/0','All Erlang terms (that PropEr can produce).'],['fun','proper','proper_types:arity/0','Equivalent to integer(0, 255).'],['fun','proper','proper_types:atom/0','All atoms.'],['fun','proper','proper_types:binary/0','All binaries.'],['fun','proper','proper_types:binary/1','All binaries with a byte size of Len.'],['fun','proper','proper_types:bitstring/0','All bitstrings.'],['fun','proper','proper_types:bitstring/1','All bitstrings with a bit size of Len.'],['fun','proper','proper_types:bool/0','Equivalent to boolean().'],['fun','proper','proper_types:boolean/0','The atoms true and false.'],['fun','proper','proper_types:byte/0','Equivalent to integer(0, 255).'],['fun','proper','proper_types:char/0','Equivalent to integer(0, 1114111).'],['fun','proper','proper_types:choose/1','Equivalent to integer(Low, High).'],['fun','proper','proper_types:default/1','Adds a default value, Default, to Type.'],['fun','proper','proper_types:elements/1','Equivalent to union(Choices).'],['fun','proper','proper_types:exactly/1','Singleton type consisting only of E.'],['fun','proper','proper_types:fixed_list/1','All lists whose i-th element is an instance of the'],['fun','proper','proper_types:float/0','Equivalent to float(inf, inf).'],['fun','proper','proper_types:float/1','All floats between Low and High, bounds included.'],['fun','proper','proper_types:frequency/1','Equivalent to weighted_union(Choices).'],['fun','proper','proper_types:function/1','All pure functions that map instances of ArgTypes '],['fun','proper','proper_types:function0/1','Equivalent to function(0, RetType).'],['fun','proper','proper_types:function1/1','Equivalent to function(1, RetType).'],['fun','proper','proper_types:function2/1','Equivalent to function(2, RetType).'],['fun','proper','proper_types:function3/1','Equivalent to function(3, RetType).'],['fun','proper','proper_types:function4/1','Equivalent to function(4, RetType).'],['fun','proper','proper_types:int/0','Small integers (bound by the current value of the '],['fun','proper','proper_types:integer/0','Equivalent to integer(inf, inf).'],['fun','proper','proper_types:integer/1','All integers between Low and High, bounds included'],['fun','proper','proper_types:largeint/0','Equivalent to integer().'],['fun','proper','proper_types:list/0','Equivalent to list(any()).'],['fun','proper','proper_types:list/1','All lists containing elements of type ElemType.'],['fun','proper','proper_types:loose_tuple/1','Tuples whose elements are all of type ElemType.'],['fun','proper','proper_types:nat/0','Small non-negative integers (bound by the current '],['fun','proper','proper_types:neg_integer/0','Equivalent to integer(inf, -1).'],['fun','proper','proper_types:non_empty/1','This is a predefined constraint that can be applie'],['fun','proper','proper_types:non_neg_float/0','Equivalent to float(0.0, inf).'],['fun','proper','proper_types:non_neg_integer/0','Equivalent to integer(0, inf).'],['fun','proper','proper_types:noshrink/1','Creates a new type which is equivalent to Type, bu'],['fun','proper','proper_types:number/0','Equivalent to union([integer(), float()]).'],['fun','proper','proper_types:oneof/1','Equivalent to union(Choices).'],['fun','proper','proper_types:orderedlist/1','All sorted lists containing elements of type ElemT'],['fun','proper','proper_types:parameter/1','Equivalent to parameter(Parameter, undefined).'],['fun','proper','proper_types:parameter/1','Returns the value associated with Parameter, or De'],['fun','proper','proper_types:pos_integer/0','Equivalent to integer(1, inf).'],['fun','proper','proper_types:range/1','Equivalent to integer(Low, High).'],['fun','proper','proper_types:real/0','Equivalent to float().'],['fun','proper','proper_types:resize/1','Overrides the size parameter used when generating '],['fun','proper','proper_types:return/1','Equivalent to exactly(E).'],['fun','proper','proper_types:shrink_list/1','A type that generates exactly the list List.'],['fun','proper','proper_types:string/0','Equivalent to list(char()).'],['fun','proper','proper_types:term/0','Equivalent to any().'],['fun','proper','proper_types:timeout/0','Equivalent to union([non_neg_integer() | infinity]'],['fun','proper','proper_types:tuple/0','Equivalent to loose_tuple(any()).'],['fun','proper','proper_types:tuple/1','All tuples whose i-th element is an instance of th'],['fun','proper','proper_types:union/1','The union of all types in ListOfTypes.'],['fun','proper','proper_types:vector/1','All lists of length Len containing elements of typ'],['fun','proper','proper_types:weighted_default/1','A specialization of default/2, where Default and T'],['fun','proper','proper_types:weighted_union/1','A specialization of union/1, where each type in Li'],['fun','proper','proper_types:with_parameter/1','Associates the atom key Parameter with the value V'],['fun','proper','proper_types:with_parameters/1','Similar to with_parameter/3, but accepts a list of'],['fun','proper','proper_types:wunion/1','Equivalent to weighted_union(FreqChoices).'],['fun','proper','proper_typeserver:demo_is_instance/1','Checks if Term is a valid instance of native type '],['fun','proper','proper_typeserver:demo_translate_type/1','Translates the native type expression TypeExpr (wh']];