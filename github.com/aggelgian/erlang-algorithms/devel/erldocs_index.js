var index = [['app','erlang-algorithms','erlang-algorithms','[application]'],['mod','erlang-algorithms','a_star','A* Algorithm.'],['mod','erlang-algorithms','bfs','BFS Algorithm.'],['mod','erlang-algorithms','dfs','DFS Algorithm.'],['mod','erlang-algorithms','dijkstra','Dijkstras Algorithm.'],['mod','erlang-algorithms','doc',[]],['mod','erlang-algorithms','edmonds_karp','Edmonds-Karp / Ford-Fulkerson Algorithms.'],['mod','erlang-algorithms','graph','Directed / Undirected Graphs.'],['mod','erlang-algorithms','graph_lib','Library Functions for Graph Algorithms.'],['mod','erlang-algorithms','heap','Min-Heap, Max-Heap for Priority Queues.'],['mod','erlang-algorithms','kruskal','Kruskal Algorithm.'],['mod','erlang-algorithms','union_find','Union / Find.'],['fun','erlang-algorithms','a_star:run/1','Runs the A* algorithm on a graph Graph  with Root'],['fun','erlang-algorithms','bfs:run/1','Runs the BFS algorithm on a graph Graph  with Roo'],['fun','erlang-algorithms','dfs:run/1','Runs the DFS algorithm on a graph Graph  with Roo'],['fun','erlang-algorithms','dijkstra:run/1','Runs the Dijkstra algorithm on a graph Graph  wit'],['fun','erlang-algorithms','doc:make_doc/0',[]],['fun','erlang-algorithms','edmonds_karp:run/1','Runs the Edmonds-Karp or Ford-Fulkerson algorithm'],['fun','erlang-algorithms','graph:add_edge/1','Add an edge to a weighted graph.'],['fun','erlang-algorithms','graph:add_edge/1','Add an edge to an unweighted graph.'],['fun','erlang-algorithms','graph:add_vertex/1','Add a vertex to a graph.'],['fun','erlang-algorithms','graph:del_edge/1','Delete an edge from a graph.'],['fun','erlang-algorithms','graph:del_graph/1','Delete a graph.'],['fun','erlang-algorithms','graph:edge_weight/1','Return the weight of an edge.'],['fun','erlang-algorithms','graph:edges/1','Return a list of the edges of a graph.'],['fun','erlang-algorithms','graph:edges_with_weights/1','Return a list of the edges of a graph along with t'],['fun','erlang-algorithms','graph:empty/1','Create a new empty graph.'],['fun','erlang-algorithms','graph:from_file/1','Create a new graph from a file using a custo behav'],['fun','erlang-algorithms','graph:from_file/1','Create a new graph from a file using the default b'],['fun','erlang-algorithms','graph:graph_type/1','Return the type of the graph.'],['fun','erlang-algorithms','graph:num_of_edges/1','Return the number of edges in a graph.'],['fun','erlang-algorithms','graph:num_of_vertices/1','Return the number of vertices in a graph.'],['fun','erlang-algorithms','graph:out_neighbours/1','Return a list of the out neighbours of a vertex.'],['fun','erlang-algorithms','graph:pprint/1','Pretty print a graph.'],['fun','erlang-algorithms','graph:vertices/1','Return a list of the vertices of a graph.'],['fun','erlang-algorithms','graph_lib:reconstruct_all_paths/1','Reconstruct all the path information from a graph '],['fun','erlang-algorithms','graph_lib:reconstruct_flow/1','Reconstruct the flow information for a flow algort'],['fun','erlang-algorithms','heap:delete/1','Deletes a heap.'],['fun','erlang-algorithms','heap:from_list/1','Create a heap from a list of terms.'],['fun','erlang-algorithms','heap:heap_size/1','Returns the number of elements contained in a heap'],['fun','erlang-algorithms','heap:insert/1','Add a new element to a heap.'],['fun','erlang-algorithms','heap:is_empty/1','Checks whether a heap is empty or not.'],['fun','erlang-algorithms','heap:max/1','Returns the element of a max heap with the maximum'],['fun','erlang-algorithms','heap:min/1','Returns the element of a min heap with the minimum'],['fun','erlang-algorithms','heap:new/1','Creates an empty heap.'],['fun','erlang-algorithms','heap:take_max/1','Removes and returns the maximum priority element o'],['fun','erlang-algorithms','heap:take_min/1','Removes and returns the minimum priority element o'],['fun','erlang-algorithms','heap:to_list/1','Returns a list of the terms in a heap.'],['fun','erlang-algorithms','heap:update/1','Change the priority of an element.'],['fun','erlang-algorithms','kruskal:run/1','Runs the Kruskal algorithm on a graph Graph.'],['fun','erlang-algorithms','union_find:delete/1','Delete a forest.'],['fun','erlang-algorithms','union_find:find/1','Find the parent element of the set which a term be'],['fun','erlang-algorithms','union_find:number_of_sets/1','Return the number of sets that exist in a forest.'],['fun','erlang-algorithms','union_find:pprint/1','Pretty print the sets of a forest.'],['fun','erlang-algorithms','union_find:set_elements/1','Return a list of all the elements of the set  whi'],['fun','erlang-algorithms','union_find:set_size/1','Return the size of the set which an element belong'],['fun','erlang-algorithms','union_find:singletons_from_list/1','Create a forest of singleton sets from a list of t'],['fun','erlang-algorithms','union_find:singletons_from_list/1','Create a forest of singleton sets from a list of t'],['fun','erlang-algorithms','union_find:union/1','Union of two sets.']];