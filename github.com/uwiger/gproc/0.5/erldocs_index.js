var index = [['app','gproc','gproc','[application]'],['mod','gproc','gproc','Extended process registry  This module implements'],['mod','gproc','gproc_app',[]],['mod','gproc','gproc_bcast','Gproc message broadcast server  This module is us'],['mod','gproc','gproc_dist','Extended process registry.'],['mod','gproc','gproc_info',[]],['mod','gproc','gproc_init',[]],['mod','gproc','gproc_lib','Extended process registry.'],['mod','gproc','gproc_monitor','  This module implements a notification system fo'],['mod','gproc','gproc_pool','Load balancing functions based on Gproc.'],['mod','gproc','gproc_ps','Gproc Publish/Subscribe patterns  This module imp'],['mod','gproc','gproc_pt','Parse transform utility for gproc users.'],['mod','gproc','gproc_sup',[]],['fun','gproc','gproc:add_global_aggr_counter/1','Registers a global (unique) aggregated counter.'],['fun','gproc','gproc:add_global_counter/2','Registers a global (non-unique) counter.'],['fun','gproc','gproc:add_global_name/1','Registers a global (unique) name.'],['fun','gproc','gproc:add_global_property/2','Registers a global (non-unique) property.'],['fun','gproc','gproc:add_local_aggr_counter/1','Registers a local (unique) aggregated counter.'],['fun','gproc','gproc:add_local_counter/2','Registers a local (non-unique) counter.'],['fun','gproc','gproc:add_local_name/1','Registers a local (unique) name.'],['fun','gproc','gproc:add_local_property/2','Registers a local (non-unique) property.'],['fun','gproc','gproc:add_shared_local_counter/2','Registers a local shared (unique) counter.'],['fun','gproc','gproc:audit_process/1',[]],['fun','gproc','gproc:await/1','Wait for a name or aggregated counter to be regist'],['fun','gproc','gproc:await/1','Wait for a name or aggregated counter to be regist'],['fun','gproc','gproc:await/1','Equivalent to await(Key, infinity).'],['fun','gproc','gproc:bcast/1','Sends a message to processes corresponding to Key '],['fun','gproc','gproc:bcast/1','Equivalent to bcast(nodes(), Key, Msg).'],['fun','gproc','gproc:cancel_wait/1','Cancels a previous call to nb_wait/2.'],['fun','gproc','gproc:cancel_wait/1','Cancels a previous call to nb_wait/1.'],['fun','gproc','gproc:cancel_wait_or_monitor/1',[]],['fun','gproc','gproc:default/1',[]],['fun','gproc','gproc:demonitor/1','Remove a monitor on a registered name  This funct'],['fun','gproc','gproc:first/1','Behaves as ets:first(Tab) for a given type of regi'],['fun','gproc','gproc:get_attribute/2','Get the attribute value of Attr associated with Ke'],['fun','gproc','gproc:get_attribute/2','Get attribute value of Attr associated with Key fo'],['fun','gproc','gproc:get_attribute_shared/2','Get the attribute value of Attr associated with th'],['fun','gproc','gproc:get_attributes/1','Returns the list of attributes associated with the'],['fun','gproc','gproc:get_attributes/1','Get attributes associated with registration.'],['fun','gproc','gproc:get_env/1','Read an environment value, potentially cached as a'],['fun','gproc','gproc:get_env/1','Equivalent to get_env(Scope, App, Key, [app_env]).'],['fun','gproc','gproc:get_set_env/1','Fetch and cache an environment value, if not alrea'],['fun','gproc','gproc:get_set_env/1','Equivalent to get_set_env(Scope, App, Key, [app_en'],['fun','gproc','gproc:get_value/1','Reads the value stored with a key registered to th'],['fun','gproc','gproc:get_value/2','Reads the value stored with a key registered to th'],['fun','gproc','gproc:get_value_shared/1','Reads the value stored with a shared key.'],['fun','gproc','gproc:give_away/1','Atomically transfers the key From to the process i'],['fun','gproc','gproc:goodbye/0','Unregister all items of the calling process and in'],['fun','gproc','gproc:i/0','Similar to the built-in shell command i() but inse'],['fun','gproc','gproc:info/1','Similar to process_info(Pid, Item), but with addit'],['fun','gproc','gproc:info/1','Similar to process_info(Pid) but with additional g'],['fun','gproc','gproc:last/1','Behaves as ets:last(Tab) for a given type of regis'],['fun','gproc','gproc:lookup_global_aggr_counter/1','Lookup a global (unique) aggregated counter and re'],['fun','gproc','gproc:lookup_global_counters/1','Look up all global (non-unique) instances of a giv'],['fun','gproc','gproc:lookup_global_name/1','Lookup a global unique name.'],['fun','gproc','gproc:lookup_global_properties/1','Look up all global (non-unique) instances of a giv'],['fun','gproc','gproc:lookup_local_aggr_counter/1','Lookup a local (unique) aggregated counter and ret'],['fun','gproc','gproc:lookup_local_counters/1','Look up all local (non-unique) instances of a give'],['fun','gproc','gproc:lookup_local_name/1','Lookup a local unique name.'],['fun','gproc','gproc:lookup_local_properties/1','Look up all local (non-unique) instances of a give'],['fun','gproc','gproc:lookup_pid/1','Lookup the Pid stored with a key.'],['fun','gproc','gproc:lookup_pids/1','Returns a list of pids with the published key Key.'],['fun','gproc','gproc:lookup_value/1','Lookup the value stored with a key.'],['fun','gproc','gproc:lookup_values/1','Retrieve the {Pid,Value} pairs corresponding to Ke'],['fun','gproc','gproc:monitor/1','monitor a registered name  monitor(Key, info) wor'],['fun','gproc','gproc:monitor/1','Equivalent to monitor(Key, info).'],['fun','gproc','gproc:mreg/1','Register multiple {Key,Value} pairs of a given typ'],['fun','gproc','gproc:munreg/1','Unregister multiple Key items of a given type and '],['fun','gproc','gproc:nb_wait/1','Wait for a name or aggregated counter to be regist'],['fun','gproc','gproc:nb_wait/1','Wait for a name or aggregated counter to be regist'],['fun','gproc','gproc:next/1','Behaves as ets:next(Tab,Key) for a given type of r'],['fun','gproc','gproc:prev/1','Behaves as ets:prev(Tab,Key) for a given type of r'],['fun','gproc','gproc:reg/1','Register a name or property for the current proces'],['fun','gproc','gproc:reg/1','Register a name or property for the current proces'],['fun','gproc','gproc:reg/1','Equivalent to reg(Key, default(Key), []).'],['fun','gproc','gproc:reg_or_locate/1','Spawn a process with a registered name, or return '],['fun','gproc','gproc:reg_or_locate/1','Try registering a unique name, or return existing '],['fun','gproc','gproc:reg_or_locate/1','Equivalent to reg_or_locate(Key, default(Key)).'],['fun','gproc','gproc:reg_shared/1','Register a resource, but dont tie it to a particu'],['fun','gproc','gproc:reg_shared/1','Register a resource, but dont tie it to a particu'],['fun','gproc','gproc:reg_shared/3',[]],['fun','gproc','gproc:register_name/1','Behaviour support callback.'],['fun','gproc','gproc:reset_counter/1','Reads and resets a counter in a "thread-safe" way.'],['fun','gproc','gproc:select/1','Like select/2 but returns Limit objects at a time.'],['fun','gproc','gproc:select/1','Perform a select operation with limited context on'],['fun','gproc','gproc:select/1','Perform a select operation on the process registry'],['fun','gproc','gproc:select_count/1','Perform a select_count operation on the process re'],['fun','gproc','gproc:select_count/1','Equivalent to select_count(all, Pat).'],['fun','gproc','gproc:send/1','Sends a message to the process, or processes, corr'],['fun','gproc','gproc:set_attributes/1','Add/modify {Key, Value} attributes associated with'],['fun','gproc','gproc:set_attributes_shared/1','Add/modify {Key, Value} attributes associated with'],['fun','gproc','gproc:set_env/1','Updates the cached value as well as underlying env'],['fun','gproc','gproc:set_value/1','Sets the value of the registration given by Key.'],['fun','gproc','gproc:set_value_shared/1','Sets the value of the shared registration given by'],['fun','gproc','gproc:start_link/0','Starts the gproc server.'],['fun','gproc','gproc:table/0','Equivalent to table({all, all}).'],['fun','gproc','gproc:table/1','QLC table generator for the gproc registry.'],['fun','gproc','gproc:table/1','Equivalent to table(Context, []).'],['fun','gproc','gproc:unreg/1','Unregister a name or property.'],['fun','gproc','gproc:unreg_shared/1','Unregister a shared resource.'],['fun','gproc','gproc:unregister_name/1','Equivalent to unreg / 1.'],['fun','gproc','gproc:update_counter/1','Updates the counter registered as Key for the curr'],['fun','gproc','gproc:update_counter/3',[]],['fun','gproc','gproc:update_counters/1','Update a list of counters.'],['fun','gproc','gproc:update_shared_counter/1','Updates the shared counter registered as Key.'],['fun','gproc','gproc:where/1','Returns the pid registered as Key.'],['fun','gproc','gproc:whereis_name/1','Equivalent to where / 1.'],['fun','gproc','gproc:wide_await/1','Wait for a local name to be registered on any of N'],['fun','gproc','gproc_app:start/0',[]],['fun','gproc','gproc_app:start/2',[]],['fun','gproc','gproc_app:stop/1',[]],['fun','gproc','gproc_bcast:code_change/3',[]],['fun','gproc','gproc_bcast:handle_call/3',[]],['fun','gproc','gproc_bcast:handle_cast/2',[]],['fun','gproc','gproc_bcast:handle_info/2',[]],['fun','gproc','gproc_bcast:init/1',[]],['fun','gproc','gproc_bcast:start_link/0',[]],['fun','gproc','gproc_bcast:terminate/2',[]],['fun','gproc','gproc_dist:code_change/4',[]],['fun','gproc','gproc_dist:demonitor/2',[]],['fun','gproc','gproc_dist:elected/2',[]],['fun','gproc','gproc_dist:elected/3',[]],['fun','gproc','gproc_dist:from_leader/3',[]],['fun','gproc','gproc_dist:get_leader/0','Returns the node of the current gproc leader.'],['fun','gproc','gproc_dist:give_away/2',[]],['fun','gproc','gproc_dist:handle_call/4',[]],['fun','gproc','gproc_dist:handle_cast/3',[]],['fun','gproc','gproc_dist:handle_DOWN/3',[]],['fun','gproc','gproc_dist:handle_info/2',[]],['fun','gproc','gproc_dist:handle_info/3',[]],['fun','gproc','gproc_dist:handle_leader_call/4',[]],['fun','gproc','gproc_dist:handle_leader_cast/3',[]],['fun','gproc','gproc_dist:init/1',[]],['fun','gproc','gproc_dist:leader_call/1',[]],['fun','gproc','gproc_dist:leader_cast/1',[]],['fun','gproc','gproc_dist:monitor/2',[]],['fun','gproc','gproc_dist:mreg/2',[]],['fun','gproc','gproc_dist:munreg/2',[]],['fun','gproc','gproc_dist:reg/1',[]],['fun','gproc','gproc_dist:reg/3','      Class = n  - unique name            | p  -'],['fun','gproc','gproc_dist:reg_or_locate/3',[]],['fun','gproc','gproc_dist:reg_shared/3',[]],['fun','gproc','gproc_dist:reset_counter/1',[]],['fun','gproc','gproc_dist:set_attributes/2',[]],['fun','gproc','gproc_dist:set_attributes_shared/2',[]],['fun','gproc','gproc_dist:set_value/2',[]],['fun','gproc','gproc_dist:set_value_shared/2',[]],['fun','gproc','gproc_dist:start_link/0',[]],['fun','gproc','gproc_dist:start_link/1',[]],['fun','gproc','gproc_dist:surrendered/3',[]],['fun','gproc','gproc_dist:sync/0','Synchronize with the gproc leader.'],['fun','gproc','gproc_dist:terminate/2',[]],['fun','gproc','gproc_dist:unreg/1',[]],['fun','gproc','gproc_dist:unreg_shared/1',[]],['fun','gproc','gproc_dist:update_counter/3',[]],['fun','gproc','gproc_dist:update_counters/1',[]],['fun','gproc','gproc_dist:update_shared_counter/2',[]],['fun','gproc','gproc_info:i/0',[]],['fun','gproc','gproc_init:hard_reset/0',[]],['fun','gproc','gproc_init:soft_reset/0',[]],['fun','gproc','gproc_lib:add_monitor/4',[]],['fun','gproc','gproc_lib:await/3',[]],['fun','gproc','gproc_lib:dbg/1',[]],['fun','gproc','gproc_lib:decrement_resource_count/2',[]],['fun','gproc','gproc_lib:do_set_counter_value/3',[]],['fun','gproc','gproc_lib:do_set_value/3',[]],['fun','gproc','gproc_lib:ensure_monitor/2',[]],['fun','gproc','gproc_lib:followers/1',[]],['fun','gproc','gproc_lib:insert_attr/4',[]],['fun','gproc','gproc_lib:insert_many/1',[]],['fun','gproc','gproc_lib:insert_reg/1',[]],['fun','gproc','gproc_lib:insert_reg/5',[]],['fun','gproc','gproc_lib:monitors/1',[]],['fun','gproc','gproc_lib:notify/2',[]],['fun','gproc','gproc_lib:notify/3',[]],['fun','gproc','gproc_lib:remove_many/4',[]],['fun','gproc','gproc_lib:remove_monitor/3',[]],['fun','gproc','gproc_lib:remove_monitor_pid/2',[]],['fun','gproc','gproc_lib:remove_monitors/3',[]],['fun','gproc','gproc_lib:remove_reg/3',[]],['fun','gproc','gproc_lib:remove_reg/4',[]],['fun','gproc','gproc_lib:remove_reverse_mapping/3',[]],['fun','gproc','gproc_lib:remove_reverse_mapping/4',[]],['fun','gproc','gproc_lib:remove_wait/4',[]],['fun','gproc','gproc_lib:standbys/1',[]],['fun','gproc','gproc_lib:update_aggr_counter/3',[]],['fun','gproc','gproc_lib:update_counter/3',[]],['fun','gproc','gproc_lib:valid_opts/2',[]],['fun','gproc','gproc_monitor:start_link/0','  Starts the server.'],['fun','gproc','gproc_monitor:subscribe/1','  Subscribe to registration events for a certain '],['fun','gproc','gproc_monitor:unsubscribe/1','  Unsubscribe from registration events for a cert'],['fun','gproc','gproc_pool:active_workers/1','Return a list of currently connected workers in th'],['fun','gproc','gproc_pool:add_worker/1','Assign a worker name to a given slot in the pool, '],['fun','gproc','gproc_pool:add_worker/1','Assign a worker name to the pool, returning the wo'],['fun','gproc','gproc_pool:claim/2','Equivalent to claim(Pool, F, nowait).'],['fun','gproc','gproc_pool:claim/3','Picks the first available worker in the pool and a'],['fun','gproc','gproc_pool:connect_worker/1','Connect the current process to Name in Pool.'],['fun','gproc','gproc_pool:defined_workers/1','Return a list of added workers in the pool.'],['fun','gproc','gproc_pool:delete/1','Delete an existing pool.'],['fun','gproc','gproc_pool:disconnect_worker/2','Disconnect the current process from Name in Pool.'],['fun','gproc','gproc_pool:force_delete/1','Forcibly remove a pool, terminating all active wor'],['fun','gproc','gproc_pool:log/1','Update a counter associated with a worker name.'],['fun','gproc','gproc_pool:new/1','Create a new pool.'],['fun','gproc','gproc_pool:new/1','Equivalent to new(Pool, round_robin, []).'],['fun','gproc','gproc_pool:pick/1','Pick a worker from the pool based on Value.'],['fun','gproc','gproc_pool:pick/1','Pick a worker from the pool given the pools load-'],['fun','gproc','gproc_pool:pick_worker/1','Pick a worker pid from the pool given the pools l'],['fun','gproc','gproc_pool:pick_worker/1','Pick a worker pid from the pool given the pools l'],['fun','gproc','gproc_pool:ptest/4',[]],['fun','gproc','gproc_pool:randomize/1','Randomizes the "next" pointer for the pool.'],['fun','gproc','gproc_pool:remove_worker/1','Remove a previously added worker.'],['fun','gproc','gproc_pool:setup_test_pool/4',[]],['fun','gproc','gproc_pool:test_run0/2',[]],['fun','gproc','gproc_pool:whereis_worker/1','Look up the pid of a connected worker.'],['fun','gproc','gproc_pool:worker_id/2','Return the unique gproc name corresponding to a na'],['fun','gproc','gproc_pool:worker_pool/1','Return a list of slots and/or named workers in the'],['fun','gproc','gproc_ps:change_cond/1','Change the condition specification of an existing '],['fun','gproc','gproc_ps:create_single/1','Creates a single-shot subscription entry for Event'],['fun','gproc','gproc_ps:delete_single/1','Deletes the single-shot subscription for Event.'],['fun','gproc','gproc_ps:disable_single/1','Disables the single-shot subscription for Event.'],['fun','gproc','gproc_ps:enable_single/1','Enables the single-shot subscription for Event.'],['fun','gproc','gproc_ps:list_singles/1','Lists all single-shot subscribers of Event, togeth'],['fun','gproc','gproc_ps:list_subs/1','List the pids of all processes subscribing to Even'],['fun','gproc','gproc_ps:notify_single_if_true/1','Create/enable a single subscription for event; not'],['fun','gproc','gproc_ps:publish/1','Publish the message Msg to all subscribers of Even'],['fun','gproc','gproc_ps:publish_cond/1','Publishes the message Msg to conditional subscribe'],['fun','gproc','gproc_ps:subscribe/1','Subscribe to events of type Event'],['fun','gproc','gproc_ps:subscribe_cond/1','Subscribe conditionally to events of type Event'],['fun','gproc','gproc_ps:tell_singles/1','Publish Msg to all single-shot subscribers of Even'],['fun','gproc','gproc_ps:unsubscribe/1','Remove subscribtion created using subscribe(Scope,'],['fun','gproc','gproc_pt:parse_transform/2',[]],['fun','gproc','gproc_sup:init/1','The main GPROC supervisor.'],['fun','gproc','gproc_sup:start_link/1',[]]];