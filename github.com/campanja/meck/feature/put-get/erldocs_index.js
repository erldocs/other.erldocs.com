var index = [['app','meck','meck','[application]'],['mod','meck','meck','Module mocking library for Erlang.'],['mod','meck','meck_mod','Module wrangling helper functions.'],['fun','meck','meck:called/1','Returns whether Mod:Func has been called with Args'],['fun','meck','meck:delete/1','Deletes an expectation.'],['fun','meck','meck:exception/2','Throws an expected exception inside an expect fun.'],['fun','meck','meck:expect/1','Adds an expectation with the supplied arity and re'],['fun','meck','meck:expect/1','Add expectation for a function Func to the mocked '],['fun','meck','meck:get/1',[]],['fun','meck','meck:history/1','Return the call history of the mocked module.'],['fun','meck','meck:new/1','Creates new mocked module(s).'],['fun','meck','meck:new/1','Equivalent to new(Mod, []).'],['fun','meck','meck:passthrough/1','Calls the original function (if existing) inside a'],['fun','meck','meck:put/2',[]],['fun','meck','meck:unload/0','Unloads all mocked modules from memory.'],['fun','meck','meck:unload/1','Unload a mocked module or a list of mocked modules'],['fun','meck','meck:validate/1','Validate the state of the mock module(s).'],['fun','meck','meck_mod:abstract_code/1',[]],['fun','meck','meck_mod:beam_file/1',[]],['fun','meck','meck_mod:compile_and_load_forms/1',[]],['fun','meck','meck_mod:compile_and_load_forms/1',[]],['fun','meck','meck_mod:compile_options/1',[]],['fun','meck','meck_mod:rename_module/1',[]]];