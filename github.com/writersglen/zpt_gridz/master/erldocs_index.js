var index = [['app','zpt_gridz','zpt_gridz','[application]'],['mod','zpt_gridz','clipz','Dummy content to support design of html grids.'],['mod','zpt_gridz','gridz',[]],['mod','zpt_gridz','panelz','A panel defines an area or "block" of content on a'],['mod','zpt_gridz','rowz','Helper functions for zpt_gridz.'],['mod','zpt_gridz','zpt_gridz','Grid editing functions.'],['mod','zpt_gridz','zpt_gridz_app','NOTE: zpt_gridz is inspired by and uses code based'],['mod','zpt_gridz','zpt_gridz_scratchpad','Store work-in-progress grid edits.'],['mod','zpt_gridz','zpt_gridz_store','Associates key (Page_ID) with process that holds t'],['mod','zpt_gridz','zpt_gridz_sup','Supervisor for zpt_gridz.'],['fun','zpt_gridz','clipz:content/1','Interpret dummy content.'],['fun','zpt_gridz','clipz:dummy_article/1','Return dummy article as html.'],['fun','zpt_gridz','clipz:dummy_box/1','Return dummy boxed item as html.'],['fun','zpt_gridz','clipz:dummy_clip/1','Return dummy text clip as html.'],['fun','zpt_gridz','clipz:dummy_footer/1','Return dummy footer as html.'],['fun','zpt_gridz','clipz:dummy_id/1','Return panel id as html.'],['fun','zpt_gridz','clipz:dummy_masthead/1','Return dummy masthead as html.'],['fun','zpt_gridz','clipz:dummy_nav/1','Return dummy nav menu.'],['fun','zpt_gridz','clipz:dummy_param/1','Return valid dummy tag.'],['fun','zpt_gridz','clipz:dummy_pic/1','Return dummy image as html.'],['fun','zpt_gridz','clipz:dummy_squib/1','Return short dummy text squib as html.'],['fun','zpt_gridz','clipz:spaces/1','Return binary string of N spaces.'],['fun','zpt_gridz','gridz:clone/1','Clone a grid with a new page_id.'],['fun','zpt_gridz','gridz:delete_row/1','Delete row.'],['fun','zpt_gridz','gridz:dimensions/1','Report number of rows and panels.'],['fun','zpt_gridz','gridz:dummy_clip/1','Update dummy content; valid tokens: "id", "masthea'],['fun','zpt_gridz','gridz:fixed/1','Configure fixed grid (See Twitter Bootstrap for de'],['fun','zpt_gridz','gridz:fluid/1','Configure fluid grid (See Twitter Bootstrap for de'],['fun','zpt_gridz','gridz:gen_id/0','Generate a unique ids.'],['fun','zpt_gridz','gridz:get_body/1','Return body.'],['fun','zpt_gridz','gridz:get_created/1','given grid, return date and time created.'],['fun','zpt_gridz','gridz:get_site_id/1','Given grid, return site_id.'],['fun','zpt_gridz','gridz:get_width/1','given grid, return width.'],['fun','zpt_gridz','gridz:merge/1','Merge adjacent panels.'],['fun','zpt_gridz','gridz:new/1','Generate default grid; one row, N panels where N ='],['fun','zpt_gridz','gridz:new/1','Generate default grid.'],['fun','zpt_gridz','gridz:partition/1','Partition a panel in grid into two columns; first '],['fun','zpt_gridz','gridz:put_site_id/1','Update site id.'],['fun','zpt_gridz','gridz:signature/1','Return signature of grid; e.g.'],['fun','zpt_gridz','gridz:stack/1','Stack one or more  new panels onto an existing pan'],['fun','zpt_gridz','gridz:subdivide/1','Subdivide a column.'],['fun','zpt_gridz','gridz:test_grid/0','Generate test grid.'],['fun','zpt_gridz','gridz:test_grid_as_html/0','Generate test grid as html.'],['fun','zpt_gridz','gridz:test_grid_as_iolist/0','Generate test grid as iolist.'],['fun','zpt_gridz','gridz:to_html/1','Render grid to html.'],['fun','zpt_gridz','gridz:to_iolist/1','Render grid as I/O list.'],['fun','zpt_gridz','gridz:update_panel_id/1','Update a panel ID.'],['fun','zpt_gridz','panelz:available/1','Return number of width units available for expansi'],['fun','zpt_gridz','panelz:confirm/1','Verify identity of panel.'],['fun','zpt_gridz','panelz:create_panel/0','Create default panel.'],['fun','zpt_gridz','panelz:create_panel/1','If space available, create panel data structure, i'],['fun','zpt_gridz','panelz:create_panel/1','Create panel with id and span.'],['fun','zpt_gridz','panelz:create_panel/1','Create panel with defined id.'],['fun','zpt_gridz','panelz:display/1','Display panel with dummy content.'],['fun','zpt_gridz','panelz:edit_dummy_content/1','If panel verified, update dummy content.'],['fun','zpt_gridz','panelz:edit_mfa/1','If panel verified, update content function.'],['fun','zpt_gridz','panelz:edit_offset/1','If panel verified, edit offset.'],['fun','zpt_gridz','panelz:edit_span/1','If panel verified, update span.'],['fun','zpt_gridz','panelz:edit_width/1','If panel verified, update panel width.'],['fun','zpt_gridz','panelz:get_class/1','Return css class.'],['fun','zpt_gridz','panelz:get_id/1','Return panel id.'],['fun','zpt_gridz','panelz:get_mfa/1','Return content function.'],['fun','zpt_gridz','panelz:get_offset/1','Return panel offset.'],['fun','zpt_gridz','panelz:get_record_type/1','Return record type.'],['fun','zpt_gridz','panelz:get_span/1','Return span.'],['fun','zpt_gridz','panelz:get_width/1','If panel verified, return total panel width (span '],['fun','zpt_gridz','panelz:get_width/1','Return width of panel (span + offset).'],['fun','zpt_gridz','panelz:get_width_spec/1','If panel is varified, return span and offset.'],['fun','zpt_gridz','panelz:get_width_spec/1','Return span and offset of panel.'],['fun','zpt_gridz','panelz:i_am/1','Display panel id.'],['fun','zpt_gridz','panelz:is_panel/1','Return true if record is a panel.'],['fun','zpt_gridz','panelz:is_width_spec_valid/1','Return true if Span greater than 0 and Offset grea'],['fun','zpt_gridz','panelz:its_me/1','Return true if ID matches id of panel.'],['fun','zpt_gridz','panelz:put_class/1','Store panel class.'],['fun','zpt_gridz','panelz:put_dummy_content/1','Update dummy content function.'],['fun','zpt_gridz','panelz:put_id/1','Store panel ID.'],['fun','zpt_gridz','panelz:put_mfa/1','Update content function.'],['fun','zpt_gridz','panelz:put_offset/1','Update offset.'],['fun','zpt_gridz','panelz:put_span/1','Update span.'],['fun','zpt_gridz','panelz:put_width/1','Unconditionally update panel width.'],['fun','zpt_gridz','panelz:spaces/1','Return binary string of N spaces.'],['fun','zpt_gridz','panelz:to_html/1','Format panel as html.'],['fun','zpt_gridz','panelz:to_iolist/1','Format grid as i/o list.'],['fun','zpt_gridz','panelz:update_class/1','If panel verified, update class.'],['fun','zpt_gridz','panelz:update_id/1','If panel verified, update panel ID.'],['fun','zpt_gridz','rowz:create_row/1','Create row with one panel; instantiate panel with '],['fun','zpt_gridz','rowz:create_row/1','Create row with one panel; instantiate panel with '],['fun','zpt_gridz','rowz:create_row/1','Create default row with one panel; instantiate pan'],['fun','zpt_gridz','rowz:delete_row/1','If row contains panel ID, delete row.'],['fun','zpt_gridz','rowz:dimensions/1','Report number of rows and panels.'],['fun','zpt_gridz','rowz:dummy_clip/1','If row contains panel with Confirm_ID, update dumm'],['fun','zpt_gridz','rowz:fixed/1','Configure row as "fixed" (See Twitter Bootstrap fo'],['fun','zpt_gridz','rowz:fluid/1','Configure row as "fluid" (See Twitter Bootstrap fo'],['fun','zpt_gridz','rowz:get_class/1','Return class of row.'],['fun','zpt_gridz','rowz:get_panels/1','Return children of row.'],['fun','zpt_gridz','rowz:get_span/1','Return span of row.'],['fun','zpt_gridz','rowz:its_mine/1','Returns true if Panel_ID identifies a child of Rec'],['fun','zpt_gridz','rowz:merge/1','Merge adjacent panels.'],['fun','zpt_gridz','rowz:nest/1','Nest panels to create a grid.'],['fun','zpt_gridz','rowz:new/0','Create row.'],['fun','zpt_gridz','rowz:partition/1','Split panel.'],['fun','zpt_gridz','rowz:put_class/1','update class.'],['fun','zpt_gridz','rowz:put_panels/1','Store list of children in row.'],['fun','zpt_gridz','rowz:put_span/1','update span.'],['fun','zpt_gridz','rowz:signature/1','Generate a tag that represents the structure of a '],['fun','zpt_gridz','rowz:stack/1','Stack designated panel on top of a new row.'],['fun','zpt_gridz','rowz:stack/1','Stack panels to create a grid.'],['fun','zpt_gridz','rowz:stack/1','Stack panels to create a grid.'],['fun','zpt_gridz','rowz:subdivide/1','Divide a panel into N panels where N equals length'],['fun','zpt_gridz','rowz:to_html/1','Render row to html.'],['fun','zpt_gridz','rowz:to_iolist/1','Render record as I/0 list.'],['fun','zpt_gridz','rowz:update_panel_id/1','If panel in row is verfied, update id of panel.'],['fun','zpt_gridz','zpt_gridz:clone/1','Clone a grid with a new site_id.'],['fun','zpt_gridz','zpt_gridz:delete/1','Delete grid from grid library.'],['fun','zpt_gridz','zpt_gridz:delete_row/1','Delete row; will delete all subsidiary panels and '],['fun','zpt_gridz','zpt_gridz:dummy_clip/1','Update dummy content; valid tokens: "id", "masthea'],['fun','zpt_gridz','zpt_gridz:fixed/1','Configure fixed grid (See Twitter Bootstrap for de'],['fun','zpt_gridz','zpt_gridz:fluid/1','Configure fluid grid (See Twitter Bootstrap for de'],['fun','zpt_gridz','zpt_gridz:merge/1','Merge adjacent panels.'],['fun','zpt_gridz','zpt_gridz:new/1','Create new grid.'],['fun','zpt_gridz','zpt_gridz:partition/1','Partition a panel in grid into two columns; first '],['fun','zpt_gridz','zpt_gridz:review/1','Return grid.'],['fun','zpt_gridz','zpt_gridz:stack/1','Stack one or more  new panels onto an existing pan'],['fun','zpt_gridz','zpt_gridz:subdivide/1','Subdivide a column.'],['fun','zpt_gridz','zpt_gridz:to_grid_lib/1','Submit grid to grid library.'],['fun','zpt_gridz','zpt_gridz:to_html/1','Pretty print grid as html.'],['fun','zpt_gridz','zpt_gridz:to_iolist/1','Render grid as I/O list.'],['fun','zpt_gridz','zpt_gridz:to_lib/1','Save grid to grid library.'],['fun','zpt_gridz','zpt_gridz:update_panel_id/1','Update a panel ID.'],['fun','zpt_gridz','zpt_gridz_app:start/2','Start application.'],['fun','zpt_gridz','zpt_gridz_app:stop/1','Stop application.'],['fun','zpt_gridz','zpt_gridz_scratchpad:code_change/3',[]],['fun','zpt_gridz','zpt_gridz_scratchpad:create/1',[]],['fun','zpt_gridz','zpt_gridz_scratchpad:create/2',[]],['fun','zpt_gridz','zpt_gridz_scratchpad:delete/1',[]],['fun','zpt_gridz','zpt_gridz_scratchpad:fetch/1',[]],['fun','zpt_gridz','zpt_gridz_scratchpad:handle_call/3',[]],['fun','zpt_gridz','zpt_gridz_scratchpad:handle_cast/2',[]],['fun','zpt_gridz','zpt_gridz_scratchpad:handle_info/2',[]],['fun','zpt_gridz','zpt_gridz_scratchpad:init/1',[]],['fun','zpt_gridz','zpt_gridz_scratchpad:replace/2',[]],['fun','zpt_gridz','zpt_gridz_scratchpad:start_link/2',[]],['fun','zpt_gridz','zpt_gridz_scratchpad:terminate/2',[]],['fun','zpt_gridz','zpt_gridz_store:delete/1','Given PID, delete key/value from store.'],['fun','zpt_gridz','zpt_gridz_store:init/0','Initialize key/value store -spec init() -&gt; tup'],['fun','zpt_gridz','zpt_gridz_store:insert/1','Insert key/value into store.'],['fun','zpt_gridz','zpt_gridz_store:lookup/1','Given key, return PID from store.'],['fun','zpt_gridz','zpt_gridz_sup:init/1',[]],['fun','zpt_gridz','zpt_gridz_sup:start_child/2',[]],['fun','zpt_gridz','zpt_gridz_sup:start_link/0',[]]];