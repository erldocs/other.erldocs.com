var index = [['app','erlang-build-skeleton','erlang-build-skeleton','[application]'],['mod','erlang-build-skeleton','base','TEMPLATE.'],['mod','erlang-build-skeleton','base_app','Callbacks for the base application.'],['mod','erlang-build-skeleton','base_child','.'],['mod','erlang-build-skeleton','base_deps','Ensure that the relatively-installed dependencies '],['mod','erlang-build-skeleton','base_sup','Supervisor for the base application.'],['mod','erlang-build-skeleton','reloader','Erlang module for automatically reloading modified'],['fun','erlang-build-skeleton','base:start/0','Start the base server.'],['fun','erlang-build-skeleton','base:stop/0','Stop the base server.'],['fun','erlang-build-skeleton','base_app:start/2','application start callback for base.'],['fun','erlang-build-skeleton','base_app:stop/1','application stop callback for base.'],['fun','erlang-build-skeleton','base_child:start_link/0','  Starts the server.'],['fun','erlang-build-skeleton','base_deps:deps_on_path/0','List of project dependencies on the path.'],['fun','erlang-build-skeleton','base_deps:ensure/0','Ensure that the ebin and include paths for depende'],['fun','erlang-build-skeleton','base_deps:ensure/1','Ensure that all ebin and include paths for depende'],['fun','erlang-build-skeleton','base_deps:get_base_dir/0','Return the application directory for this applicat'],['fun','erlang-build-skeleton','base_deps:get_base_dir/1','Return the application directory for Module.'],['fun','erlang-build-skeleton','base_deps:local_path/1','Return an application-relative directory for this '],['fun','erlang-build-skeleton','base_deps:local_path/1','Return an application-relative directory from Modu'],['fun','erlang-build-skeleton','base_deps:new_siblings/1','Find new siblings paths relative to Module that ar'],['fun','erlang-build-skeleton','base_sup:init/1','supervisor callback.'],['fun','erlang-build-skeleton','base_sup:start_link/0','API for starting the supervisor.'],['fun','erlang-build-skeleton','base_sup:upgrade/0','Add processes if necessary.'],['fun','erlang-build-skeleton','reloader:all_changed/0','Return a list of beam modules that have changed.'],['fun','erlang-build-skeleton','reloader:code_change/3','gen_server code_change callback (trivial).'],['fun','erlang-build-skeleton','reloader:handle_call/3','gen_server callback.'],['fun','erlang-build-skeleton','reloader:handle_cast/2','gen_server callback.'],['fun','erlang-build-skeleton','reloader:handle_info/2','gen_server callback.'],['fun','erlang-build-skeleton','reloader:init/1','gen_server init, opens the server in an initial st'],['fun','erlang-build-skeleton','reloader:is_changed/1','true if the loaded module is a beam with a vsn att'],['fun','erlang-build-skeleton','reloader:reload_modules/1','code:purge/1 and code:load_file/1 the given list o'],['fun','erlang-build-skeleton','reloader:start/0','Start the reloader.'],['fun','erlang-build-skeleton','reloader:start_link/0','Start the reloader.'],['fun','erlang-build-skeleton','reloader:stop/0','Stop the reloader.'],['fun','erlang-build-skeleton','reloader:terminate/2','gen_server termination callback.']];