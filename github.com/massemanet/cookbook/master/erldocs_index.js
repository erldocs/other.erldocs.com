var index = [['app','cookbook','cookbook','[application]'],['mod','cookbook','atfl','  A tiny filter language.'],['mod','cookbook','boilerplate',[]],['mod','cookbook','boilerplate_app',[]],['mod','cookbook','boilerplate_sup',[]],['mod','cookbook','buncher','  A two-faced server.'],['mod','cookbook','call_trc',[]],['mod','cookbook','clr',[]],['mod','cookbook','error_logger_disk_log','  error_logger callback.'],['mod','cookbook','getter_module',[]],['mod','cookbook','goo','  read a file in /etc/passwd format, search for a'],['mod','cookbook','inets_demo','  a pretty much minimal example of how to start a'],['mod','cookbook','mapreduce',[]],['mod','cookbook','mod_fun',[]],['mod','cookbook','mod_fun_demo','  a pretty much minimal example of how to usu mod'],['mod','cookbook','quine',[]],['mod','cookbook','sax',[]],['mod','cookbook','stream',[]],['mod','cookbook','sukr','  Short Unique Koncise Reference.'],['mod','cookbook','tree_path','  converts a graph between tree form;  [{a,1},  '],['mod','cookbook','yawn_buncher','  uses yawn and buncher to aggregate data into bu'],['fun','cookbook','atfl:compile/1',[]],['fun','cookbook','atfl:run/2',[]],['fun','cookbook','boilerplate:code_change/3',[]],['fun','cookbook','boilerplate:handle_call/3',[]],['fun','cookbook','boilerplate:handle_cast/2',[]],['fun','cookbook','boilerplate:handle_info/2',[]],['fun','cookbook','boilerplate:init/1',[]],['fun','cookbook','boilerplate:start/0',[]],['fun','cookbook','boilerplate:start_link/0',[]],['fun','cookbook','boilerplate:state/0',[]],['fun','cookbook','boilerplate:stop/0',[]],['fun','cookbook','boilerplate:terminate/2',[]],['fun','cookbook','boilerplate:unlink/0',[]],['fun','cookbook','boilerplate_app:start/2',[]],['fun','cookbook','boilerplate_app:stop/1',[]],['fun','cookbook','boilerplate_sup:init/1',[]],['fun','cookbook','boilerplate_sup:start_link/0',[]],['fun','cookbook','buncher:source/0',[]],['fun','cookbook','buncher:start/0',[]],['fun','cookbook','buncher:stop/0',[]],['fun','cookbook','call_trc:go/0',[]],['fun','cookbook','clr:go/0',[]],['fun','cookbook','clr:octree_clear/2',[]],['fun','cookbook','clr:octree_first/1',[]],['fun','cookbook','clr:octree_get/2',[]],['fun','cookbook','clr:octree_last/1',[]],['fun','cookbook','clr:octree_new/1',[]],['fun','cookbook','clr:octree_next/2',[]],['fun','cookbook','clr:octree_prev/2',[]],['fun','cookbook','clr:octree_put/3',[]],['fun','cookbook','error_logger_disk_log:code_change/3',[]],['fun','cookbook','error_logger_disk_log:handle_call/2',[]],['fun','cookbook','error_logger_disk_log:handle_event/2',[]],['fun','cookbook','error_logger_disk_log:handle_info/2',[]],['fun','cookbook','error_logger_disk_log:init/1',[]],['fun','cookbook','error_logger_disk_log:terminate/2',[]],['fun','cookbook','getter_module:all/0',[]],['fun','cookbook','getter_module:dbg/0',[]],['fun','cookbook','getter_module:dbg/1',[]],['fun','cookbook','getter_module:get/1',[]],['fun','cookbook','getter_module:new/1',[]],['fun','cookbook','getter_module:set/2',[]],['fun','cookbook','goo:main/0',[]],['fun','cookbook','inets_demo:do/3',[]],['fun','cookbook','inets_demo:start/0',[]],['fun','cookbook','mapreduce:parallel/2',[]],['fun','cookbook','mod_fun:do/1',[]],['fun','cookbook','mod_fun:load/2',[]],['fun','cookbook','mod_fun:store/2',[]],['fun','cookbook','mod_fun_demo:do/2',[]],['fun','cookbook','mod_fun_demo:start/0',[]],['fun','cookbook','quine:c/0',[]],['fun','cookbook','sax:test/0',[]],['fun','cookbook','sax:test/1',[]],['fun','cookbook','sax:test/2',[]],['fun','cookbook','stream:fold/3',[]],['fun','cookbook','stream:new/1',[]],['fun','cookbook','stream:new/2',[]],['fun','cookbook','stream:new/3',[]],['fun','cookbook','stream:next/1',[]],['fun','cookbook','sukr:compose_long/2',[]],['fun','cookbook','sukr:compose_short/2',[]],['fun','cookbook','sukr:decompose_long/1',[]],['fun','cookbook','sukr:decompose_short/1',[]],['fun','cookbook','tree_path:path_to_tree/1',[]],['fun','cookbook','tree_path:tree_to_path/1',[]],['fun','cookbook','yawn_buncher:start/1',[]],['fun','cookbook','yawn_buncher:stop/1',[]]];