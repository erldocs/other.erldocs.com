var index = [['app','noesis','noesis','[application]'],['mod','noesis','noesis_binary','The noesis_binary module provides functions for wo'],['mod','noesis','noesis_dict','The noesis_dict module provides functions for work'],['mod','noesis','noesis_directories','The noesis_directories module includes functions t'],['mod','noesis','noesis_geometry','The noesis_geometry module provides functions (mor'],['mod','noesis','noesis_lists','The noesis_lists module provides functions for wor'],['mod','noesis','noesis_math','The noesis_math module provides math related funct'],['mod','noesis','noesis_polyline','The noesis_polyline module provides functions for '],['mod','noesis','noesis_proplists','The noesis_proplists module includes functions tha'],['mod','noesis','noesis_string','The noesis_string module provides functions for wo'],['mod','noesis','noesis_xml','The noesis_xml module provides functions for creat'],['fun','noesis','noesis_binary:join/1','Joins a list of binaries together using Sep.'],['fun','noesis','noesis_binary:to_hex/1','Converts a binary to a hexadecimal string.'],['fun','noesis','noesis_directories:application/1','Returns the path to "root" directory of a given mo'],['fun','noesis','noesis_directories:priv/1','Returns the path to priv/ directory of a given mod'],['fun','noesis','noesis_geometry:center/1','Calculates the center point of a bounds() tuple.'],['fun','noesis','noesis_geometry:contains_point/1','Checks whether or not a given point is inside the '],['fun','noesis','noesis_geometry:crosses_antimeridian/1','Returns whether or not the bounds intersect the an'],['fun','noesis','noesis_geometry:deg2rad/1','Converts degrees to radians.'],['fun','noesis','noesis_geometry:distance/1','Calculates the great-circle distance between two c'],['fun','noesis','noesis_geometry:extend/1','Extends the bounds() tuple by the given point, if '],['fun','noesis','noesis_geometry:lat/1','Returns the latitude value of a coordinates() tupl'],['fun','noesis','noesis_geometry:lng/1','Returns the longitude value of a coordinates() tup'],['fun','noesis','noesis_geometry:normalize_bearing/1','Normalizes a bearing to the [0, 360] range.'],['fun','noesis','noesis_geometry:normalize_lat/1','Normalizes a latitude to the [-90, 90] range.'],['fun','noesis','noesis_geometry:normalize_lng/1','Normalizes a longitude to the [-180, 180] range.'],['fun','noesis','noesis_geometry:north_east/1','Returns the NE value of a bounds() tuple.'],['fun','noesis','noesis_geometry:rad2deg/1','Converts radians to degrees.'],['fun','noesis','noesis_geometry:rhumb_bearing_to/1','Given a starting point and a destination point, th'],['fun','noesis','noesis_geometry:rhumb_destination_point/1','Given a starting point, a bearing and a distance, '],['fun','noesis','noesis_geometry:rhumb_distance/1','Given a starting point and a destination point, th'],['fun','noesis','noesis_geometry:south_west/1','Returns the SW value of a bounds() tuple.'],['fun','noesis','noesis_lists:group_by/1','Groups a list using a user-supplied function.'],['fun','noesis','noesis_lists:pfilter/1','Returns a list of all elements in List for which F'],['fun','noesis','noesis_lists:pfilter/1','Delegates to pfilter/3 and uses default options.'],['fun','noesis','noesis_lists:pmap/1','Takes a function from As to Bs and a list of As an'],['fun','noesis','noesis_lists:pmap/1','Delegates to pmap/3 and uses default options.'],['fun','noesis','noesis_lists:split/1','Splits List into ListA and ListB.'],['fun','noesis','noesis_math:ceiling/1','Returns the smallest integer greater than or equal'],['fun','noesis','noesis_math:floor/1','Returns the largest integer less than or equal to '],['fun','noesis','noesis_math:fmod/1','Returns the floating-point remainder of  X divided'],['fun','noesis','noesis_polyline:decode/1','Takes a line() and returns a noesis_geometry:path('],['fun','noesis','noesis_polyline:encode/1','Takes a noesis_geometry:path() and returns a line('],['fun','noesis','noesis_proplists:delete_keys/1','Removes multiple keys from a property list and ret'],['fun','noesis','noesis_proplists:extract/1','Extracts key/value pairs from a property list and '],['fun','noesis','noesis_proplists:extract/1','Delegates to extract/4.'],['fun','noesis','noesis_proplists:extract/1','Delegates to extract/4.'],['fun','noesis','noesis_proplists:get_keys/1','Returns a list of all keys in the property list, n'],['fun','noesis','noesis_proplists:get_value/1','Returns the value of a key/value property in List.'],['fun','noesis','noesis_proplists:get_value/1','Delegates to get_value/3 and sets the default retu'],['fun','noesis','noesis_proplists:keypos/1','Returns the position of a key in a property list.'],['fun','noesis','noesis_proplists:merge/1','Delegates to merge/3.'],['fun','noesis','noesis_proplists:merge/3','Merges two property lists, ListA and ListB, to cre'],['fun','noesis','noesis_proplists:partial_extract/1','Extracts key/value pairs from a property list and '],['fun','noesis','noesis_proplists:partial_extract/1','Delegates to partial_extract/3.'],['fun','noesis','noesis_string:hamming/1','Calculates the Hamming distance between two string'],['fun','noesis','noesis_string:levenshtein/1','Calculates the Levenshtein distance between two st'],['fun','noesis','noesis_xml:from_list/1',[]]];