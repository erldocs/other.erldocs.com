var index = [['app','httpcluster','httpcluster','[application]'],['app','httpcluster','httpcluster','[application]'],['mod','httpcluster','hc_comms','Behavior module for hc_comms.'],['mod','httpcluster','hc_evt','Interface module for network events and messages.'],['mod','httpcluster','hc_node','Interface module for network node representation.'],['mod','httpcluster','hc_timer','Interface module for all cluster timer needs.'],['mod','httpcluster','httpcluster','Handles cluster information.'],['mod','httpcluster','httpcluster_app','OTP app module.'],['mod','httpcluster','httpcluster_coms','Default client communication module.'],['mod','httpcluster','httpcluster_sec','The main module handling secondary-node functions.'],['mod','httpcluster','httpcluster_sup','Top-level supervisor.'],['fun','httpcluster','hc_evt:cnode/1','Get the node value of either an evt_raw() or evt()'],['fun','httpcluster','hc_evt:id/1','Get the id of either evt() or evt_err().'],['fun','httpcluster','hc_evt:is_evt/1','Check if something is either an evt or an evt_err.'],['fun','httpcluster','hc_evt:is_node_pong/1','Check if something is a node_pong() or not.'],['fun','httpcluster','hc_evt:is_node_reply/1','Check if something is a node_reply() or not.'],['fun','httpcluster','hc_evt:name/1','Get the name of evt_raw(), evt(), or evt_err().'],['fun','httpcluster','hc_evt:new_evt_err_from_raw/4','Create an evt_err() based on an evt_raw().'],['fun','httpcluster','hc_evt:new_evt_from_raw/5','Create an evt() based on an evt_raw().'],['fun','httpcluster','hc_evt:new_node_ping/5','Create a new node_ping() value.'],['fun','httpcluster','hc_evt:new_node_pong/5','Create a new node_pong() value.'],['fun','httpcluster','hc_evt:new_node_reply/4','Create a new node_reply() value in response to a '],['fun','httpcluster','hc_evt:new_raw/3','Create a new evt_raw().'],['fun','httpcluster','hc_evt:node_com_destination/1','Get the to value of a node communication.'],['fun','httpcluster','hc_evt:node_com_id/1','Get the id of a node communication.'],['fun','httpcluster','hc_evt:node_com_source/1','Get the from value of a node communication.'],['fun','httpcluster','hc_evt:node_ping_raw/1','Get the raw event in a node_ping().'],['fun','httpcluster','hc_evt:node_ping_sync/1','Get the sync boolean in a node_ping().'],['fun','httpcluster','hc_evt:node_pong_evt/1','Get the evt value of a node_pong().'],['fun','httpcluster','hc_evt:node_pong_nodes/1','Get the nodes value of a node_pong().'],['fun','httpcluster','hc_evt:node_reply_val/1','Get the val value of a node_reply().'],['fun','httpcluster','hc_evt:org_name/1','Get the original name of the events subject node.'],['fun','httpcluster','hc_evt:random_str/1','A utility function to help generate random alphanu'],['fun','httpcluster','hc_evt:reason/1','Get the reason value of an evt_err().'],['fun','httpcluster','hc_evt:truncate_evts/1','Shorten an events list according to app var evts_h'],['fun','httpcluster','hc_evt:type/1','Get the type of evt_raw(), evt(), or evt_err().'],['fun','httpcluster','hc_node:attribs/1','Get node attribs.'],['fun','httpcluster','hc_node:cnodes_to_list/1','Convert a cnodes container into a list.'],['fun','httpcluster','hc_node:disconnect/1','Set nodes designation to disconnected.'],['fun','httpcluster','hc_node:empty/0','Return an empty container for cnodes.'],['fun','httpcluster','hc_node:get_first/1','Take the first node, if it exists, from a nodes co'],['fun','httpcluster','hc_node:get_node/2','Finds a node in a nodes container.'],['fun','httpcluster','hc_node:is_connected/1','Check if node is designated as connected to cluste'],['fun','httpcluster','hc_node:list_to_cnodes/1','Convert a list of cnodes into a container.'],['fun','httpcluster','hc_node:name/1','Get node name.'],['fun','httpcluster','hc_node:new/2','Create a new cnode.'],['fun','httpcluster','hc_node:new/4','Create a new cnode.'],['fun','httpcluster','hc_node:new/6','Create a new cnode.'],['fun','httpcluster','hc_node:priority/1','Get node priority.'],['fun','httpcluster','hc_node:rank/1','Get node rank.'],['fun','httpcluster','hc_node:store_first/2','Store Node as the first one in a nodes container, '],['fun','httpcluster','hc_node:store_last/2','Store Node as the last one in a nodes container, w'],['fun','httpcluster','hc_node:store_node/2','Store (overwrite) a cnode in a cnodes container.'],['fun','httpcluster','hc_node:store_node/3','Store (overwrite) a cnode in a cnodes container.'],['fun','httpcluster','hc_node:take_node/2','Take a node, if it exists, from a nodes container.'],['fun','httpcluster','hc_node:ttd/1','Get node TTD.'],['fun','httpcluster','hc_node:ttd/2','Alias for ttd(get_node(Name, Nodes)).'],['fun','httpcluster','hc_timer:all_off/1','Stops all timers in the timers container.'],['fun','httpcluster','hc_timer:del_if_exists/2','Merely delete a timer from the list if it is there'],['fun','httpcluster','hc_timer:details/1','Get the details given with the timer.'],['fun','httpcluster','hc_timer:empty/0','Return an empty timer list.'],['fun','httpcluster','hc_timer:ident/1','Get the identifier given with the timer.'],['fun','httpcluster','hc_timer:is_equal/2','Compare 2 timers.'],['fun','httpcluster','hc_timer:ping_retry_timer/3','Create a new ?PING_RETRY timer.'],['fun','httpcluster','hc_timer:ping_routine_timer/2','Create a new ?PING_ROUTINE timer.'],['fun','httpcluster','hc_timer:ping_stall_timer/2','Create a new ?PING_STALL timer.'],['fun','httpcluster','hc_timer:prim_disc_on/4','Add a new ?TTD_PRIM_DISC timer to Timers       if'],['fun','httpcluster','hc_timer:sec_disc_off/2','Stop and delete a ?TTD_SEC_DISC timer from Timers '],['fun','httpcluster','hc_timer:sec_disc_on/3','Add a new ?TTD_SEC_DISC timer to Timers if it does'],['fun','httpcluster','hc_timer:type/1','Get the type of the timer.'],['fun','httpcluster','httpcluster:deactivate/0','Turn off active state.'],['fun','httpcluster','httpcluster:get_evts/0','Get the local history list.'],['fun','httpcluster','httpcluster:get_nodes/0','Get the local nodes list.'],['fun','httpcluster','httpcluster:hard_activate/3','Activate the server as primary with a new set of N'],['fun','httpcluster','httpcluster:is_active/0','Check if currently active or not.'],['fun','httpcluster','httpcluster:node_ping/1','Process a hc_evt:node_ping() coming from a single '],['fun','httpcluster','httpcluster:soft_init/1','Put the server on standby, awaiting ping from self'],['fun','httpcluster','httpcluster:start/0','Useful for starting the VM with -s httpcluster fla'],['fun','httpcluster','httpcluster_coms:cluster_event/4',[]],['fun','httpcluster','httpcluster_coms:create_pingdata/3',[]],['fun','httpcluster','httpcluster_coms:create_pongdata/3',[]],['fun','httpcluster','httpcluster_coms:ping_to_node/4',[]],['fun','httpcluster','httpcluster_coms:pong_to_node/3',[]],['fun','httpcluster','httpcluster_sec:evt_raw/1','Manually send a raw event to the cluster.'],['fun','httpcluster','httpcluster_sec:get_evts/0','Get the local history list.'],['fun','httpcluster','httpcluster_sec:get_nodes/0','Get the local nodes list.'],['fun','httpcluster','httpcluster_sec:init_cluster/3','Try to connect to the cluster using the given node'],['fun','httpcluster','httpcluster_sec:is_connected/0','Check if currently connected to the cluster or not'],['fun','httpcluster','httpcluster_sec:ping_reply/2','Used by client comm module to send ping replies ba'],['fun','httpcluster','httpcluster_sec:pong_cast/1','Used by client comm module to send cluster casts t']];