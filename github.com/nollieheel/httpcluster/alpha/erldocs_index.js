var index = [['app','httpcluster','httpcluster','[application]'],['app','httpcluster','httpcluster','[application]'],['mod','httpcluster','hc_node',[]],['mod','httpcluster','hc_timer',[]],['mod','httpcluster','httpcluster',[]],['mod','httpcluster','httpcluster_app',[]],['mod','httpcluster','httpcluster_prim',[]],['mod','httpcluster','httpcluster_sec',[]],['mod','httpcluster','httpcluster_subs',[]],['mod','httpcluster','httpcluster_sup',[]],['mod','httpcluster','test',[]],['fun','httpcluster','hc_node:attribs/1',[]],['fun','httpcluster','hc_node:get_node/1','Finds a node from list of nodes.'],['fun','httpcluster','hc_node:is_connected/1',[]],['fun','httpcluster','hc_node:name/1',[]],['fun','httpcluster','hc_node:new/2',[]],['fun','httpcluster','hc_node:new/3',[]],['fun','httpcluster','hc_node:new/4',[]],['fun','httpcluster','hc_node:new/6',[]],['fun','httpcluster','hc_node:priority/1',[]],['fun','httpcluster','hc_node:rank/1',[]],['fun','httpcluster','hc_node:take_node/1','Take a node, if it exists, from a list of nodes.'],['fun','httpcluster','hc_node:ttd/1',[]],['fun','httpcluster','hc_timer:del_if_exists/1','Merely delete a timer record from the list if it i'],['fun','httpcluster','hc_timer:ident/1','Get the Identifier given with the timer.'],['fun','httpcluster','hc_timer:refresh/1','Send refresh signal to a timer to reset it.'],['fun','httpcluster','hc_timer:sec_disc_off/1','Add a new ?TTD_SEC_DISC timer to Timers if it does'],['fun','httpcluster','hc_timer:sec_disc_on/1','Add a new ?TTD_SEC_DISC timer to Timers if it does'],['fun','httpcluster','hc_timer:start_prim_disc/1','Add a new ?TTD_PRIM_DISC timer to Timers if it doe'],['fun','httpcluster','hc_timer:start_prim_redir/1','Add a new ?TTD_PRIM_REDIR timer to Timers if it do'],['fun','httpcluster','hc_timer:stop/1','Stop a timer.'],['fun','httpcluster','httpcluster:new_nodes_evts/1','Reset the server state with a new set of [Nodes] a'],['fun','httpcluster','httpcluster:raws_from_node/1','Process a list of evt_raw() records coming from a '],['fun','httpcluster','httpcluster:truncate_evts/1','Shorten history list according to app var evts_hi'],['fun','httpcluster','httpcluster_app:start/2',[]],['fun','httpcluster','httpcluster_app:stop/1',[]],['fun','httpcluster','httpcluster_prim:handle_sec_msg/1',[]],['fun','httpcluster','httpcluster_sec:apply_evt_to_hist/1','Update evt list with the given evt.'],['fun','httpcluster','httpcluster_sec:apply_evt_to_nodes/1','Update a list of nodes with the given evt.'],['fun','httpcluster','httpcluster_sec:apply_evts_to_hist/1','Update evt list with the given evts.'],['fun','httpcluster','httpcluster_sec:apply_ping_funs/7','Used internally to execute the ping functions of t'],['fun','httpcluster','httpcluster_sec:get_node/1','Finds a node from list of nodes.'],['fun','httpcluster','httpcluster_sec:ping_reply/1','Used by client comm module to send ping replies ba'],['fun','httpcluster','httpcluster_sec:start_init/1','Begin connecting to cluster using given Nodeslist.'],['fun','httpcluster','httpcluster_sec:stop_init/0','Can be used to abort an ongoing cluster init proce'],['fun','httpcluster','httpcluster_sec:take_node/1','Take a node, if it exists, from a list of nodes.'],['fun','httpcluster','httpcluster_subs:add_proc/0','Add calling process to subscriber processes list.'],['fun','httpcluster','httpcluster_subs:broadcast/1','Broadcast event to all subscribed processes.'],['fun','httpcluster','httpcluster_subs:code_change/3',[]],['fun','httpcluster','httpcluster_subs:del_proc/0','Remove calling process from subscriber processes l'],['fun','httpcluster','httpcluster_subs:handle_call/3',[]],['fun','httpcluster','httpcluster_subs:handle_cast/2',[]],['fun','httpcluster','httpcluster_subs:handle_info/2',[]],['fun','httpcluster','httpcluster_subs:init/1',[]],['fun','httpcluster','httpcluster_subs:start_link/1',[]],['fun','httpcluster','httpcluster_subs:terminate/2',[]]];