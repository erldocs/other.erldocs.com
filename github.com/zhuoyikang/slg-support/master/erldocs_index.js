var index = [['app','slg-support','slg-support','[application]'],['mod','slg-support','slg_support',[]],['mod','slg-support','slg_support_app',[]],['mod','slg-support','slg_support_sup',[]],['mod','slg-support','spt_atom',[]],['mod','slg-support','spt_cast','Êú¨Ê®°ÂùóÂÆåÊàêÂêëÊåáÂÆöËøõÁ®ãÁªÑÂπøÊí≠‰ø°ÊÅØÁöÑÂä'],['mod','slg-support','spt_cast_sup','ÁÆ°ÁêÜ‰∏Ä‰∏™ËøõÁ®ãÂàóË°®ÔºåÂπ∂ÂêëÂÖ∂‰∏≠ÊØè‰∏™ËøõÁ®'],['mod','slg-support','spt_config',[]],['mod','slg-support','spt_ets',[]],['mod','slg-support','spt_notify',[]],['mod','slg-support','spt_reloader','Erlang module for automatically reloading modified'],['mod','slg-support','spt_smerl',' Smerl: Simple Metaprogramming for Erlang.'],['fun','slg-support','slg_support_app:start/2',[]],['fun','slg-support','slg_support_app:stop/1',[]],['fun','slg-support','slg_support_sup:init/1',[]],['fun','slg-support','slg_support_sup:start_link/0',[]],['fun','slg-support','spt_atom:atom_prefix/2',[]],['fun','slg-support','spt_atom:atom_suffix/2',[]],['fun','slg-support','spt_atom:binary_to_term/1',[]],['fun','slg-support','spt_atom:mysql_escape/1',[]],['fun','slg-support','spt_atom:mysql_unescape/1',[]],['fun','slg-support','spt_atom:opt/3',[]],['fun','slg-support','spt_atom:string_to_term/1',[]],['fun','slg-support','spt_atom:term_to_binary/1',[]],['fun','slg-support','spt_atom:term_to_string/1',[]],['fun','slg-support','spt_cast:cast/2',[]],['fun','slg-support','spt_cast:code_change/3',[]],['fun','slg-support','spt_cast:handle_call/3',[]],['fun','slg-support','spt_cast:handle_cast/2',[]],['fun','slg-support','spt_cast:handle_info/2',[]],['fun','slg-support','spt_cast:init/1',[]],['fun','slg-support','spt_cast:join/2',[]],['fun','slg-support','spt_cast:quit/2',[]],['fun','slg-support','spt_cast:send/2',[]],['fun','slg-support','spt_cast:start_link/1',[]],['fun','slg-support','spt_cast:stop/1',[]],['fun','slg-support','spt_cast:terminate/2',[]],['fun','slg-support','spt_cast:test/1',[]],['fun','slg-support','spt_cast_sup:init/1',[]],['fun','slg-support','spt_cast_sup:start_caster/1',[]],['fun','slg-support','spt_config:gen/2',[]],['fun','slg-support','spt_ets:safe_create/2',[]],['fun','slg-support','spt_notify:code_change/3',[]],['fun','slg-support','spt_notify:handle_call/3',[]],['fun','slg-support','spt_notify:handle_cast/2',[]],['fun','slg-support','spt_notify:handle_info/2',[]],['fun','slg-support','spt_notify:init/1',[]],['fun','slg-support','spt_notify:start_link/0',[]],['fun','slg-support','spt_notify:terminate/2',[]],['fun','slg-support','spt_reloader:all_changed/0','Return a list of beam modules that have changed.'],['fun','slg-support','spt_reloader:code_change/3','gen_server code_change callback (trivial).'],['fun','slg-support','spt_reloader:handle_call/3','gen_server callback.'],['fun','slg-support','spt_reloader:handle_cast/2','gen_server callback.'],['fun','slg-support','spt_reloader:handle_info/2','gen_server callback.'],['fun','slg-support','spt_reloader:init/1','gen_server init, opens the server in an initial st'],['fun','slg-support','spt_reloader:is_changed/1','true if the loaded module is a beam with a vsn att'],['fun','slg-support','spt_reloader:load_all/0',[]],['fun','slg-support','spt_reloader:reload_modules/1','code:purge/1 and code:load_file/1 the given list o'],['fun','slg-support','spt_reloader:start/0','Start the reloader.'],['fun','slg-support','spt_reloader:start_link/0','Start the reloader.'],['fun','slg-support','spt_reloader:stop/0','Stop the reloader.'],['fun','slg-support','spt_reloader:terminate/2','gen_server termination callback.'],['fun','slg-support','spt_smerl:add_func/1','Add a new function to the meta_mod and return the '],['fun','slg-support','spt_smerl:add_func/1','Add a new function to the meta_mod and return the '],['fun','slg-support','spt_smerl:compile/1','Compile the module represented by the meta_mod and'],['fun','slg-support','spt_smerl:compile/1','Compile the module represented by the meta_mod and'],['fun','slg-support','spt_smerl:curry/1','Curry the function from the module or meta_mod   '],['fun','slg-support','spt_smerl:curry/1','Curry the function from the module with the given '],['fun','slg-support','spt_smerl:curry/1','Get the curried form for the function and paramete'],['fun','slg-support','spt_smerl:curry_add/1','Curry the function in the module, rename the curri'],['fun','slg-support','spt_smerl:curry_add/1','Curry the function form from the meta_mod, then ad'],['fun','slg-support','spt_smerl:curry_add/1','Add the curried form of the function    in the me'],['fun','slg-support','spt_smerl:curry_add/1','Add the curried form of the function in the meta_m'],['fun','slg-support','spt_smerl:curry_replace/1','Replace the function in the meta_mod with    its '],['fun','slg-support','spt_smerl:curry_replace/1','Replace the function in the meta_mod with    its '],['fun','slg-support','spt_smerl:embed_all/1','Apply the embed_params function with the list of {'],['fun','slg-support','spt_smerl:embed_params/1','Apply embed_params/2 to the function from the meta'],['fun','slg-support','spt_smerl:embed_params/1','Apply embed_params/2 to a function from the meta_m'],['fun','slg-support','spt_smerl:embed_params/1','This function takes a function form and list of na'],['fun','slg-support','spt_smerl:extend/1','Similar to extend/2, with the addition of the Ari'],['fun','slg-support','spt_smerl:extend/1','extend/2  Add all the parent modules functions t'],['fun','slg-support','spt_smerl:extend/4',[]],['fun','slg-support','spt_smerl:for_file/1','Create a meta_mod for a module from its source fil'],['fun','slg-support','spt_smerl:for_file/1','Equivalent to for_file(SrcFilePath, []).'],['fun','slg-support','spt_smerl:for_file/2','Equivalent to for_file(SrcFilePath, IncludePaths, '],['fun','slg-support','spt_smerl:for_module/1','Create a meta_mod tuple for an existing module.'],['fun','slg-support','spt_smerl:for_module/1','Equivalent to for_module(ModuleName, []).'],['fun','slg-support','spt_smerl:for_module/2','Equivalent to for_module(ModuleName, IncludePaths,'],['fun','slg-support','spt_smerl:get_attribute/1','Get the value a the modules attribute.'],['fun','slg-support','spt_smerl:get_export_all/1','Get the export_all value for the module.'],['fun','slg-support','spt_smerl:get_exports/1','Return the list of exports in the meta_mod.'],['fun','slg-support','spt_smerl:get_forms/1','Return the list of function forms in the meta_mod.'],['fun','slg-support','spt_smerl:get_func/1','Get the form for the function with the specified a'],['fun','slg-support','spt_smerl:get_module/1','Return the module name for the meta_mod.'],['fun','slg-support','spt_smerl:has_func/1','Check whether the meta_mod has a function with the'],['fun','slg-support','spt_smerl:new/1','Create a new meta_mod for a module with the given '],['fun','slg-support','spt_smerl:remove_export/1','Remove the export from the list of exports in the '],['fun','slg-support','spt_smerl:remove_func/1','Try to remove the function from the meta_mod.'],['fun','slg-support','spt_smerl:rename/1','Change the name of the function represented by the'],['fun','slg-support','spt_smerl:replace_func/1','  Replace an existing function with the new one.'],['fun','slg-support','spt_smerl:set_export_all/1','Set the export_all value for the module.'],['fun','slg-support','spt_smerl:set_exports/1','Set the meta_mods export list to the new list.'],['fun','slg-support','spt_smerl:set_forms/2',[]],['fun','slg-support','spt_smerl:set_module/1','Set the meta_mods module name.'],['fun','slg-support','spt_smerl:to_src/1','Write the pretty printed source code for the modul'],['fun','slg-support','spt_smerl:to_src/1','Return the pretty-printed source code for the modu']];