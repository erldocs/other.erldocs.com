var index = [['app','edd','edd','[application]'],['mod','edd','edd','Erlang Declarative Debugger.'],['mod','edd','edd_client',[]],['mod','edd','edd_con','The Erlang Declarative Debugger module for concurr'],['mod','edd','edd_con_lib','Erlang Declarative Debugger auxiliary library for '],['mod','edd','edd_jserver',[]],['mod','edd','edd_lib','Erlang Declarative Debugger auxiliary library.'],['mod','edd','edd_server',[]],['mod','edd','edd_tcp',[]],['mod','edd','edd_test_reader',[]],['mod','edd','edd_test_writer',[]],['mod','edd','edd_trace','Erlang Declarative Debugger tracer.'],['mod','edd','edd_zoom',[]],['mod','edd','edd_zoom_lib','Erlang Declarative Debugger auxiliary library.'],['mod','edd','mochijson','Yet another JSON (RFC 4627) library for Erlang.'],['mod','edd','smerl',' Smerl: Simple Metaprogramming for Erlang.'],['fun','edd','edd:dd/1','Starts the declarative debugger edd with an init'],['fun','edd','edd:dd/1','Starts the declarative debugger edd with an init'],['fun','edd','edd:dd/1','Starts the declarative debugger edd with an init'],['fun','edd','edd:dd_server/1','Starts the declarative debugger edd server.'],['fun','edd','edd:ddc/1','Starts the declarative debugger edd with an init'],['fun','edd','edd_client:client/3',[]],['fun','edd','edd_client:start/2',[]],['fun','edd','edd_con:ddc/2',[]],['fun','edd','edd_con:ddc/4',[]],['fun','edd','edd_con_lib:ask/3','Traverses the tree G asking the programmer until'],['fun','edd','edd_con_lib:dot_graph_file/1','Created a DOT file and a PDF file containing the t'],['fun','edd','edd_jserver:start/0',[]],['fun','edd','edd_lib:ask/1','Traverses the tree G asking the programmer until'],['fun','edd','edd_lib:asking_loop/9',[]],['fun','edd','edd_lib:core_module/1','Compiles the Erlang program File into Core Erlan'],['fun','edd','edd_lib:core_module/1','Compiles the Erlang program File into Core Erlan'],['fun','edd','edd_lib:dot_graph_file/1','Created a DOT file and a PDF file containing the t'],['fun','edd','edd_lib:get_call_string/2',[]],['fun','edd','edd_lib:get_MFA_Label/2','Returns a the MFA corresponding to a node in the t'],['fun','edd','edd_lib:initial_state/1','Initial state for asking loop.'],['fun','edd','edd_lib:json_graph/1','Created a JSON representation of a given debugging'],['fun','edd','edd_lib:parse_expr/1','Parses a string as if it were an expression.'],['fun','edd','edd_lib:select_strategy/1','Prints current strategy then select the new one.'],['fun','edd','edd_lib:tupled_graph/1','Creates a tuple representation of a given debuggin'],['fun','edd','edd_server:server_entry_point/1',[]],['fun','edd','edd_server:start/0',[]],['fun','edd','edd_tcp:accept_loop/1',[]],['fun','edd','edd_tcp:code_change/3',[]],['fun','edd','edd_tcp:handle_call/3',[]],['fun','edd','edd_tcp:handle_cast/2',[]],['fun','edd','edd_tcp:handle_info/2',[]],['fun','edd','edd_tcp:init/1',[]],['fun','edd','edd_tcp:start/1','Server API.'],['fun','edd','edd_tcp:terminate/2',[]],['fun','edd','edd_test_reader:put_attributes/1',[]],['fun','edd','edd_test_reader:read/1',[]],['fun','edd','edd_test_reader:read_file/1',[]],['fun','edd','edd_test_reader:read_from_clause/1',[]],['fun','edd','edd_test_writer:write/4',[]],['fun','edd','edd_trace:trace/2',[]],['fun','edd','edd_zoom:zoom/1',[]],['fun','edd','edd_zoom:zoom_graph/1',[]],['fun','edd','edd_zoom:zoom_graph/2',[]],['fun','edd','edd_zoom:zoom_graph_server/2',[]],['fun','edd','edd_zoom_lib:ask/1','Traverses the tree G asking the programmer until'],['fun','edd','edd_zoom_lib:asking_loop/10',[]],['fun','edd','edd_zoom_lib:core_module/1','Compiles the Erlang program File into Core Erlan'],['fun','edd','edd_zoom_lib:dot_graph_file/1','Created a DOT file and a PDF file containing the t'],['fun','edd','edd_zoom_lib:initial_state/1',[]],['fun','edd','edd_zoom_lib:look_for_root/1',[]],['fun','edd','edd_zoom_lib:parse_expr/1','Parses a string as if it were an expression.'],['fun','edd','edd_zoom_lib:string_buggy_info/2',[]],['fun','edd','edd_zoom_lib:tupled_graph/1','Created a tupled representation of a given debuggi'],['fun','edd','mochijson:binary_decode/1','Decode the given iolist to Erlang terms, using lis'],['fun','edd','mochijson:binary_decoder/1','Create a binary_decoder/1 with the given options.'],['fun','edd','mochijson:binary_encode/1','Encode the given as JSON to an iolist, using lists'],['fun','edd','mochijson:binary_encoder/1','Create a binary_encoder/1 with the given options.'],['fun','edd','mochijson:decode/1','Decode the given iolist to Erlang terms.'],['fun','edd','mochijson:decoder/1','Create a decoder/1 with the given options.'],['fun','edd','mochijson:encode/1','Encode the given as JSON to an iolist.'],['fun','edd','mochijson:encoder/1','Create an encoder/1 with the given options.'],['fun','edd','smerl:add_func/1','Add a new function to the meta_mod and return the '],['fun','edd','smerl:add_func/1','Add a new function to the meta_mod and return the '],['fun','edd','smerl:compile/1','Compile the module represented by the meta_mod and'],['fun','edd','smerl:compile/1','Compile the module represented by the meta_mod and'],['fun','edd','smerl:compile2/2',[]],['fun','edd','smerl:curry/1','Curry the function from the module or meta_mod   '],['fun','edd','smerl:curry/1','Curry the function from the module with the given '],['fun','edd','smerl:curry/1','Get the curried form for the function and paramete'],['fun','edd','smerl:curry_add/1','Curry the function in the module, rename the curri'],['fun','edd','smerl:curry_add/1','Curry the function form from the meta_mod, then ad'],['fun','edd','smerl:curry_add/1','Add the curried form of the function    in the me'],['fun','edd','smerl:curry_add/1','Add the curried form of the function in the meta_m'],['fun','edd','smerl:curry_replace/1','Replace the function in the meta_mod with    its '],['fun','edd','smerl:curry_replace/1','Replace the function in the meta_mod with    its '],['fun','edd','smerl:embed_all/1','Apply the embed_params function with the list of {'],['fun','edd','smerl:embed_params/1','Apply embed_params/2 to the function from the meta'],['fun','edd','smerl:embed_params/1','Apply embed_params/2 to a function from the meta_m'],['fun','edd','smerl:embed_params/1','This function takes a function form and list of na'],['fun','edd','smerl:extend/1','Similar to extend/2, with the addition of the Ari'],['fun','edd','smerl:extend/1','extend/2  Add all the parent modules functions t'],['fun','edd','smerl:extend/4',[]],['fun','edd','smerl:for_file/1','Create a meta_mod for a module from its source fil'],['fun','edd','smerl:for_file/1','Equivalent to for_file(SrcFilePath, []).'],['fun','edd','smerl:for_file/2','Equivalent to for_file(SrcFilePath, IncludePaths, '],['fun','edd','smerl:for_module/1','Create a meta_mod tuple for an existing module.'],['fun','edd','smerl:for_module/1','Equivalent to for_module(ModuleName, []).'],['fun','edd','smerl:for_module/2','Equivalent to for_module(ModuleName, IncludePaths,'],['fun','edd','smerl:get_attribute/1','Get the value a the modules attribute.'],['fun','edd','smerl:get_export_all/1','Get the export_all value for the module.'],['fun','edd','smerl:get_exports/1','Return the list of exports in the meta_mod.'],['fun','edd','smerl:get_forms/1','Return the list of function forms in the meta_mod.'],['fun','edd','smerl:get_func/1','Get the form for the function with the specified a'],['fun','edd','smerl:get_module/1','Return the module name for the meta_mod.'],['fun','edd','smerl:has_func/1','Check whether the meta_mod has a function with the'],['fun','edd','smerl:new/1','Create a new meta_mod for a module with the given '],['fun','edd','smerl:remove_export/1','Remove the export from the list of exports in the '],['fun','edd','smerl:remove_func/1','Try to remove the function from the meta_mod.'],['fun','edd','smerl:rename/1','Change the name of the function represented by the'],['fun','edd','smerl:replace_func/1','  Replace an existing function with the new one.'],['fun','edd','smerl:set_export_all/1','Set the export_all value for the module.'],['fun','edd','smerl:set_exports/1','Set the meta_mods export list to the new list.'],['fun','edd','smerl:set_forms/2',[]],['fun','edd','smerl:set_module/1','Set the meta_mods module name.'],['fun','edd','smerl:to_src/1','Write the pretty printed source code for the modul'],['fun','edd','smerl:to_src/1','Return the pretty-printed source code for the modu']];