var index = [['app','unsplit','unsplit','[application]'],['mod','unsplit','unsplit','Framework for merging mnesia tables after netsplit'],['mod','unsplit','unsplit_lib','Predefined merge functions.'],['mod','unsplit','unsplit_reporter','Unsplit Inconsistency Reporter Behaviour.'],['mod','unsplit','unsplit_server',[]],['mod','unsplit','unsplit_vclock','A simple Erlang implementation of vector clocks as'],['fun','unsplit','unsplit:get_reporter/0','Look up the predefined callback module for reporti'],['fun','unsplit','unsplit:report_inconsistency/4','Report an inconcistency to the predefined reporter'],['fun','unsplit','unsplit:report_inconsistency/5','Report an inconsistency to Reporter (an unsplit_re'],['fun','unsplit','unsplit:start/2','Application start callback.'],['fun','unsplit','unsplit:stop/1','Application stop callback.'],['fun','unsplit','unsplit_lib:bag/2','Default bag merge; removes duplicate objects.'],['fun','unsplit','unsplit_lib:last_modified/2','Keeps the last modified object, based on the modif'],['fun','unsplit','unsplit_lib:last_version/2','Picks the object with the greatest value of a give'],['fun','unsplit','unsplit_lib:no_action/2','Minimal merge action - does nothing.'],['fun','unsplit','unsplit_lib:vclock/2',[]],['fun','unsplit','unsplit_reporter:behaviour_info/1',[]],['fun','unsplit','unsplit_reporter:childspec/0','Return a child start specification for the pre-def'],['fun','unsplit','unsplit_reporter:inconsistency/4','Report an inconsistency encountered during the mer'],['fun','unsplit','unsplit_server:code_change/3',[]],['fun','unsplit','unsplit_server:handle_call/3',[]],['fun','unsplit','unsplit_server:handle_cast/2',[]],['fun','unsplit','unsplit_server:handle_info/2',[]],['fun','unsplit','unsplit_server:init/1',[]],['fun','unsplit','unsplit_server:remote_handle_query/1',[]],['fun','unsplit','unsplit_server:start_link/0','Starts the Unsplit server.'],['fun','unsplit','unsplit_server:terminate/2',[]],['fun','unsplit','unsplit_vclock:all_nodes/1','Return the list of all nodes that have ever increm'],['fun','unsplit','unsplit_vclock:descends/1','Return true if Va is a direct descendant of Vb, el'],['fun','unsplit','unsplit_vclock:equal/1','Compares two VClocks for equality.'],['fun','unsplit','unsplit_vclock:fresh/0','Create a brand new vclock.'],['fun','unsplit','unsplit_vclock:get_counter/1','Get the counter value in VClock set from Node.'],['fun','unsplit','unsplit_vclock:get_timestamp/1','Get the timestamp value in a VClock set from Node.'],['fun','unsplit','unsplit_vclock:increment/1','Increment VClock at Node.'],['fun','unsplit','unsplit_vclock:merge/1','Combine all VClocks in the input list into their l'],['fun','unsplit','unsplit_vclock:prune/1','Possibly shrink the size of a vclock, depending on']];