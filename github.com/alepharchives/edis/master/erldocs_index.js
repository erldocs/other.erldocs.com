var index = [['app','edis','edis','[application]'],['mod','edis','edis_gb_trees','Extension for gb_trees with a couple of extra func'],['mod','edis','edis_lists','New lists implementation with O(1) for lists:lengt'],['mod','edis','edis_sup','Edis main supervisor.'],['mod','edis','zsets','Sorted Sets.'],['fun','edis','edis_gb_trees:previous/1','Like next/1 for reverse iterators.'],['fun','edis','edis_gb_trees:rev_iterator/1','Returns a reverse iterator.'],['fun','edis','edis_lists:append/1','appends lists X and Y.'],['fun','edis','edis_lists:empty/0','returns an empty edis_list.'],['fun','edis','edis_lists:filter/1','Returns an edis_list of all elements Elem in the r'],['fun','edis','edis_lists:from_list/1','returns an edis_list with the same elements of the'],['fun','edis','edis_lists:insert/4','insert a value before or after the pivot.'],['fun','edis','edis_lists:length/1','returns the edis_list size.'],['fun','edis','edis_lists:nth/1','returns the Nth element of the list L.'],['fun','edis','edis_lists:nthtail/1','returns the Nth tail of the list L.'],['fun','edis','edis_lists:pop/1','pops the leftmost element of the list.'],['fun','edis','edis_lists:push/2','inserts X to the left of the list.'],['fun','edis','edis_lists:remove/2','Removes the first N elements which compares equal '],['fun','edis','edis_lists:replace_head/2','replaces head element.'],['fun','edis','edis_lists:reverse/1','reverses all elements in the list L.'],['fun','edis','edis_lists:split/1','Splits the received list into two lists.'],['fun','edis','edis_lists:splitwith/1','partition edis_list into two edis_lists according '],['fun','edis','edis_lists:sublist/1','Returns the sub-list starting at Start of length L'],['fun','edis','edis_lists:to_list/1','returns a list with the same elements of the edis_'],['fun','edis','edis_sup:start_link/0',' Starts a new supervisor.'],['fun','edis','zsets:count/1','Returns the number of elements between Min and Max'],['fun','edis','zsets:count/1','Equivalent to count(Min, Max, ZSet, forward).'],['fun','edis','zsets:delete_any/3','Removes the node with key Key from Tree1 if the ke'],['fun','edis','zsets:direction/2','Returns the direction of the iterator.'],['fun','edis','zsets:enter/4','Adds a new element to the zset.'],['fun','edis','zsets:enter/4','Equivalent to enter(Score, Member, ZSet).'],['fun','edis','zsets:find/3','This function searches for a key in a zset.'],['fun','edis','zsets:intersection/2','Returns the intersection of the non-empty list of '],['fun','edis','zsets:intersection/2','Returns the intersection of ZSet1 and ZSet2 genera'],['fun','edis','zsets:iterator/2','Returns an iterator that can be used for traversin'],['fun','edis','zsets:iterator/2','Equivalent to iterator(ZSet, forward).'],['fun','edis','zsets:list/1','Returns the list of elements with scores between t'],['fun','edis','zsets:list/1','Equivalent to list(Min, Max, ZSet, forward).'],['fun','edis','zsets:map/2','Executes Fun in each element and returns the zset '],['fun','edis','zsets:new/0','Creates an empty zset/2'],['fun','edis','zsets:next/2','Returns {Score, Member, Iter2} where Score is the '],['fun','edis','zsets:range/1','Returns the list of elements between the Start one'],['fun','edis','zsets:range/1','Equivalent to range(Start, Stop, ZSet, forward).'],['fun','edis','zsets:size/1','Returns the size of the zset.'],['fun','edis','zsets:to_list/2','Converts the sorted set into a list of {Score, Mem'],['fun','edis','zsets:union/2','Returns the union of the non-empty list of ZSets g'],['fun','edis','zsets:union/2','Returns the union of ZSet1 and ZSet2 generating th']];