var index = [['app','plain_fsm','plain_fsm','[application]'],['mod','plain_fsm','fsm_example',[]],['mod','plain_fsm','plain_fsm','A behaviour/support library for writing plain Erla'],['mod','plain_fsm','plain_fsm_xform','Parse transform utility for plain_fsm.'],['fun','plain_fsm','fsm_example:a/1',[]],['fun','plain_fsm','fsm_example:b/1',[]],['fun','plain_fsm','fsm_example:code_change/3',[]],['fun','plain_fsm','fsm_example:data_vsn/0',[]],['fun','plain_fsm','fsm_example:spawn_link/0',[]],['fun','plain_fsm','plain_fsm:behaviour_info/1','Defines which functions this behaviour expects to '],['fun','plain_fsm','plain_fsm:extended_receive/1','Virtual function used to wrap receive clauses.'],['fun','plain_fsm','plain_fsm:handle_msg/3','Called in a "catch-all" clause within a receive st'],['fun','plain_fsm','plain_fsm:handle_system_msg/4','Called when the process receives a system message.'],['fun','plain_fsm','plain_fsm:hibernate/1','Virtual function used to wrap a call to the BIF er'],['fun','plain_fsm','plain_fsm:info/1','retrieves meta-data for the plain_fsm process.'],['fun','plain_fsm','plain_fsm:parent_EXIT/2','Handles parent termination properly.'],['fun','plain_fsm','plain_fsm:spawn/1','Equivalent to proc_lib:spawn(StartF).'],['fun','plain_fsm','plain_fsm:spawn_link/1','Equivalent to proc_lib:spawn_link(StartF).'],['fun','plain_fsm','plain_fsm:spawn_opt/1','Equivalent to proc_lib:spawn_opt(Node, StartF, Opt'],['fun','plain_fsm','plain_fsm:spawn_opt/1','Equivalent to proc_lib:spawn_opt(StartF, Opts).'],['fun','plain_fsm','plain_fsm:start_opt/1','Similar to proc_lib:start(M,F,A, Timeout, Opts).'],['fun','plain_fsm','plain_fsm:store_name/1','stores an internal name for the FSM       (for sy'],['fun','plain_fsm','plain_fsm:tail_apply/5','Helper function to dispatch blocking calls as tail'],['fun','plain_fsm','plain_fsm:wake_up/5',[]],['fun','plain_fsm','plain_fsm_xform:format_error/1',[]],['fun','plain_fsm','plain_fsm_xform:parse_transform/2',[]]];