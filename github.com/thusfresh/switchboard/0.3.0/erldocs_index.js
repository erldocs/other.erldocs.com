var index = [['app','switchboard','switchboard','[application]'],['mod','switchboard','imap','An RFC 3501 IMAP Client.'],['mod','switchboard','reloader','Erlang module for automatically reloading modified'],['mod','switchboard','rfc2822','rfc2822.'],['mod','switchboard','switchboard','This module provides the main interface to Switchb'],['mod','switchboard','switchboard_accounts','The top level supervisor for an account.'],['mod','switchboard','switchboard_accounts_sup','switchboard_accounts_sup is a simple_one_for_one '],['mod','switchboard','switchboard_idler','Supervisor for an idling IMAP process and the imap'],['mod','switchboard','switchboard_idlers','simple_one_for_one supervisor for imap idling proc'],['mod','switchboard','switchboard_jmap','JMAP command handler.'],['mod','switchboard','switchboard_oauth','Switchboards OAuth functions.'],['mod','switchboard','switchboard_operator','An operator process is paired with a single IMAP i'],['mod','switchboard','switchboard_sup','Top level supervisor for the Switchboard applicati'],['mod','switchboard','switchboard_util','Utility Belt for Switchboard.'],['mod','switchboard','switchboard_workers','This module provides a websocket worker interface.'],['fun','switchboard','imap:auth_to_account/1','Returns the username for the given authorization.'],['fun','switchboard','imap:auth_to_props/1','Returns the auth as a jsx:encodable proplist.'],['fun','switchboard','imap:call/1','Call the command, waiting until timeout for all re'],['fun','switchboard','imap:call/1','Equivalent to call(Server, Cmd, Opts, 5000).'],['fun','switchboard','imap:call/1','Equivalent to call(Server, Cmd, [{dispatch, dispat'],['fun','switchboard','imap:cast/1','Asynchronously cast the cmd.'],['fun','switchboard','imap:cast/1','Equivalent to cast(Server, Cmd, [{dispatch, dispat'],['fun','switchboard','imap:clean/1','Clean a response to be JSON serializable via jsx.'],['fun','switchboard','imap:clean_list/2','Clean list command responses, returning an easier '],['fun','switchboard','imap:get_parts_by_type/2','Returns the fetch parts by type.'],['fun','switchboard','imap:get_parts_by_type/3',[]],['fun','switchboard','imap:recv/0','Equivalent to recv(5000).'],['fun','switchboard','imap:recv/1','Receive responses until receiving an IMAP completi'],['fun','switchboard','imap:start/1','Start a standalone IMAP connection.'],['fun','switchboard','imap:start/1','Equivalent to start(ConnSpec, []).'],['fun','switchboard','imap:start_link/1','Start an IMAP connection as part of the supervisio'],['fun','switchboard','imap:start_link/1','Equivalent to start_link(ConnSpec, []).'],['fun','switchboard','imap:stop/1','Stop the IMAP client.'],['fun','switchboard','reloader:all_changed/0','Return a list of beam modules that have changed.'],['fun','switchboard','reloader:code_change/3','gen_server code_change callback (trivial).'],['fun','switchboard','reloader:handle_call/3','gen_server callback.'],['fun','switchboard','reloader:handle_cast/2','gen_server callback.'],['fun','switchboard','reloader:handle_info/2','gen_server callback.'],['fun','switchboard','reloader:init/1','gen_server init, opens the server in an initial st'],['fun','switchboard','reloader:is_changed/1','true if the loaded module is a beam with a vsn att'],['fun','switchboard','reloader:reload_modules/1','code:purge/1 and code:load_file/1 the given list o'],['fun','switchboard','reloader:start/0','Start the reloader.'],['fun','switchboard','reloader:start_link/0','Start the reloader.'],['fun','switchboard','reloader:stop/0','Stop the reloader.'],['fun','switchboard','reloader:terminate/2','gen_server termination callback.'],['fun','switchboard','rfc2822:decode/1',[]],['fun','switchboard','switchboard:accounts/0','Returns the list of accounts currently being manag'],['fun','switchboard','switchboard:add/1','Add the specified account to be monitored by the s'],['fun','switchboard','switchboard:add/1','Equivalent to add(ConnSpec, Auth, []).'],['fun','switchboard','switchboard:add_mailbox_monitor/1','Add a mailbox to be monitored for the provided acc'],['fun','switchboard','switchboard:await/1','Wraps gprocs await command for Switchboard.'],['fun','switchboard','switchboard:await/1','Equivalent to await(Account, Type, 5000).'],['fun','switchboard','switchboard:checkout/1',[]],['fun','switchboard','switchboard:key_for/2','Returns the key for the given account and process '],['fun','switchboard','switchboard:mailbox_monitors/1','Returns the list of mailboxes which are being moni'],['fun','switchboard','switchboard:publish/1','Publish a message to the Switchboard channel.'],['fun','switchboard','switchboard:register_callback/1','An IMAP InitCallback function used to register the'],['fun','switchboard','switchboard:return/2',[]],['fun','switchboard','switchboard:start/0','Start the Switchboard application.'],['fun','switchboard','switchboard:stop/1','Stop the account from being monitored.'],['fun','switchboard','switchboard:stop_mailbox_monitor/1',[]],['fun','switchboard','switchboard:subscribe/1','Subscribe to Switchboard messages using the provid'],['fun','switchboard','switchboard:unsubscribe/1','Unsubscribe from the provided Switchboard channel.'],['fun','switchboard','switchboard:where/2','Returns the process of type for the provided accou'],['fun','switchboard','switchboard:with_imap/2',[]],['fun','switchboard','switchboard_accounts:start_link/1','Start the switchboard_account_sup as part of a sup'],['fun','switchboard','switchboard_accounts_sup:start_child/1','Add a new child.'],['fun','switchboard','switchboard_accounts_sup:start_link/0','Start the supervisor as part of the supervision tr'],['fun','switchboard','switchboard_accounts_sup:stop_child/1','Stop the child.'],['fun','switchboard','switchboard_idler:start_link/1','start the switchboard_idler supervisor as part of '],['fun','switchboard','switchboard_idlers:start_child/1','start an idler using the provided auth and mailbox'],['fun','switchboard','switchboard_idlers:start_link/1','start the switchboard_idlers supervisor as part of'],['fun','switchboard','switchboard_idlers:stop_child/1','Stop the child which is monitoring the given mailb'],['fun','switchboard','switchboard_jmap:connect/1','Connect a new account using a proplistsconnspec au'],['fun','switchboard','switchboard_jmap:decode/1','Decode a JMAP call binary into a proplist data str'],['fun','switchboard','switchboard_jmap:encode/1','Encode JMAP call proplists as JSON.'],['fun','switchboard','switchboard_jmap:err/1','Create an error message for the JMAP command by in'],['fun','switchboard','switchboard_jmap:err/1','Create an error message using only the error Type.'],['fun','switchboard','switchboard_jmap:mailbox_id/1','Encode a mailboxId from the mailbox name and UID v'],['fun','switchboard','switchboard_jmap:mailbox_name_to_id/1','Returns the mailbox ID given its name.'],['fun','switchboard','switchboard_jmap:message_id/1','Encode a messageId from a mailboxId and UID.'],['fun','switchboard','switchboard_jmap:state_by_account/1','Returns the minimal jmap state using the Account p'],['fun','switchboard','switchboard_oauth:refresh_to_access_token/1','Exchange the refresh token for an access token usi'],['fun','switchboard','switchboard_oauth:refresh_to_access_token/1','Exchange the refresh token for an access token usi'],['fun','switchboard','switchboard_operator:get_last_uid/1','Returns the operators last known UID.'],['fun','switchboard','switchboard_operator:start_link/1','Start the operator as part of the supervision tree'],['fun','switchboard','switchboard_operator:stop/1','Stop the operator.'],['fun','switchboard','switchboard_operator:update_uid/1','Commands for the operator to update its state usin'],['fun','switchboard','switchboard_sup:start_link/0','Start the supervisor as part of the supervision tr'],['fun','switchboard','switchboard_util:await_death/1','Await the death of the process.'],['fun','switchboard','switchboard_util:await_death/1','Equivalent to await_death(Pid, 5000).'],['fun','switchboard','switchboard_util:get_values/1','Returns the list of Values for the provided Keys f'],['fun','switchboard','switchboard_util:reprop/2','Alter a proplists keys according to Mapping.'],['fun','switchboard','switchboard_util:take_first/1','Returns the first element that matches the predica']];