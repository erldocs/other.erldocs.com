var index = [['app','tulib','tulib','[application]'],['mod','tulib','tulib_atoms','Atom-related utility functions.'],['mod','tulib','tulib_behaviours','Utilities for working with Erlang behavio(u)rs.'],['mod','tulib','tulib_call','Function invocation.'],['mod','tulib','tulib_combinators','Combinators.'],['mod','tulib','tulib_crdt_op','Op-based CRDT behaviour.'],['mod','tulib','tulib_crdt_state','State-based CRDT behaviour.'],['mod','tulib','tulib_csets','Counting sets.'],['mod','tulib','tulib_deployer','Automagically deploy local changes on remote nodes'],['mod','tulib','tulib_dlogs','Simplified interface to disk_log.'],['mod','tulib','tulib_export','Exporter.'],['mod','tulib','tulib_fs','Filesystem-related utility functions.'],['mod','tulib','tulib_fsms','Mealy machines.'],['mod','tulib','tulib_g_counters','Increment-only counters.'],['mod','tulib','tulib_gen_cache','BETA: Write-through ETS caches.'],['mod','tulib','tulib_gen_db','BETA: A behaviour for simple, efficient, small dat'],['mod','tulib','tulib_gen_lb','ALPHA: Load-balance requests across a cluster of g'],['mod','tulib','tulib_gen_lock','BETA: Generic lock manager.'],['mod','tulib','tulib_gen_proxy','BETA: Layer 7 proxies.'],['mod','tulib','tulib_hex','Base 16 ASCII armor.'],['mod','tulib','tulib_lists','List-related utility functions.'],['mod','tulib','tulib_loops','Iterate!'],['mod','tulib','tulib_maps','Nested dictionaries.'],['mod','tulib','tulib_maybe','Composable error handling.'],['mod','tulib','tulib_nodes','Control Erlang nodes programatically.'],['mod','tulib','tulib_par','Parallel computation.'],['mod','tulib','tulib_pn_counters','Replicated integers.'],['mod','tulib','tulib_pool','Yet another worker pool.'],['mod','tulib','tulib_predicates','Utility predicates.'],['mod','tulib','tulib_processes','Process-related utility functions.'],['mod','tulib','tulib_pw','ALPHA: Password hashing.'],['mod','tulib','tulib_random','Utility functions for generating random numbers an'],['mod','tulib','tulib_sh','Safe and convenient procedures for interacting wit'],['mod','tulib','tulib_sockets','BETA: Simplified interface to gen_tcp.'],['mod','tulib','tulib_strats','BETA: Default supervision strategies.'],['mod','tulib','tulib_util','Miscellaneous.'],['mod','tulib','tulib_vclocks','Vector clocks.'],['fun','tulib','tulib_atoms:catenate/1','Turn a list of terms into an atom.'],['fun','tulib','tulib_atoms:gensym/0','Generate a fresh atom.'],['fun','tulib','tulib_atoms:gensym/1',[]],['fun','tulib','tulib_behaviours:add_args/1','Rewrite behaviour info to account for e.g.'],['fun','tulib','tulib_behaviours:extend/1','Inherit from Module and add NewCallbacks.'],['fun','tulib','tulib_behaviours:implements/1','Indicate whether Module implements Behaviour.'],['fun','tulib','tulib_behaviours:implements_attr/1','Indicate whether Module claims to implement Behavi'],['fun','tulib','tulib_behaviours:implements_duck/1','Indicate whether Module seems to implement Behavio'],['fun','tulib','tulib_call:dispatch/1','Call MFA where M is the result of applying ModuleM'],['fun','tulib','tulib_call:multi_dispatch/1','Call MFA for each M resulting from applying Module'],['fun','tulib','tulib_call:multicall/1','Call MFA for all M in Modules.'],['fun','tulib','tulib_call:reduce/1',[]],['fun','tulib','tulib_call:unwind_with/1',[]],['fun','tulib','tulib_combinators:compose/1',[]],['fun','tulib','tulib_combinators:compose/2',[]],['fun','tulib','tulib_combinators:compose/3',[]],['fun','tulib','tulib_combinators:compose/4',[]],['fun','tulib','tulib_combinators:compose/5',[]],['fun','tulib','tulib_combinators:compose/6',[]],['fun','tulib','tulib_combinators:compose/7',[]],['fun','tulib','tulib_combinators:fix/1',[]],['fun','tulib','tulib_combinators:fix/3',[]],['fun','tulib','tulib_combinators:flip/2',[]],['fun','tulib','tulib_combinators:i/1',[]],['fun','tulib','tulib_combinators:k/1',[]],['fun','tulib','tulib_combinators:s/1',[]],['fun','tulib','tulib_crdt_op:behaviour_info/1',[]],['fun','tulib','tulib_crdt_state:behaviour_info/1',[]],['fun','tulib','tulib_csets:add_element/1',[]],['fun','tulib','tulib_csets:cnt_element/1',[]],['fun','tulib','tulib_csets:del_element/1',[]],['fun','tulib','tulib_csets:is_cset/1',[]],['fun','tulib','tulib_csets:is_element/1',[]],['fun','tulib','tulib_csets:mode/1',[]],['fun','tulib','tulib_csets:new/0',[]],['fun','tulib','tulib_csets:new/1',[]],['fun','tulib','tulib_csets:to_list/1',[]],['fun','tulib','tulib_csets:toggle/1',[]],['fun','tulib','tulib_csets:union/1',[]],['fun','tulib','tulib_deployer:code_change/3',[]],['fun','tulib','tulib_deployer:handle_call/3',[]],['fun','tulib','tulib_deployer:handle_cast/2',[]],['fun','tulib','tulib_deployer:handle_info/2',[]],['fun','tulib','tulib_deployer:init/1',[]],['fun','tulib','tulib_deployer:load/1',[]],['fun','tulib','tulib_deployer:start/0',[]],['fun','tulib','tulib_deployer:start/1',[]],['fun','tulib','tulib_deployer:stop/0',[]],['fun','tulib','tulib_deployer:terminate/2',[]],['fun','tulib','tulib_dlogs:bump/1','Start a new wrap-log file.'],['fun','tulib','tulib_dlogs:chunk/1','Return the current chunk.'],['fun','tulib','tulib_dlogs:close/1','Close Log.'],['fun','tulib','tulib_dlogs:eachchunk/1','Apply F to each chunk in File.'],['fun','tulib','tulib_dlogs:eachterm/1','Apply F to each term in File.'],['fun','tulib','tulib_dlogs:file/1','Return the name of the file associated with Log.'],['fun','tulib','tulib_dlogs:foldchunks/1','Reduce the chunks in File to Acc0 via F.'],['fun','tulib','tulib_dlogs:foldterms/1','Reduce the terms in File to Acc0 via F.'],['fun','tulib','tulib_dlogs:iterator/1','Return a chunk-iterator for Dlog.'],['fun','tulib','tulib_dlogs:log/1','Append Term to Log.'],['fun','tulib','tulib_dlogs:open/1','Open File as a read/write disk_log.'],['fun','tulib','tulib_dlogs:peek/1','Return the term at the beginning of File.'],['fun','tulib','tulib_dlogs:popen/1','Open File as a read-only disk_log.'],['fun','tulib','tulib_dlogs:step/1','Advance I by one.'],['fun','tulib','tulib_dlogs:sync/1','Sync Log to disk.'],['fun','tulib','tulib_dlogs:traverse/1','Generic disk_log iterator.'],['fun','tulib','tulib_dlogs:with_dlog/1','Open File as a dlog, apply F to this dlog, then cl'],['fun','tulib','tulib_dlogs:wopen/1','Open File as a wrap disk_log.'],['fun','tulib','tulib_export:all/1','Recompile Mod with export_all, without access to t'],['fun','tulib','tulib_export:call/1','Call M:F(A) when M doesnt export F.'],['fun','tulib','tulib_export:parse_transform/2',[]],['fun','tulib','tulib_fs:read/1','Read an Erlang term from File.'],['fun','tulib','tulib_fs:with_fd/1','Apply F to a file descriptor pointing to File.'],['fun','tulib','tulib_fs:with_fds/1','Apply F to a list of file descriptors pointing to '],['fun','tulib','tulib_fs:with_temp_fd/1','Apply F to a two-tuple: the name of a temporary fi'],['fun','tulib','tulib_fs:with_temp_fd/2',[]],['fun','tulib','tulib_fs:with_temp_fds/1','Apply F to a list of N two-tuples (c.f.'],['fun','tulib','tulib_fs:with_temp_file/1','Apply F to the name of a temporary file.'],['fun','tulib','tulib_fs:with_temp_file/2',[]],['fun','tulib','tulib_fs:with_temp_files/1','Apply F to a list of names of temporary files.'],['fun','tulib','tulib_fs:write/1','Write an Erlang term to File.'],['fun','tulib','tulib_fsms:consume/1',[]],['fun','tulib','tulib_fsms:current_state/1',[]],['fun','tulib','tulib_fsms:new/1',[]],['fun','tulib','tulib_g_counters:=</2',[]],['fun','tulib','tulib_g_counters:inc/2',[]],['fun','tulib','tulib_g_counters:m/2',[]],['fun','tulib','tulib_g_counters:merge/2',[]],['fun','tulib','tulib_g_counters:new/0',[]],['fun','tulib','tulib_g_counters:q/1',[]],['fun','tulib','tulib_g_counters:s0/0',[]],['fun','tulib','tulib_g_counters:u/2',[]],['fun','tulib','tulib_g_counters:val/1',[]],['fun','tulib','tulib_gen_cache:behaviour_info/1',[]],['fun','tulib','tulib_gen_cache:cache/1',[]],['fun','tulib','tulib_gen_cache:code_change/3',[]],['fun','tulib','tulib_gen_cache:handle_call/3',[]],['fun','tulib','tulib_gen_cache:handle_cast/2',[]],['fun','tulib','tulib_gen_cache:handle_info/2',[]],['fun','tulib','tulib_gen_cache:init/1',[]],['fun','tulib','tulib_gen_cache:insert/1','Write Val to backing store and update cache if nee'],['fun','tulib','tulib_gen_cache:invalidate/1','Inform Cache about {Tab, Key}s invalidity.'],['fun','tulib','tulib_gen_cache:lookup/1','Return the cached value for {Tab, Key} or read it '],['fun','tulib','tulib_gen_cache:start/1',[]],['fun','tulib','tulib_gen_cache:start/2',[]],['fun','tulib','tulib_gen_cache:start_link/1',[]],['fun','tulib','tulib_gen_cache:start_link/2',[]],['fun','tulib','tulib_gen_cache:stop/1',[]],['fun','tulib','tulib_gen_cache:terminate/2',[]],['fun','tulib','tulib_gen_db:behaviour_info/1',[]],['fun','tulib','tulib_gen_db:close/1',[]],['fun','tulib','tulib_gen_db:code_change/3',[]],['fun','tulib','tulib_gen_db:delete/2',[]],['fun','tulib','tulib_gen_db:handle_call/3',[]],['fun','tulib','tulib_gen_db:handle_cast/2',[]],['fun','tulib','tulib_gen_db:handle_info/2',[]],['fun','tulib','tulib_gen_db:init/1',[]],['fun','tulib','tulib_gen_db:insert/2',[]],['fun','tulib','tulib_gen_db:lookup/2',[]],['fun','tulib','tulib_gen_db:new/2',[]],['fun','tulib','tulib_gen_db:open/2',[]],['fun','tulib','tulib_gen_db:terminate/2',[]],['fun','tulib','tulib_gen_lb:code_change/3',[]],['fun','tulib','tulib_gen_lb:handle_call/3',[]],['fun','tulib','tulib_gen_lb:handle_cast/2',[]],['fun','tulib','tulib_gen_lb:handle_info/2',[]],['fun','tulib','tulib_gen_lb:init/1',[]],['fun','tulib','tulib_gen_lb:start/1',[]],['fun','tulib','tulib_gen_lb:start/2',[]],['fun','tulib','tulib_gen_lb:start_link/1',[]],['fun','tulib','tulib_gen_lb:start_link/2',[]],['fun','tulib','tulib_gen_lb:stop/1',[]],['fun','tulib','tulib_gen_lb:terminate/2',[]],['fun','tulib','tulib_gen_lock:code_change/3',[]],['fun','tulib','tulib_gen_lock:handle_call/3',[]],['fun','tulib','tulib_gen_lock:handle_cast/2',[]],['fun','tulib','tulib_gen_lock:handle_info/2',[]],['fun','tulib','tulib_gen_lock:init/1',[]],['fun','tulib','tulib_gen_lock:start/0',[]],['fun','tulib','tulib_gen_lock:start/1',[]],['fun','tulib','tulib_gen_lock:start_link/0',[]],['fun','tulib','tulib_gen_lock:start_link/1',[]],['fun','tulib','tulib_gen_lock:stop/1',[]],['fun','tulib','tulib_gen_lock:terminate/2',[]],['fun','tulib','tulib_gen_lock:with_lock/1','Execute Thunk while holding Lock.'],['fun','tulib','tulib_gen_proxy:add/1','Add Tab to the router as Name.'],['fun','tulib','tulib_gen_proxy:behaviour_info/1',[]],['fun','tulib','tulib_gen_proxy:code_change/3',[]],['fun','tulib','tulib_gen_proxy:forward/1','Forward request as determined by the currently loa'],['fun','tulib','tulib_gen_proxy:get_current/1','Return the name of the current table.'],['fun','tulib','tulib_gen_proxy:get_default/1','Return the name of the default table.'],['fun','tulib','tulib_gen_proxy:handle_call/3',[]],['fun','tulib','tulib_gen_proxy:handle_cast/2',[]],['fun','tulib','tulib_gen_proxy:handle_info/2',[]],['fun','tulib','tulib_gen_proxy:init/1',[]],['fun','tulib','tulib_gen_proxy:load/1','Load Name for the next N requests, or T millisecon'],['fun','tulib','tulib_gen_proxy:load/1','Load table Name for the next N requests (then reve'],['fun','tulib','tulib_gen_proxy:load/1','Load table Name.'],['fun','tulib','tulib_gen_proxy:set_default/1','Set Name as the default table iff the router knows'],['fun','tulib','tulib_gen_proxy:start/1',[]],['fun','tulib','tulib_gen_proxy:start/1',[]],['fun','tulib','tulib_gen_proxy:start_link/1',[]],['fun','tulib','tulib_gen_proxy:start_link/1',[]],['fun','tulib','tulib_gen_proxy:stop/1',[]],['fun','tulib','tulib_gen_proxy:terminate/2',[]],['fun','tulib','tulib_gen_proxy:unload/1','Revert to default table iff Name is currently load'],['fun','tulib','tulib_hex:decode/1','Decode the output of encode/1.'],['fun','tulib','tulib_hex:encode/1','Encode an arbitrary Erlang term as a lowercase ASC'],['fun','tulib','tulib_lists:all/1','Indicate whether Xs contains only true.'],['fun','tulib','tulib_lists:assoc/3',[]],['fun','tulib','tulib_lists:assoc/3','Lookup Key in Alist.'],['fun','tulib','tulib_lists:assoc_delete/3','Remove all entries associated with Key from Alist.'],['fun','tulib','tulib_lists:assoc_update/2',[]],['fun','tulib','tulib_lists:assoc_update/2',[]],['fun','tulib','tulib_lists:butlast/2','Return Xs (assumed to be non-empty) without its la'],['fun','tulib','tulib_lists:cons/1',[]],['fun','tulib','tulib_lists:cons/1','Cons car onto cdr.'],['fun','tulib','tulib_lists:drop/1','Return Xs without its first N elements.'],['fun','tulib','tulib_lists:ensure/1','Return a list.'],['fun','tulib','tulib_lists:exists/1','Indicate whether Xs contains at least one true.'],['fun','tulib','tulib_lists:find/1','Return the first element of Xs for which Pred retu'],['fun','tulib','tulib_lists:find_result/1','Return the result of applying F to the first eleme'],['fun','tulib','tulib_lists:flatrev/1','Flatten and reverse Xs.'],['fun','tulib','tulib_lists:intersperse/1','Intersperse X into Ys.'],['fun','tulib','tulib_lists:join/1','Shallow flatten/1.'],['fun','tulib','tulib_lists:keyfilter/3','Return all elements of Alist with a key equal to K'],['fun','tulib','tulib_lists:max/2','Return the maximum of Xs.'],['fun','tulib','tulib_lists:min/2','Return the minimum of Xs.'],['fun','tulib','tulib_lists:multikeyfilter/3','Return all elements of Alist with a key in Ks.'],['fun','tulib','tulib_lists:numbered/1','Return Xs with its elements numbered from 1.'],['fun','tulib','tulib_lists:partition/1','Split Xs into sublists of N elements each.'],['fun','tulib','tulib_lists:pickwith/1','Try to find an element satisfying Pred in List.'],['fun','tulib','tulib_lists:repeatedly/1','Call F N times and return a list of the results.'],['fun','tulib','tulib_lists:seq/1','Return a list of integers from 1 to N.'],['fun','tulib','tulib_lists:strict_partition/1','Split Xs into sublists of exactly N elements each.'],['fun','tulib','tulib_lists:take/1','Return the first N elements of Xs.'],['fun','tulib','tulib_lists:to_list/1','Return the list-representation of X.'],['fun','tulib','tulib_loops:do/1','Call F, N times.'],['fun','tulib','tulib_loops:retry/1','Call F every T milliseconds until it returns somet'],['fun','tulib','tulib_loops:retry/2',[]],['fun','tulib','tulib_loops:retry/3',[]],['fun','tulib','tulib_maps:delete/2','Prune everything below Ks from Map.'],['fun','tulib','tulib_maps:get/2','Look up the value associated with the leaf reachab'],['fun','tulib','tulib_maps:get/3',[]],['fun','tulib','tulib_maps:new/0','Return a fresh map.'],['fun','tulib','tulib_maps:set/2','Set the leaf reachable via Ks in Map to V.'],['fun','tulib','tulib_maps:to_list/1','Return the list-representation of Map.'],['fun','tulib','tulib_maps:update/2','Update the leaf reachable via Ks in Map to the res'],['fun','tulib','tulib_maybe:-?>/1','Thread X through Fs, as the first argument.'],['fun','tulib','tulib_maybe:-?>>/1','Thread X through Fs, as the last argument.'],['fun','tulib','tulib_maybe:cps/1','Lift Thunk into maybe(), then apply Ok or Error to'],['fun','tulib','tulib_maybe:do/1','Call the functions Fs in sequence until either one'],['fun','tulib','tulib_maybe:lift/1','Lift F into maybe(); unwind via G.'],['fun','tulib','tulib_maybe:lift/1','Ensure that the result of F, which must be a thunk'],['fun','tulib','tulib_maybe:lift_with/1','Apply F to X and lift the result into maybe(); unw'],['fun','tulib','tulib_maybe:lift_with/1','Apply F to X and lift the result into maybe().'],['fun','tulib','tulib_maybe:map/1','Map F over Xs and lift the result into maybe().'],['fun','tulib','tulib_maybe:partition/2','Partition a list of values in maybe() into a list '],['fun','tulib','tulib_maybe:reduce/1',[]],['fun','tulib','tulib_maybe:reduce/1','Reduce F into Xs and lift the result into maybe().'],['fun','tulib','tulib_maybe:to_bool/1','Interpret a value in maybe() as a value in boolean'],['fun','tulib','tulib_maybe:unlift/1','Ensure that the result of F, which must be a thunk'],['fun','tulib','tulib_maybe:untag/1','Convert a value in maybe() into a term or an excep'],['fun','tulib','tulib_nodes:net_kernel_start/0',[]],['fun','tulib','tulib_nodes:start/1','Start a node with shortname Name.'],['fun','tulib','tulib_nodes:stop/1','Stop Node.'],['fun','tulib','tulib_par:eval/1','Evaluate F for each element of Xs in parallel.'],['fun','tulib','tulib_par:eval/2',[]],['fun','tulib','tulib_par:eval/3',[]],['fun','tulib','tulib_pn_counters:=</2',[]],['fun','tulib','tulib_pn_counters:dec/2',[]],['fun','tulib','tulib_pn_counters:inc/2',[]],['fun','tulib','tulib_pn_counters:m/2',[]],['fun','tulib','tulib_pn_counters:merge/2',[]],['fun','tulib','tulib_pn_counters:new/0',[]],['fun','tulib','tulib_pn_counters:q/1',[]],['fun','tulib','tulib_pn_counters:s0/0',[]],['fun','tulib','tulib_pn_counters:u/2',[]],['fun','tulib','tulib_pn_counters:val/1',[]],['fun','tulib','tulib_pool:behaviour_info/1',[]],['fun','tulib','tulib_pool:code_change/3',[]],['fun','tulib','tulib_pool:flush/1','wait for all tasks to finish, block new tasks.'],['fun','tulib','tulib_pool:flush/1',[]],['fun','tulib','tulib_pool:handle_call/3',[]],['fun','tulib','tulib_pool:handle_cast/2',[]],['fun','tulib','tulib_pool:handle_info/2',[]],['fun','tulib','tulib_pool:init/1',[]],['fun','tulib','tulib_pool:run/1','run a task synchronously.'],['fun','tulib','tulib_pool:run/2',[]],['fun','tulib','tulib_pool:run/3',[]],['fun','tulib','tulib_pool:run_async/1','run a task asynchronously.'],['fun','tulib','tulib_pool:run_async/2',[]],['fun','tulib','tulib_pool:run_async/3',[]],['fun','tulib','tulib_pool:run_async_wait/1','run a task asynchronously, block until a worker is'],['fun','tulib','tulib_pool:run_async_wait/2',[]],['fun','tulib','tulib_pool:run_async_wait/3',[]],['fun','tulib','tulib_pool:start/1',[]],['fun','tulib','tulib_pool:start/2',[]],['fun','tulib','tulib_pool:start_link/1',[]],['fun','tulib','tulib_pool:start_link/2',[]],['fun','tulib','tulib_pool:stop/1',[]],['fun','tulib','tulib_pool:terminate/2',[]],['fun','tulib','tulib_predicates:is_ip_address/1',[]],['fun','tulib','tulib_predicates:is_ip_port/1',[]],['fun','tulib','tulib_predicates:is_list_of/2',[]],['fun','tulib','tulib_predicates:is_nonempty_list_of/2',[]],['fun','tulib','tulib_predicates:is_permutation/2','Return true iff Xs is a permutation of Ys.'],['fun','tulib','tulib_processes:call/1','Perform a synchronous call to Proc.'],['fun','tulib','tulib_processes:call/3',[]],['fun','tulib','tulib_processes:demonitor/1','Attempt to remove a monitor from Proc.'],['fun','tulib','tulib_processes:demonitor/2',[]],['fun','tulib','tulib_processes:flush/0','Empty the message queue of the calling process.'],['fun','tulib','tulib_processes:flush/1','Empty the message queue of the calling process of '],['fun','tulib','tulib_processes:is_up/1','Return true iff Proc is running.'],['fun','tulib','tulib_processes:kill/1','Kill processes unconditionally.'],['fun','tulib','tulib_processes:kill/2',[]],['fun','tulib','tulib_processes:monitor/1','Add a monitor to Proc.'],['fun','tulib','tulib_processes:pid/1','Return Ps pid.'],['fun','tulib','tulib_processes:recv/1','Receive a message from P.'],['fun','tulib','tulib_processes:recv/2',[]],['fun','tulib','tulib_processes:send/1','Send P a Msg.'],['fun','tulib','tulib_processes:spawn_monitor/1',[]],['fun','tulib','tulib_processes:spawn_monitor/1',[]],['fun','tulib','tulib_processes:spawn_register/1',[]],['fun','tulib','tulib_processes:spawn_register/1',[]],['fun','tulib','tulib_processes:sync_registered/1','Spinlock until Regname has been registered.'],['fun','tulib','tulib_processes:sync_unregistered/1','Spinlock until Regname has been unregistered.'],['fun','tulib','tulib_processes:sync_with/1','Sync with Pid, which must call syncing_with/2.'],['fun','tulib','tulib_processes:syncing_with/1','Execute thunk, then sync with Pid, which must call'],['fun','tulib','tulib_processes:with_monitor/1',[]],['fun','tulib','tulib_pw:hash/1','Hash PW.'],['fun','tulib','tulib_pw:verify/1','Return true iff PW hashes to Hash.'],['fun','tulib','tulib_random:numbers/1','Return a list of random numbers between 0 and Max '],['fun','tulib','tulib_random:pick/1','Randomly select an element from Xs.'],['fun','tulib','tulib_random:shuffle/1','Return a random permutation of Xs.'],['fun','tulib','tulib_sh:cp/1','Copy Src to Dest.'],['fun','tulib','tulib_sh:eval/1','Pipe Stdin into Cmd.'],['fun','tulib','tulib_sh:eval/1','Evaluate Cmd via os:cmd/1.'],['fun','tulib','tulib_sh:host/1','Return the IP address associated with a hostname o'],['fun','tulib','tulib_sh:ls/1','Return a list of the filenames in Dir.'],['fun','tulib','tulib_sh:mkdir/1','Create the directory Dir.'],['fun','tulib','tulib_sh:mkdir_p/1','Create the directory Dir and any necessary parent '],['fun','tulib','tulib_sh:mktemp/0','Create a file with a name that is probably unique.'],['fun','tulib','tulib_sh:mktemp/1',[]],['fun','tulib','tulib_sh:mktemp/2',[]],['fun','tulib','tulib_sh:mktemp_d/0','Create a unique directory and return its name.'],['fun','tulib','tulib_sh:mktemp_d/1',[]],['fun','tulib','tulib_sh:mktemp_d/2',[]],['fun','tulib','tulib_sh:mktemp_u/0','Unsafe mktemp.'],['fun','tulib','tulib_sh:mktemp_u/1',[]],['fun','tulib','tulib_sh:mktemp_u/2',[]],['fun','tulib','tulib_sh:mv/1','Rename OldPath to NewPath.'],['fun','tulib','tulib_sh:rm_rf/1','Recursively remove everything under Path.'],['fun','tulib','tulib_sh:rmdir/1','Remove Dir.'],['fun','tulib','tulib_sh:touch/1','Update Files ctime.'],['fun','tulib','tulib_sockets:accept/1','Accept a connection on Lsock.'],['fun','tulib','tulib_sockets:box/2',[]],['fun','tulib','tulib_sockets:close/1','Close the connection on Sock.'],['fun','tulib','tulib_sockets:connect/1','Connect to IP/Port.'],['fun','tulib','tulib_sockets:connect/2',[]],['fun','tulib','tulib_sockets:listen/1','Listen for TCP/IP connection attempts on Port.'],['fun','tulib','tulib_sockets:recv/1',[]],['fun','tulib','tulib_sockets:recv/2',[]],['fun','tulib','tulib_sockets:send/1',[]],['fun','tulib','tulib_sockets:with_socket/1','Apply F to a socket connected to Box.'],['fun','tulib','tulib_sockets:with_socket/3',[]],['fun','tulib','tulib_strats:permanent_worker_spec/1',[]],['fun','tulib','tulib_strats:permanent_worker_spec/2',[]],['fun','tulib','tulib_strats:supervisor_spec/1',[]],['fun','tulib','tulib_strats:supervisor_spec/2',[]],['fun','tulib','tulib_strats:supervisor_supervisor_strat/1','Return our default spec for supervisors which supe'],['fun','tulib','tulib_strats:transient_worker_spec/1',[]],['fun','tulib','tulib_strats:transient_worker_spec/2',[]],['fun','tulib','tulib_strats:worker_supervisor_strat/1','Return our default spec for supervisors which supe'],['fun','tulib','tulib_util:consult_string/1','Parse String as an Erlang term.'],['fun','tulib','tulib_util:die/1','Print a message and halt the emulator.'],['fun','tulib','tulib_util:die/2',[]],['fun','tulib','tulib_util:get_arg/1','Get the value associated with Param in either Args'],['fun','tulib','tulib_util:get_arg/4',[]],['fun','tulib','tulib_util:get_env/1','Get the value associated with Param in the environ'],['fun','tulib','tulib_util:get_env/3',[]],['fun','tulib','tulib_util:get_stacktrace/0','Get the trace leading up to the current frame.'],['fun','tulib','tulib_util:size/1','Return a lower bound on the heap-size (in bytes) o'],['fun','tulib','tulib_util:timestamp/0','Return the number of microseconds passed since the'],['fun','tulib','tulib_util:timestamp/1',[]],['fun','tulib','tulib_util:with_app/1','Call Thunk once application App has been started.'],['fun','tulib','tulib_util:with_env/1','Call thunk with the environment set to Env.'],['fun','tulib','tulib_util:with_env/1','Call Thunk with the environment for App set to Env'],['fun','tulib','tulib_util:with_resource/1','Call Setup, then Thunk, then Cleanup.'],['fun','tulib','tulib_util:with_sys/1','Call Thunk with application environment Env and st'],['fun','tulib','tulib_vclocks:compare/1','Indicate C1s relation to C2.'],['fun','tulib','tulib_vclocks:increment/1','Increment site Ss counter by one.'],['fun','tulib','tulib_vclocks:is_vclock/1',[]],['fun','tulib','tulib_vclocks:merge/1','Return the supremum of C1 and C2.'],['fun','tulib','tulib_vclocks:new/0','Return a fresh vector clock.'],['fun','tulib','tulib_vclocks:prune/1','Remove entries for sites for which Pred returns tr'],['fun','tulib','tulib_vclocks:size/1','Return the number of entries in C.']];