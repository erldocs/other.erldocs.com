var index = [['app','stdlib2','stdlib2','[application]'],['mod','stdlib2','s2_atoms','Atoms.'],['mod','stdlib2','s2_csets','Counting sets.'],['mod','stdlib2','s2_env','Environment.'],['mod','stdlib2','s2_fs','Filesystem.'],['mod','stdlib2','s2_funs','Functions.'],['mod','stdlib2','s2_gen_db','A behaviour for simple, efficient, small databases'],['mod','stdlib2','s2_gen_lattice','A behaviour for lattice-style data types.'],['mod','stdlib2','s2_hex','Base 16 ASCII armor.'],['mod','stdlib2','s2_lists','Lists.'],['mod','stdlib2','s2_loop','Loops.'],['mod','stdlib2','s2_maps','Nested dictionaries.'],['mod','stdlib2','s2_maybe','The Maybe Monad.'],['mod','stdlib2','s2_par','Parallel evaluation.'],['mod','stdlib2','s2_pn_counters','Commutative counters.'],['mod','stdlib2','s2_procs','Processes.'],['mod','stdlib2','s2_rand','Randomness.'],['mod','stdlib2','s2_sh','Erlang versions of common Unix shell commands.'],['mod','stdlib2','s2_strats','Simple supervision strategies.'],['mod','stdlib2','s2_time','Time.'],['mod','stdlib2','s2_util','Miscellaneous.'],['mod','stdlib2','s2_vclocks','Vector clocks.'],['fun','stdlib2','s2_atoms:catenate/1','catenate(Args) is the concatenation of Args as an '],['fun','stdlib2','s2_atoms:gensym/0','gensym() is a fresh atom.'],['fun','stdlib2','s2_atoms:gensym/1',[]],['fun','stdlib2','s2_csets:add_element/1',[]],['fun','stdlib2','s2_csets:cnt_element/1',[]],['fun','stdlib2','s2_csets:compare/1',[]],['fun','stdlib2','s2_csets:del_element/1',[]],['fun','stdlib2','s2_csets:is_cset/1',[]],['fun','stdlib2','s2_csets:is_element/1',[]],['fun','stdlib2','s2_csets:is_mode/1',[]],['fun','stdlib2','s2_csets:is_subset/1',[]],['fun','stdlib2','s2_csets:merge/1',[]],['fun','stdlib2','s2_csets:mode/1',[]],['fun','stdlib2','s2_csets:new/0',[]],['fun','stdlib2','s2_csets:toggle/1',[]],['fun','stdlib2','s2_csets:union/1',[]],['fun','stdlib2','s2_csets:update/1',[]],['fun','stdlib2','s2_csets:value/1',[]],['fun','stdlib2','s2_env:ensure_started/1','Ensure that Apps are started.'],['fun','stdlib2','s2_env:get_arg/2','get_arg(Args, App, Param, Def) is the value associ'],['fun','stdlib2','s2_env:get_arg/2','get_arg(Args, App, Param, Def) is the value associ'],['fun','stdlib2','s2_env:with_sys/1','with_sys(Sys, Thunk) is the result of calling Thun'],['fun','stdlib2','s2_fs:read/1',[]],['fun','stdlib2','s2_fs:with_fd/1',[]],['fun','stdlib2','s2_fs:with_fds/1',[]],['fun','stdlib2','s2_fs:with_temp_dir/1',[]],['fun','stdlib2','s2_fs:with_temp_dir/2',[]],['fun','stdlib2','s2_fs:with_temp_dirs/1',[]],['fun','stdlib2','s2_fs:with_temp_fd/1',[]],['fun','stdlib2','s2_fs:with_temp_fd/2',[]],['fun','stdlib2','s2_fs:with_temp_fds/1',[]],['fun','stdlib2','s2_fs:with_temp_file/1',[]],['fun','stdlib2','s2_fs:with_temp_file/2',[]],['fun','stdlib2','s2_fs:with_temp_files/1',[]],['fun','stdlib2','s2_fs:write/1',[]],['fun','stdlib2','s2_funs:fix/1','fix(F, X) is the fixpoint of F.'],['fun','stdlib2','s2_funs:fix/3',[]],['fun','stdlib2','s2_funs:flip/2','flip(F) is F with reversed argument order.'],['fun','stdlib2','s2_funs:o/1','(o([F, G]))(X) is F(G(X)).'],['fun','stdlib2','s2_funs:o/2',[]],['fun','stdlib2','s2_funs:o/3',[]],['fun','stdlib2','s2_funs:reduce/1','reduce(F) is the value of F.'],['fun','stdlib2','s2_funs:unwind_with/2','See s2_fs.erl for use cases.'],['fun','stdlib2','s2_gen_db:behaviour_info/1',[]],['fun','stdlib2','s2_gen_db:close/1',[]],['fun','stdlib2','s2_gen_db:code_change/3',[]],['fun','stdlib2','s2_gen_db:delete/2',[]],['fun','stdlib2','s2_gen_db:handle_call/3',[]],['fun','stdlib2','s2_gen_db:handle_cast/2',[]],['fun','stdlib2','s2_gen_db:handle_info/2',[]],['fun','stdlib2','s2_gen_db:init/1',[]],['fun','stdlib2','s2_gen_db:insert/2',[]],['fun','stdlib2','s2_gen_db:lookup/2',[]],['fun','stdlib2','s2_gen_db:new/2',[]],['fun','stdlib2','s2_gen_db:open/2',[]],['fun','stdlib2','s2_gen_db:terminate/2',[]],['fun','stdlib2','s2_gen_lattice:behaviour_info/1',[]],['fun','stdlib2','s2_gen_lattice:resolve/1','resolve(Mod, Elt1, Elt2) is the least upper bound '],['fun','stdlib2','s2_hex:decode/1','Decode the output of encode/1.'],['fun','stdlib2','s2_hex:encode/1','Encode an arbitrary Erlang term as a lowercase ASC'],['fun','stdlib2','s2_lists:assoc/2','assoc(KVs, K, Def) is the value associated with K '],['fun','stdlib2','s2_lists:assoc/2','assoc(KVs, K) is the value associated with K in KV'],['fun','stdlib2','s2_lists:butlast/2','butlast(Xs) is Xs with its last element removed.'],['fun','stdlib2','s2_lists:cons/1',[]],['fun','stdlib2','s2_lists:cons/1','cons(Car, Cdr) is Car consed unto Cdr.'],['fun','stdlib2','s2_lists:dissoc/2','dissoc(KVs, K) is KVs with all K-entries removed.'],['fun','stdlib2','s2_lists:drop/1','drop(N, Xs) is the Nth tail of Xs (empty if Xs has'],['fun','stdlib2','s2_lists:intersperse/1','intersperse(X, Ys) is Ys with X interspersed.'],['fun','stdlib2','s2_lists:is_permutation/2','is_permutation(Xs, Ys) is true iff Xs is a permuta'],['fun','stdlib2','s2_lists:partition/1','partition(N, Xs) is a list of N-partitions of Xs.'],['fun','stdlib2','s2_lists:repeatedly/1','repeatedly(N, F) is a list of the results of N cal'],['fun','stdlib2','s2_lists:take/1','take(N, Xs) is a list containing the first N eleme'],['fun','stdlib2','s2_lists:to_list/1','to_list(X) is the list-representation of X.'],['fun','stdlib2','s2_loop:for/1','for(N, F) causes F to be called N times.'],['fun','stdlib2','s2_loop:for/3',[]],['fun','stdlib2','s2_loop:retry/1','Call F every T milliseconds until it returns somet'],['fun','stdlib2','s2_loop:retry/2',[]],['fun','stdlib2','s2_loop:retry/3',[]],['fun','stdlib2','s2_maps:delete/2','Prune everything below Ks from Map.'],['fun','stdlib2','s2_maps:get/2','Look up the value associated with the leaf reachab'],['fun','stdlib2','s2_maps:get/3',[]],['fun','stdlib2','s2_maps:new/0','Return a fresh map.'],['fun','stdlib2','s2_maps:set/2','Set the leaf reachable via Ks in Map to V.'],['fun','stdlib2','s2_maps:to_list/1','Return the list-representation of Map.'],['fun','stdlib2','s2_maps:update/2','Update the leaf reachable via Ks in Map to the res'],['fun','stdlib2','s2_maybe:do/1','doc(Fs) is the result of chaining Fs inside the ma'],['fun','stdlib2','s2_maybe:lift/1','lift(F) is the value of F() lifted into the maybe '],['fun','stdlib2','s2_maybe:lift/2',[]],['fun','stdlib2','s2_maybe:map/1','map(F, Xs) is the result of mapping F over Xs insi'],['fun','stdlib2','s2_maybe:reduce/1','reduce(F, Xs) is the result of reducing Xs to F in'],['fun','stdlib2','s2_maybe:reduce/3',[]],['fun','stdlib2','s2_maybe:to_bool/1','to_bool(X) is the boolean representation of the ma'],['fun','stdlib2','s2_maybe:unlift/1','unlift(F) is the result of F() extracted from the '],['fun','stdlib2','s2_maybe:unlift/2',[]],['fun','stdlib2','s2_par:map/1','map(F, Xs) is the result of mapping F over Xs in p'],['fun','stdlib2','s2_par:map/3',[]],['fun','stdlib2','s2_pn_counters:compare/2',[]],['fun','stdlib2','s2_pn_counters:dec/1',[]],['fun','stdlib2','s2_pn_counters:inc/1',[]],['fun','stdlib2','s2_pn_counters:merge/2',[]],['fun','stdlib2','s2_pn_counters:new/0',[]],['fun','stdlib2','s2_pn_counters:update/2',[]],['fun','stdlib2','s2_pn_counters:value/1',[]],['fun','stdlib2','s2_procs:flush/0','flush() causes the calling processs message queue'],['fun','stdlib2','s2_procs:flush/1','flush() causes the calling processs message queue'],['fun','stdlib2','s2_procs:is_up/1','is_up(Proc) is true iff Proc is running.'],['fun','stdlib2','s2_procs:kill/1','kill(Procs) causes Procs to be terminated.'],['fun','stdlib2','s2_procs:kill/2',[]],['fun','stdlib2','s2_procs:pid/1','pid(Proc) is Procs pid.'],['fun','stdlib2','s2_procs:recv/1','recv(Proc) is the next message received from Proc.'],['fun','stdlib2','s2_procs:recv/2',[]],['fun','stdlib2','s2_procs:send/1','send(Proc, Msg) causes Msg to be sent to Proc.'],['fun','stdlib2','s2_procs:spinlock/1','Spin until F returns true.'],['fun','stdlib2','s2_procs:with_monitor/1','with_monitor(Proc, F) causes F to be called while '],['fun','stdlib2','s2_rand:int/0',[]],['fun','stdlib2','s2_rand:numbers/1','numbers(N, Max) is a list of N random numbers betw'],['fun','stdlib2','s2_rand:pick/1','pick(Xs) is a random element of Xs.'],['fun','stdlib2','s2_rand:shuffle/1','shuffle(Xs) is a random permutation of Xs.'],['fun','stdlib2','s2_sh:cp/1',[]],['fun','stdlib2','s2_sh:eval/1',[]],['fun','stdlib2','s2_sh:host/1',[]],['fun','stdlib2','s2_sh:ls/1',[]],['fun','stdlib2','s2_sh:mkdir/1',[]],['fun','stdlib2','s2_sh:mkdir_p/1',[]],['fun','stdlib2','s2_sh:mktemp/0',[]],['fun','stdlib2','s2_sh:mktemp/1',[]],['fun','stdlib2','s2_sh:mktemp/2',[]],['fun','stdlib2','s2_sh:mktemp_d/0',[]],['fun','stdlib2','s2_sh:mktemp_d/1',[]],['fun','stdlib2','s2_sh:mktemp_d/2',[]],['fun','stdlib2','s2_sh:mktemp_u/0',[]],['fun','stdlib2','s2_sh:mktemp_u/1',[]],['fun','stdlib2','s2_sh:mktemp_u/2',[]],['fun','stdlib2','s2_sh:mv/1',[]],['fun','stdlib2','s2_sh:rm_rf/1',[]],['fun','stdlib2','s2_sh:rmdir/1',[]],['fun','stdlib2','s2_sh:touch/1',[]],['fun','stdlib2','s2_strats:permanent_worker_spec/1',[]],['fun','stdlib2','s2_strats:permanent_worker_spec/2',[]],['fun','stdlib2','s2_strats:supervisor_spec/1',[]],['fun','stdlib2','s2_strats:supervisor_spec/2',[]],['fun','stdlib2','s2_strats:supervisor_supervisor_strat/1','Return our default spec for supervisors which supe'],['fun','stdlib2','s2_strats:transient_worker_spec/1',[]],['fun','stdlib2','s2_strats:transient_worker_spec/2',[]],['fun','stdlib2','s2_strats:worker_supervisor_strat/1','Return our default spec for supervisors which supe'],['fun','stdlib2','s2_time:datetime/0','datetime() is the current date and time..'],['fun','stdlib2','s2_time:stamp/0','stamp() is the number of microseconds since the Un'],['fun','stdlib2','s2_time:stamp/1',[]],['fun','stdlib2','s2_util:consult_string/1','Parse String as an Erlang term.'],['fun','stdlib2','s2_vclocks:compare/1','compare(C1, C2) is C1s relation to C2.'],['fun','stdlib2','s2_vclocks:increment/1','Equivalent to update / 2.'],['fun','stdlib2','s2_vclocks:is_vclock/1','is_vclock(X) is true iff X is a vclock.'],['fun','stdlib2','s2_vclocks:merge/1','merge(C1, C2) is the LUB of C1 and C2.'],['fun','stdlib2','s2_vclocks:new/0','new() is a fresh vclock.'],['fun','stdlib2','s2_vclocks:pp/1','pp(C) is the string-representation of C.'],['fun','stdlib2','s2_vclocks:prune/1','prune(C, Pred) is C with all entries for which Pre'],['fun','stdlib2','s2_vclocks:size/1','size(C) is the number of entries in C.'],['fun','stdlib2','s2_vclocks:update/1','update(C, Idx) is C with Idxs entry incremented b'],['fun','stdlib2','s2_vclocks:value/1','value(C) is the sum of the entries in C.']];