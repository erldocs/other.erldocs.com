var index = [['app','compiler','compiler','[application]'],['mod','compiler','beam_a',[]],['mod','compiler','beam_block',[]],['mod','compiler','beam_bool',[]],['mod','compiler','beam_bsm',[]],['mod','compiler','beam_clean',[]],['mod','compiler','beam_dead',[]],['mod','compiler','beam_except',[]],['mod','compiler','beam_flatten',[]],['mod','compiler','beam_jump',[]],['mod','compiler','beam_listing',[]],['mod','compiler','beam_peep',[]],['mod','compiler','beam_receive',[]],['mod','compiler','beam_split',[]],['mod','compiler','beam_trim',[]],['mod','compiler','beam_type',[]],['mod','compiler','beam_utils',[]],['mod','compiler','beam_validator',[]],['mod','compiler','beam_z',[]],['mod','compiler','cerl','Core Erlang abstract syntax trees.'],['mod','compiler','cerl_clauses','Utility functions for Core Erlang case/receive cla'],['mod','compiler','cerl_inline',[]],['mod','compiler','cerl_trees','Basic functions on Core Erlang abstract syntax tre'],['mod','compiler','compile','Erlang Compiler'],['mod','compiler','core_lib',[]],['mod','compiler','core_lint',[]],['mod','compiler','core_pp',[]],['mod','compiler','core_scan',[]],['mod','compiler','erl_bifs',[]],['mod','compiler','sys_core_dsetel',[]],['mod','compiler','sys_core_fold',[]],['mod','compiler','sys_core_inline',[]],['mod','compiler','sys_pre_attributes',[]],['mod','compiler','v3_codegen',[]],['mod','compiler','v3_core',[]],['mod','compiler','v3_kernel',[]],['mod','compiler','v3_kernel_pp',[]],['mod','compiler','v3_life',[]],['fun','compiler','beam_a:module/2',[]],['fun','compiler','beam_block:module/2',[]],['fun','compiler','beam_bool:module/2',[]],['fun','compiler','beam_bsm:format_error/2',[]],['fun','compiler','beam_bsm:module/2',[]],['fun','compiler','beam_clean:bs_clean_saves/1',[]],['fun','compiler','beam_clean:clean_labels/1',[]],['fun','compiler','beam_clean:module/2',[]],['fun','compiler','beam_dead:module/2',[]],['fun','compiler','beam_except:module/2',[]],['fun','compiler','beam_flatten:module/2',[]],['fun','compiler','beam_jump:is_exit_instruction/1',[]],['fun','compiler','beam_jump:is_label_used_in/2',[]],['fun','compiler','beam_jump:is_unreachable_after/1',[]],['fun','compiler','beam_jump:module/2',[]],['fun','compiler','beam_jump:remove_unused_labels/1',[]],['fun','compiler','beam_listing:module/2',[]],['fun','compiler','beam_peep:module/2',[]],['fun','compiler','beam_receive:module/2',[]],['fun','compiler','beam_split:module/2',[]],['fun','compiler','beam_trim:module/2',[]],['fun','compiler','beam_type:module/2',[]],['fun','compiler','beam_utils:bif_to_test/3',[]],['fun','compiler','beam_utils:code_at/2',[]],['fun','compiler','beam_utils:combine_heap_needs/2',[]],['fun','compiler','beam_utils:delete_live_annos/1',[]],['fun','compiler','beam_utils:empty_label_index/0',[]],['fun','compiler','beam_utils:index_label/3',[]],['fun','compiler','beam_utils:index_labels/1',[]],['fun','compiler','beam_utils:is_killed/3',[]],['fun','compiler','beam_utils:is_killed_at/3',[]],['fun','compiler','beam_utils:is_killed_block/2',[]],['fun','compiler','beam_utils:is_not_used/3',[]],['fun','compiler','beam_utils:is_not_used_at/3',[]],['fun','compiler','beam_utils:is_pure_test/1',[]],['fun','compiler','beam_utils:live_opt/1',[]],['fun','compiler','beam_validator:file/1',[]],['fun','compiler','beam_validator:files/1',[]],['fun','compiler','beam_validator:format_error/1',[]],['fun','compiler','beam_validator:module/2',[]],['fun','compiler','beam_z:module/2',[]],['fun','compiler','cerl:abstract/1','Creates a syntax tree corresponding to an Erlang t'],['fun','compiler','cerl:add_ann/1','Appends Annotations to the list of user  annotati'],['fun','compiler','cerl:alias_pat/1','Returns the pattern subtree of an abstract pattern'],['fun','compiler','cerl:alias_var/1','Returns the variable subtree of an abstract patter'],['fun','compiler','cerl:ann_abstract/1',[]],['fun','compiler','cerl:ann_c_alias/1',[]],['fun','compiler','cerl:ann_c_apply/1',[]],['fun','compiler','cerl:ann_c_atom/1',[]],['fun','compiler','cerl:ann_c_binary/1',[]],['fun','compiler','cerl:ann_c_bitstr/1','Equivalent to ann_c_bitstr(As, Value, Size, abstra'],['fun','compiler','cerl:ann_c_bitstr/1',[]],['fun','compiler','cerl:ann_c_call/1',[]],['fun','compiler','cerl:ann_c_case/1',[]],['fun','compiler','cerl:ann_c_catch/1',[]],['fun','compiler','cerl:ann_c_char/1',[]],['fun','compiler','cerl:ann_c_clause/1',[]],['fun','compiler','cerl:ann_c_clause/1','Equivalent to ann_c_clause(As, Patterns, c_atom(tr'],['fun','compiler','cerl:ann_c_cons/1',[]],['fun','compiler','cerl:ann_c_cons_skel/1',[]],['fun','compiler','cerl:ann_c_float/1',[]],['fun','compiler','cerl:ann_c_fname/1','Equivalent to ann_c_var(As, {Atom, Arity}).'],['fun','compiler','cerl:ann_c_fun/1',[]],['fun','compiler','cerl:ann_c_int/1',[]],['fun','compiler','cerl:ann_c_let/1',[]],['fun','compiler','cerl:ann_c_letrec/1',[]],['fun','compiler','cerl:ann_c_module/1',[]],['fun','compiler','cerl:ann_c_module/1',[]],['fun','compiler','cerl:ann_c_nil/1',[]],['fun','compiler','cerl:ann_c_primop/1',[]],['fun','compiler','cerl:ann_c_receive/1',[]],['fun','compiler','cerl:ann_c_receive/1','Equivalent to ann_c_receive(As, Clauses, c_atom(in'],['fun','compiler','cerl:ann_c_seq/1',[]],['fun','compiler','cerl:ann_c_string/1',[]],['fun','compiler','cerl:ann_c_try/1',[]],['fun','compiler','cerl:ann_c_tuple/1',[]],['fun','compiler','cerl:ann_c_tuple_skel/1',[]],['fun','compiler','cerl:ann_c_values/1',[]],['fun','compiler','cerl:ann_c_var/1',[]],['fun','compiler','cerl:ann_make_data/1',[]],['fun','compiler','cerl:ann_make_data_skel/1',[]],['fun','compiler','cerl:ann_make_list/1',[]],['fun','compiler','cerl:ann_make_list/1','Equivalent to ann_make_list(As, List, none).'],['fun','compiler','cerl:ann_make_tree/1','Creates a syntax tree with the given annotations, '],['fun','compiler','cerl:apply_args/1','Returns the list of argument subtrees of an abstra'],['fun','compiler','cerl:apply_arity/1','Returns the number of argument subtrees of an abst'],['fun','compiler','cerl:apply_op/1','Returns the operator subtree of an abstract functi'],['fun','compiler','cerl:atom_lit/1','Returns the literal string represented by an abstr'],['fun','compiler','cerl:atom_name/1','Returns the printname of an abstract atom.'],['fun','compiler','cerl:atom_val/1','Returns the value represented by an abstract atom.'],['fun','compiler','cerl:binary_segments/1','Returns the list of segment subtrees of an abstrac'],['fun','compiler','cerl:bitstr_bitsize/1','Returns the total size in bits of an abstract bit-'],['fun','compiler','cerl:bitstr_flags/1','Returns the flags subtree of an abstract bit-strin'],['fun','compiler','cerl:bitstr_size/1','Returns the size subtree of an abstract bit-string'],['fun','compiler','cerl:bitstr_type/1','Returns the type subtree of an abstract bit-string'],['fun','compiler','cerl:bitstr_unit/1','Returns the unit subtree of an abstract bit-string'],['fun','compiler','cerl:bitstr_val/1','Returns the value subtree of an abstract bit-strin'],['fun','compiler','cerl:c_alias/1','Creates an abstract pattern alias.'],['fun','compiler','cerl:c_apply/1','Creates an abstract function application.'],['fun','compiler','cerl:c_atom/1','Creates an abstract atom literal.'],['fun','compiler','cerl:c_binary/1','Creates an abstract binary-template.'],['fun','compiler','cerl:c_bitstr/1','Equivalent to c_bitstr(Value, abstract(all), abstr'],['fun','compiler','cerl:c_bitstr/1','Equivalent to c_bitstr(Value, Size, abstract(1), T'],['fun','compiler','cerl:c_bitstr/1','Creates an abstract bit-string template.'],['fun','compiler','cerl:c_call/1','Creates an abstract inter-module call.'],['fun','compiler','cerl:c_case/1','Creates an abstract case-expression.'],['fun','compiler','cerl:c_catch/1','Creates an abstract catch-expression.'],['fun','compiler','cerl:c_char/1','Creates an abstract character literal.'],['fun','compiler','cerl:c_clause/1','Creates an an abstract clause.'],['fun','compiler','cerl:c_clause/1','Equivalent to c_clause(Patterns, c_atom(true), Bod'],['fun','compiler','cerl:c_cons/1','Creates an abstract list constructor.'],['fun','compiler','cerl:c_cons_skel/1','Creates an abstract list constructor skeleton.'],['fun','compiler','cerl:c_float/1','Creates an abstract floating-point literal.'],['fun','compiler','cerl:c_fname/1','Equivalent to c_var({Name, Arity}).'],['fun','compiler','cerl:c_fun/1','Creates an abstract fun-expression.'],['fun','compiler','cerl:c_int/1','Creates an abstract integer literal.'],['fun','compiler','cerl:c_let/1','Creates an abstract let-expression.'],['fun','compiler','cerl:c_letrec/1','Creates an abstract letrec-expression.'],['fun','compiler','cerl:c_module/1','Creates an abstract module definition.'],['fun','compiler','cerl:c_module/1','Equivalent to c_module(Name, Exports, [], Definiti'],['fun','compiler','cerl:c_nil/0','Creates an abstract empty list.'],['fun','compiler','cerl:c_primop/1','Creates an abstract primitive operation call.'],['fun','compiler','cerl:c_receive/1','Creates an abstract receive-expression.'],['fun','compiler','cerl:c_receive/1','Equivalent to c_receive(Clauses, c_atom(infinity),'],['fun','compiler','cerl:c_seq/1','Creates an abstract sequencing expression.'],['fun','compiler','cerl:c_string/1','Creates an abstract string literal.'],['fun','compiler','cerl:c_try/1','Creates an abstract try-expression.'],['fun','compiler','cerl:c_tuple/1','Creates an abstract tuple.'],['fun','compiler','cerl:c_tuple_skel/1','Creates an abstract tuple skeleton.'],['fun','compiler','cerl:c_values/1','Creates an abstract value list.'],['fun','compiler','cerl:c_var/1','Creates an abstract variable.'],['fun','compiler','cerl:call_args/1','Returns the list of argument subtrees of an abstra'],['fun','compiler','cerl:call_arity/1','Returns the number of argument subtrees of an abst'],['fun','compiler','cerl:call_module/1','Returns the module subtree of an abstract inter-mo'],['fun','compiler','cerl:call_name/1','Returns the name subtree of an abstract inter-modu'],['fun','compiler','cerl:case_arg/1','Returns the argument subtree of an abstract case-e'],['fun','compiler','cerl:case_arity/1','Equivalent to  clause_arity(hd(case_clauses(Node)'],['fun','compiler','cerl:case_clauses/1','Returns the list of clause subtrees of an abstract'],['fun','compiler','cerl:catch_body/1','Returns the body subtree of an abstract catch-expr'],['fun','compiler','cerl:char_lit/1','Returns the literal string represented by an abstr'],['fun','compiler','cerl:char_val/1','Returns the value represented by an abstract chara'],['fun','compiler','cerl:clause_arity/1','Returns the number of pattern subtrees of an abstr'],['fun','compiler','cerl:clause_body/1','Returns the body subtree of an abstract clause.'],['fun','compiler','cerl:clause_guard/1','Returns the guard subtree of an abstract clause.'],['fun','compiler','cerl:clause_pats/1','Returns the list of pattern subtrees of an abstrac'],['fun','compiler','cerl:clause_vars/1','Returns the list of all abstract variables in the '],['fun','compiler','cerl:concrete/1','Returns the Erlang term represented by a syntax tr'],['fun','compiler','cerl:cons_hd/1','Returns the head subtree of an abstract list const'],['fun','compiler','cerl:cons_tl/1','Returns the tail subtree of an abstract list const'],['fun','compiler','cerl:copy_ann/1','Copies the list of user annotations from Source  '],['fun','compiler','cerl:data_arity/1','Returns the number of subtrees of a data construct'],['fun','compiler','cerl:data_es/1','Returns the list of subtrees of a data constructor'],['fun','compiler','cerl:data_type/1','Returns a type descriptor for a data constructor '],['fun','compiler','cerl:float_lit/1','Returns the numeral string represented by a floati'],['fun','compiler','cerl:float_val/1','Returns the value represented by a floating-point '],['fun','compiler','cerl:fname_arity/1','Returns the arity part of an abstract function nam'],['fun','compiler','cerl:fname_id/1','Returns the identifier part of an abstract functio'],['fun','compiler','cerl:fold_literal/1','Assures that literals have a compact representatio'],['fun','compiler','cerl:from_records/1','Translates an explicit record representation to a'],['fun','compiler','cerl:fun_arity/1','Returns the number of parameter subtrees of an abs'],['fun','compiler','cerl:fun_body/1','Returns the body subtree of an abstract fun-expres'],['fun','compiler','cerl:fun_vars/1','Returns the list of parameter subtrees of an abstr'],['fun','compiler','cerl:get_ann/1','Returns the list of user annotations associated wi'],['fun','compiler','cerl:int_lit/1','Returns the numeral string represented by an integ'],['fun','compiler','cerl:int_val/1','Returns the value represented by an integer litera'],['fun','compiler','cerl:is_c_alias/1','Returns true if Node is an abstract  pattern alia'],['fun','compiler','cerl:is_c_apply/1','Returns true if Node is an abstract  function app'],['fun','compiler','cerl:is_c_atom/1','Returns true if Node represents an  atom literal,'],['fun','compiler','cerl:is_c_binary/1','Returns true if Node is an abstract  binary-templ'],['fun','compiler','cerl:is_c_bitstr/1','Returns true if Node is an abstract  bit-string t'],['fun','compiler','cerl:is_c_call/1','Returns true if Node is an abstract  inter-module'],['fun','compiler','cerl:is_c_case/1','Returns true if Node is an abstract  case-express'],['fun','compiler','cerl:is_c_catch/1','Returns true if Node is an abstract  catch-expres'],['fun','compiler','cerl:is_c_char/1','Returns true if Node may represent a  character l'],['fun','compiler','cerl:is_c_clause/1','Returns true if Node is an abstract  clause, othe'],['fun','compiler','cerl:is_c_cons/1','Returns true if Node is an abstract  list constru'],['fun','compiler','cerl:is_c_float/1','Returns true if Node represents a  floating-point'],['fun','compiler','cerl:is_c_fname/1','Returns true if Node is an abstract  function nam'],['fun','compiler','cerl:is_c_fun/1','Returns true if Node is an abstract  fun-expressi'],['fun','compiler','cerl:is_c_int/1','Returns true if Node represents an  integer liter'],['fun','compiler','cerl:is_c_let/1','Returns true if Node is an abstract  let-expressi'],['fun','compiler','cerl:is_c_letrec/1','Returns true if Node is an abstract  letrec-expre'],['fun','compiler','cerl:is_c_list/1','Returns true if Node represents a  proper list, o'],['fun','compiler','cerl:is_c_module/1','Returns true if Node is an abstract  module defin'],['fun','compiler','cerl:is_c_nil/1','Returns true if Node is an abstract  empty list, '],['fun','compiler','cerl:is_c_primop/1','Returns true if Node is an abstract  primitive op'],['fun','compiler','cerl:is_c_receive/1','Returns true if Node is an abstract  receive-expr'],['fun','compiler','cerl:is_c_seq/1','Returns true if Node is an abstract  sequencing e'],['fun','compiler','cerl:is_c_string/1','Returns true if Node may represent a  string lite'],['fun','compiler','cerl:is_c_try/1','Returns true if Node is an abstract  try-expressi'],['fun','compiler','cerl:is_c_tuple/1','Returns true if Node is an abstract  tuple, other'],['fun','compiler','cerl:is_c_values/1','Returns true if Node is an abstract  value list; '],['fun','compiler','cerl:is_c_var/1','Returns true if Node is an abstract  variable, ot'],['fun','compiler','cerl:is_data/1','Returns true if Node represents a  data construct'],['fun','compiler','cerl:is_leaf/1','Returns true if Node is a leaf node,  otherwise f'],['fun','compiler','cerl:is_literal/1','Returns true if Node represents a  literal term, '],['fun','compiler','cerl:is_literal_term/1','Returns true if Term can be  represented as a lit'],['fun','compiler','cerl:is_print_char/1','Returns true if Node may represent a  "printing" '],['fun','compiler','cerl:is_print_string/1','Returns true if Node may represent a  string lite'],['fun','compiler','cerl:let_arg/1','Returns the argument subtree of an abstract let-ex'],['fun','compiler','cerl:let_arity/1','Returns the number of left-hand side variables of '],['fun','compiler','cerl:let_body/1','Returns the body subtree of an abstract let-expres'],['fun','compiler','cerl:let_vars/1','Returns the list of left-hand side variables of an'],['fun','compiler','cerl:letrec_body/1','Returns the body subtree of an abstract letrec-exp'],['fun','compiler','cerl:letrec_defs/1','Returns the list of definitions of an abstract  l'],['fun','compiler','cerl:letrec_vars/1','Returns the list of left-hand side function variab'],['fun','compiler','cerl:list_elements/1','Returns the list of element subtrees of an abstrac'],['fun','compiler','cerl:list_length/1','Returns the number of element subtrees of an abstr'],['fun','compiler','cerl:make_data/1','Creates a data constructor node with the specified'],['fun','compiler','cerl:make_data_skel/1','Like make_data/2, but analogous to  c_tuple_skel/'],['fun','compiler','cerl:make_list/1','Creates an abstract list from the elements in List'],['fun','compiler','cerl:make_list/1','Equivalent to make_list(List, none).'],['fun','compiler','cerl:make_tree/1','Creates a syntax tree with the given type and subt'],['fun','compiler','cerl:meta/1','Creates a meta-representation of a syntax tree.'],['fun','compiler','cerl:module_attrs/1','Returns the list of pairs of attribute key/value s'],['fun','compiler','cerl:module_defs/1','Returns the list of function definitions of an abs'],['fun','compiler','cerl:module_exports/1','Returns the list of exports subtrees of an abstrac'],['fun','compiler','cerl:module_name/1','Returns the name subtree of an abstract module def'],['fun','compiler','cerl:module_vars/1','Returns the list of left-hand side function variab'],['fun','compiler','cerl:pat_list_vars/1','Returns the list of all abstract variables in the '],['fun','compiler','cerl:pat_vars/1','Returns the list of all abstract variables in a pa'],['fun','compiler','cerl:primop_args/1','Returns the list of argument subtrees of an abstra'],['fun','compiler','cerl:primop_arity/1','Returns the number of argument subtrees of an abst'],['fun','compiler','cerl:primop_name/1','Returns the name subtree of an abstract primitive '],['fun','compiler','cerl:receive_action/1','Returns the action subtree of an abstract receive-'],['fun','compiler','cerl:receive_clauses/1','Returns the list of clause subtrees of an abstract'],['fun','compiler','cerl:receive_timeout/1','Returns the timeout subtree of an abstract receive'],['fun','compiler','cerl:seq_arg/1','Returns the argument subtree of an abstract sequen'],['fun','compiler','cerl:seq_body/1','Returns the body subtree of an abstract sequencing'],['fun','compiler','cerl:set_ann/1','Sets the list of user annotations of Node to  Ann'],['fun','compiler','cerl:string_lit/1','Returns the literal string represented by an abstr'],['fun','compiler','cerl:string_val/1','Returns the value represented by an abstract strin'],['fun','compiler','cerl:subtrees/1','Returns the grouped list of all subtrees of a node'],['fun','compiler','cerl:to_records/1','Translates an abstract syntax tree to a correspond'],['fun','compiler','cerl:try_arg/1','Returns the expression subtree of an abstract try-'],['fun','compiler','cerl:try_body/1','Returns the success body subtree of an abstract tr'],['fun','compiler','cerl:try_evars/1','Returns the list of exception variable subtrees of'],['fun','compiler','cerl:try_handler/1','Returns the exception body subtree of an abstract'],['fun','compiler','cerl:try_vars/1','Returns the list of success variable subtrees of a'],['fun','compiler','cerl:tuple_arity/1','Returns the number of element subtrees of an abstr'],['fun','compiler','cerl:tuple_es/1','Returns the list of element subtrees of an abstrac'],['fun','compiler','cerl:type/1','Returns the type tag of Node.'],['fun','compiler','cerl:unfold_literal/1','Assures that literals have a fully expanded repres'],['fun','compiler','cerl:update_c_alias/1',[]],['fun','compiler','cerl:update_c_apply/1',[]],['fun','compiler','cerl:update_c_binary/1',[]],['fun','compiler','cerl:update_c_bitstr/1','Equivalent to update_c_bitstr(Node, Value, Size, a'],['fun','compiler','cerl:update_c_bitstr/1',[]],['fun','compiler','cerl:update_c_call/1',[]],['fun','compiler','cerl:update_c_case/1',[]],['fun','compiler','cerl:update_c_catch/1',[]],['fun','compiler','cerl:update_c_clause/1',[]],['fun','compiler','cerl:update_c_cons/1',[]],['fun','compiler','cerl:update_c_cons_skel/1',[]],['fun','compiler','cerl:update_c_fname/1','Equivalent to update_c_var(Old, {Atom, Arity}).'],['fun','compiler','cerl:update_c_fname/1','Like update_c_fname/3, but takes the arity from  '],['fun','compiler','cerl:update_c_fun/1',[]],['fun','compiler','cerl:update_c_let/1',[]],['fun','compiler','cerl:update_c_letrec/1',[]],['fun','compiler','cerl:update_c_module/1',[]],['fun','compiler','cerl:update_c_primop/1',[]],['fun','compiler','cerl:update_c_receive/1',[]],['fun','compiler','cerl:update_c_seq/1',[]],['fun','compiler','cerl:update_c_try/1',[]],['fun','compiler','cerl:update_c_tuple/1',[]],['fun','compiler','cerl:update_c_tuple_skel/1',[]],['fun','compiler','cerl:update_c_values/1',[]],['fun','compiler','cerl:update_c_var/1',[]],['fun','compiler','cerl:update_data/1',[]],['fun','compiler','cerl:update_data_skel/1',[]],['fun','compiler','cerl:update_list/1',[]],['fun','compiler','cerl:update_list/1','Equivalent to update_list(Old, List, none).'],['fun','compiler','cerl:update_tree/1','Creates a syntax tree with the given type and subt'],['fun','compiler','cerl:update_tree/1','Creates a syntax tree with the given subtrees, and'],['fun','compiler','cerl:values_arity/1','Returns the number of element subtrees of an abstr'],['fun','compiler','cerl:values_es/1','Returns the list of element subtrees of an abstrac'],['fun','compiler','cerl:var_name/1','Returns the name of an abstract variable.'],['fun','compiler','cerl_clauses:any_catchall/1','Returns true if any of the abstract clauses in  t'],['fun','compiler','cerl_clauses:eval_guard/1','Tries to reduce a guard expression to a single con'],['fun','compiler','cerl_clauses:is_catchall/1','Returns true if an abstract clause is a  catch-al'],['fun','compiler','cerl_clauses:match/1','Matches a pattern against an expression.'],['fun','compiler','cerl_clauses:match_list/1','Like match/2, but matching a sequence of patterns'],['fun','compiler','cerl_clauses:reduce/1','Equivalent to reduce(Cs, []).'],['fun','compiler','cerl_clauses:reduce/2','Selects a single clause, if possible, or otherwise'],['fun','compiler','cerl_inline:core_transform/1',[]],['fun','compiler','cerl_inline:transform/1',[]],['fun','compiler','cerl_inline:transform/1',[]],['fun','compiler','cerl_trees:depth/1','Returns the length of the longest path in the tree'],['fun','compiler','cerl_trees:fold/2','Does a fold operation over the nodes of the tree.'],['fun','compiler','cerl_trees:free_variables/1','Like variables/1, but only includes variables  th'],['fun','compiler','cerl_trees:get_label/1',[]],['fun','compiler','cerl_trees:label/1','Labels each expression in the tree.'],['fun','compiler','cerl_trees:label/1','Equivalent to label(Tree, 0).'],['fun','compiler','cerl_trees:map/2','Maps a function onto the nodes of a tree.'],['fun','compiler','cerl_trees:mapfold/2','Does a combined map/fold operation on the nodes of'],['fun','compiler','cerl_trees:size/1','Returns the number of nodes in Tree.'],['fun','compiler','cerl_trees:variables/1','Returns an ordered-set list of the names of all va'],['fun','compiler','compile:file/1','Compile a file'],['fun','compiler','compile:file/2','Compile a file'],['fun','compiler','compile:format_error/1','Format an error descriptor'],['fun','compiler','compile:forms/1','Compile a list of forms'],['fun','compiler','compile:forms/2','Compile a list of forms'],['fun','compiler','compile:noenv_file/2','Compile a file (ignoring ERL_COMPILER_OPTIONS)'],['fun','compiler','compile:noenv_forms/2','Compile a list of forms (ignoring ERL_COMPILER_OPT'],['fun','compiler','compile:noenv_output_generated/1','Determine whether the compile will generate an out'],['fun','compiler','compile:output_generated/1','Determine whether the compile will generate an out'],['fun','compiler','core_lib:get_anno/1',[]],['fun','compiler','core_lib:is_literal/1',[]],['fun','compiler','core_lib:is_literal_list/1',[]],['fun','compiler','core_lib:is_var_used/1',[]],['fun','compiler','core_lib:literal_value/1',[]],['fun','compiler','core_lib:make_values/1',[]],['fun','compiler','core_lib:set_anno/1',[]],['fun','compiler','core_lint:format_error/1',[]],['fun','compiler','core_lint:module/1',[]],['fun','compiler','core_lint:module/1',[]],['fun','compiler','core_pp:format/1',[]],['fun','compiler','core_scan:format_error/1',[]],['fun','compiler','core_scan:string/1',[]],['fun','compiler','core_scan:string/2',[]],['fun','compiler','erl_bifs:is_exit_bif/1',[]],['fun','compiler','erl_bifs:is_pure/1',[]],['fun','compiler','erl_bifs:is_safe/1',[]],['fun','compiler','sys_core_dsetel:module/1',[]],['fun','compiler','sys_core_fold:format_error/1',[]],['fun','compiler','sys_core_fold:module/1',[]],['fun','compiler','sys_core_inline:module/2',[]],['fun','compiler','sys_pre_attributes:parse_transform/2',[]],['fun','compiler','v3_codegen:module/2',[]],['fun','compiler','v3_core:format_error/1',[]],['fun','compiler','v3_core:module/1',[]],['fun','compiler','v3_kernel:format_error/1',[]],['fun','compiler','v3_kernel:module/1',[]],['fun','compiler','v3_kernel_pp:format/1',[]],['fun','compiler','v3_life:module/2',[]],['fun','compiler','v3_life:vdb_find/2',[]]];