var index = [['app','syntax_tools','syntax_tools','[application]'],['mod','syntax_tools','epp_dodger','epp_dodger - bypasses the Erlang preprocessor.'],['mod','syntax_tools','erl_comment_scan','Functions for reading comment lines from Erlang so'],['mod','syntax_tools','erl_prettypr','Pretty printing of abstract Erlang syntax trees.'],['mod','syntax_tools','erl_recomment','Inserting comments into abstract Erlang syntax tre'],['mod','syntax_tools','erl_syntax_lib','Support library for abstract Erlang syntax trees.'],['mod','syntax_tools','erl_tidy','Tidies and pretty-prints Erlang source code, remov'],['mod','syntax_tools','igor','Igor: the Module Merger and Renamer.'],['mod','syntax_tools','prettypr','A generic pretty printer library.'],['fun','syntax_tools','epp_dodger:parse/1','Equivalent to parse(IODevice, 1).'],['fun','syntax_tools','epp_dodger:parse/2','Equivalent to parse(IODevice, StartLine, []).'],['fun','syntax_tools','epp_dodger:parse/3','Reads and parses program text from an I/O stream.'],['fun','syntax_tools','epp_dodger:parse_file/1','Equivalent to parse_file(File, []).'],['fun','syntax_tools','epp_dodger:parse_file/2','Reads and parses a file.'],['fun','syntax_tools','epp_dodger:parse_form/2','Equivalent to parse_form(IODevice, StartLine, []).'],['fun','syntax_tools','epp_dodger:parse_form/3','Reads and parses a single program form from an I/O'],['fun','syntax_tools','epp_dodger:quick_parse/1','Equivalent to quick_parse(IODevice, 1).'],['fun','syntax_tools','epp_dodger:quick_parse/2','Equivalent to quick_parse(IODevice, StartLine, [])'],['fun','syntax_tools','epp_dodger:quick_parse/3','Similar to parse/3, but does a more quick-and-dirt'],['fun','syntax_tools','epp_dodger:quick_parse_file/1','Equivalent to quick_parse_file(File, []).'],['fun','syntax_tools','epp_dodger:quick_parse_file/2','Similar to parse_file/2, but does a more quick-and'],['fun','syntax_tools','epp_dodger:quick_parse_form/2','Equivalent to quick_parse_form(IODevice, StartLine'],['fun','syntax_tools','epp_dodger:quick_parse_form/3','Similar to parse_form/3, but does a more quick-and'],['fun','syntax_tools','epp_dodger:tokens_to_string/1','Generates a string corresponding to the given toke'],['fun','syntax_tools','erl_comment_scan:file/1','Extracts comments from an Erlang source code file.'],['fun','syntax_tools','erl_comment_scan:join_lines/1','Joins individual comment lines into multi-line com'],['fun','syntax_tools','erl_comment_scan:scan_lines/1','Extracts individual comment lines from a source co'],['fun','syntax_tools','erl_comment_scan:string/1','Extracts comments from a string containing Erlang '],['fun','syntax_tools','erl_prettypr:best/1','Creates a fixed "best" abstract layout for a synta'],['fun','syntax_tools','erl_prettypr:best/1','Equivalent to best(Tree, []).'],['fun','syntax_tools','erl_prettypr:format/1','Prettyprint-formats an abstract Erlang syntax tree'],['fun','syntax_tools','erl_prettypr:format/1','Equivalent to format(Tree, []).'],['fun','syntax_tools','erl_prettypr:get_ctxt_hook/1','Returns the hook function field of the prettyprint'],['fun','syntax_tools','erl_prettypr:get_ctxt_linewidth/1','Returns the line widh field of the prettyprinter c'],['fun','syntax_tools','erl_prettypr:get_ctxt_paperwidth/1','Returns the paper widh field of the prettyprinter '],['fun','syntax_tools','erl_prettypr:get_ctxt_precedence/1','Returns the operator precedence field of the prett'],['fun','syntax_tools','erl_prettypr:get_ctxt_user/1','Returns the user data field of the prettyprinter c'],['fun','syntax_tools','erl_prettypr:layout/1','Creates an abstract document layout for a syntax t'],['fun','syntax_tools','erl_prettypr:layout/1','Equivalent to layout(Tree, []).'],['fun','syntax_tools','erl_prettypr:set_ctxt_hook/1','Updates the hook function field of the prettyprint'],['fun','syntax_tools','erl_prettypr:set_ctxt_linewidth/1','Updates the line widh field of the prettyprinter c'],['fun','syntax_tools','erl_prettypr:set_ctxt_paperwidth/1','Updates the paper widh field of the prettyprinter '],['fun','syntax_tools','erl_prettypr:set_ctxt_precedence/1','Updates the operator precedence field of the prett'],['fun','syntax_tools','erl_prettypr:set_ctxt_user/1','Updates the user data field of the prettyprinter c'],['fun','syntax_tools','erl_recomment:quick_recomment_forms/2','Like recomment_forms/2, but only inserts top-level'],['fun','syntax_tools','erl_recomment:recomment_forms/2','Attaches comments to the syntax tree/trees represe'],['fun','syntax_tools','erl_recomment:recomment_tree/1','Attaches comments to a syntax tree.'],['fun','syntax_tools','erl_syntax_lib:analyze_application/1','Returns the name of a called function.'],['fun','syntax_tools','erl_syntax_lib:analyze_attribute/1','Analyzes an attribute node.'],['fun','syntax_tools','erl_syntax_lib:analyze_export_attribute/1','Returns the list of function names declared by an '],['fun','syntax_tools','erl_syntax_lib:analyze_file_attribute/1','Returns the file name and line number of a file  '],['fun','syntax_tools','erl_syntax_lib:analyze_form/1','Analyzes a "source code form" node.'],['fun','syntax_tools','erl_syntax_lib:analyze_forms/1','Analyzes a sequence of "program forms".'],['fun','syntax_tools','erl_syntax_lib:analyze_function/1','Returns the name and arity of a function definitio'],['fun','syntax_tools','erl_syntax_lib:analyze_function_name/1','Returns the function name represented by a syntax '],['fun','syntax_tools','erl_syntax_lib:analyze_implicit_fun/1','Returns the name of an implicit fun expression "fu'],['fun','syntax_tools','erl_syntax_lib:analyze_import_attribute/1','Returns the module name and (if present) list of f'],['fun','syntax_tools','erl_syntax_lib:analyze_module_attribute/1','Returns the module name and possible parameters de'],['fun','syntax_tools','erl_syntax_lib:analyze_record_attribute/1','Returns the name and the list of fields of a recor'],['fun','syntax_tools','erl_syntax_lib:analyze_record_expr/1','Returns the record name and field name/names of a '],['fun','syntax_tools','erl_syntax_lib:analyze_record_field/1','Returns the label and value-expression of a record'],['fun','syntax_tools','erl_syntax_lib:analyze_rule/1','Returns the name and arity of a Mnemosyne rule.'],['fun','syntax_tools','erl_syntax_lib:analyze_wild_attribute/1','Returns the name and value of a "wild" attribute.'],['fun','syntax_tools','erl_syntax_lib:annotate_bindings/1','Adds or updates annotations on nodes in a syntax t'],['fun','syntax_tools','erl_syntax_lib:annotate_bindings/1','Adds or updates annotations on nodes in a syntax t'],['fun','syntax_tools','erl_syntax_lib:fold/2','Folds a function over all nodes of a syntax tree.'],['fun','syntax_tools','erl_syntax_lib:fold_subtrees/2','Folds a function over the immediate subtrees of a '],['fun','syntax_tools','erl_syntax_lib:foldl_listlist/2','Like lists:foldl/3, but over a list of lists.'],['fun','syntax_tools','erl_syntax_lib:function_name_expansions/1','Creates a mapping from corresponding short names t'],['fun','syntax_tools','erl_syntax_lib:is_fail_expr/1','Returns true if Tree represents an  expression wh'],['fun','syntax_tools','erl_syntax_lib:limit/1','Limits a syntax tree to a specified depth.'],['fun','syntax_tools','erl_syntax_lib:limit/2','Equivalent to limit(Tree, Depth, Text) using the '],['fun','syntax_tools','erl_syntax_lib:map/2','Applies a function to each node of a syntax tree.'],['fun','syntax_tools','erl_syntax_lib:map_subtrees/2','Applies a function to each immediate subtree of a '],['fun','syntax_tools','erl_syntax_lib:mapfold/2','Combines map and fold in a single operation.'],['fun','syntax_tools','erl_syntax_lib:mapfold_subtrees/2','Does a mapfold operation over the immediate subtre'],['fun','syntax_tools','erl_syntax_lib:mapfoldl_listlist/3','Like lists:mapfoldl/3, but over a list of lists.'],['fun','syntax_tools','erl_syntax_lib:new_variable_name/1','Returns an atom which is not already in the set Us'],['fun','syntax_tools','erl_syntax_lib:new_variable_name/2','Returns a user-named atom which is not already in '],['fun','syntax_tools','erl_syntax_lib:new_variable_names/1','Like new_variable_name/2, but generates a list of'],['fun','syntax_tools','erl_syntax_lib:new_variable_names/1','Like new_variable_name/1, but generates a list of'],['fun','syntax_tools','erl_syntax_lib:strip_comments/1','Removes all comments from all nodes of a syntax tr'],['fun','syntax_tools','erl_syntax_lib:to_comment/1','Transforms a syntax tree into an abstract comment.'],['fun','syntax_tools','erl_syntax_lib:to_comment/1','Equivalent to to_comment(Tree, Prefix, F) for a  '],['fun','syntax_tools','erl_syntax_lib:to_comment/1','Equivalent to to_comment(Tree, "% ").'],['fun','syntax_tools','erl_syntax_lib:variables/1','Returns the names of variables occurring in a synt'],['fun','syntax_tools','erl_tidy:dir/0','Equivalent to dir("").'],['fun','syntax_tools','erl_tidy:dir/1','Tidies Erlang source files in a directory and its '],['fun','syntax_tools','erl_tidy:dir/1','Equivalent to dir(Dir, []).'],['fun','syntax_tools','erl_tidy:file/1','Tidies an Erlang source code file.'],['fun','syntax_tools','erl_tidy:file/1','Equivalent to file(Name, []).'],['fun','syntax_tools','erl_tidy:module/1','Equivalent to module(Forms, []).'],['fun','syntax_tools','erl_tidy:module/2','Tidies a syntax tree representation of a module  '],['fun','syntax_tools','igor:create_stubs/1','Creates stub module source files corresponding to '],['fun','syntax_tools','igor:merge/1','Merges source code files to a single file.'],['fun','syntax_tools','igor:merge/1','Equivalent to merge(Name, Files, []).'],['fun','syntax_tools','igor:merge_files/1','Merges source code files and syntax trees to a sin'],['fun','syntax_tools','igor:merge_files/1','Equivalent to merge_files(Name, [], Files, Options'],['fun','syntax_tools','igor:merge_sources/1','Merges syntax trees to a single syntax tree.'],['fun','syntax_tools','igor:parse_transform/1','Allows Igor to work as a component of the Erlang c'],['fun','syntax_tools','igor:rename/1','Renames a set of possibly interdependent source co'],['fun','syntax_tools','igor:rename/1','Equivalent to rename(Files, Renamings, []).'],['fun','syntax_tools','prettypr:above/1','Concatenates documents vertically.'],['fun','syntax_tools','prettypr:beside/1','Concatenates documents horizontally.'],['fun','syntax_tools','prettypr:best/1','Selects a "best" layout for a document, creating a'],['fun','syntax_tools','prettypr:break/1','Forces a line break at the end of the given docume'],['fun','syntax_tools','prettypr:empty/0','Yields the empty document, which has neither heigh'],['fun','syntax_tools','prettypr:floating/1','Creates a "floating" document.'],['fun','syntax_tools','prettypr:floating/1','Equivalent to floating(D, 0, 0).'],['fun','syntax_tools','prettypr:follow/1','Separates two documents by either a single space, '],['fun','syntax_tools','prettypr:follow/1','Equivalent to follow(D1, D2, 0).'],['fun','syntax_tools','prettypr:format/1','Computes a layout for a document and returns the c'],['fun','syntax_tools','prettypr:format/1','Equivalent to format(D, PaperWidth, 65).'],['fun','syntax_tools','prettypr:format/1','Equivalent to format(D, 80).'],['fun','syntax_tools','prettypr:nest/1','Indents a document a number of character positions'],['fun','syntax_tools','prettypr:null_text/1','Similar to text/1, but the result is treated as ha'],['fun','syntax_tools','prettypr:par/1','Arranges documents in a paragraph-like layout.'],['fun','syntax_tools','prettypr:par/1','Equivalent to par(Ds, 0).'],['fun','syntax_tools','prettypr:sep/1','Arranges documents horizontally or vertically, sep'],['fun','syntax_tools','prettypr:text/1','Yields a document representing a fixed, unbreakabl'],['fun','syntax_tools','prettypr:text_par/1','Yields a document representing paragraph-formatted'],['fun','syntax_tools','prettypr:text_par/1','Equivalent to text_par(Text, 0).']];