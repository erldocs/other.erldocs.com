var index = [['app','mem_ps','mem_ps','[application]'],['app','mem_ps','mem_ps','[application]'],['mod','mem_ps','get_fsm','The coordinator for stat get operations.'],['mod','mem_ps','get_fsm_sup','Supervise the rts_get FSM.'],['mod','mem_ps','mem_acceptor',[]],['mod','mem_ps','mem_ps_app',[]],['mod','mem_ps','mem_ps_console','Interface for mem_ps-admin commands.'],['mod','mem_ps','mem_ps_node_event_handler',[]],['mod','mem_ps','mem_ps_ring_event_handler',[]],['mod','mem_ps','mem_ps_sup',[]],['mod','mem_ps','mem_stat_node_event_handler',[]],['mod','mem_ps','mem_stat_ring_event_handler',[]],['mod','mem_ps','mem_stat_vnode',[]],['mod','mem_ps','write_fsm','The coordinator for stat write opeartions.'],['mod','mem_ps','write_fsm_sup','Supervise the rts_write FSM.'],['fun','mem_ps','get_fsm:code_change/4',[]],['fun','mem_ps','get_fsm:execute/2','Execute the get reqs.'],['fun','mem_ps','get_fsm:get/2',[]],['fun','mem_ps','get_fsm:handle_event/3',[]],['fun','mem_ps','get_fsm:handle_info/3',[]],['fun','mem_ps','get_fsm:handle_sync_event/4',[]],['fun','mem_ps','get_fsm:init/1',[]],['fun','mem_ps','get_fsm:prepare/2','Calculate the Preflist.'],['fun','mem_ps','get_fsm:start_link/4',[]],['fun','mem_ps','get_fsm:terminate/3',[]],['fun','mem_ps','get_fsm:waiting/2',[]],['fun','mem_ps','get_fsm_sup:init/1',[]],['fun','mem_ps','get_fsm_sup:start_get_fsm/1',[]],['fun','mem_ps','get_fsm_sup:start_link/0',[]],['fun','mem_ps','mem_acceptor:code_change/3',[]],['fun','mem_ps','mem_acceptor:handle_call/3',[]],['fun','mem_ps','mem_acceptor:handle_cast/2',[]],['fun','mem_ps','mem_acceptor:handle_info/2',[]],['fun','mem_ps','mem_acceptor:init/1',[]],['fun','mem_ps','mem_acceptor:new_connection/2',[]],['fun','mem_ps','mem_acceptor:sock_opts/0',[]],['fun','mem_ps','mem_acceptor:start_link/0',[]],['fun','mem_ps','mem_acceptor:terminate/2',[]],['fun','mem_ps','mem_ps_app:start/2',[]],['fun','mem_ps','mem_ps_app:stop/1',[]],['fun','mem_ps','mem_ps_console:join/1',[]],['fun','mem_ps','mem_ps_console:leave/1',[]],['fun','mem_ps','mem_ps_console:remove/1',[]],['fun','mem_ps','mem_ps_console:ringready/1',[]],['fun','mem_ps','mem_ps_node_event_handler:code_change/3',[]],['fun','mem_ps','mem_ps_node_event_handler:handle_call/2',[]],['fun','mem_ps','mem_ps_node_event_handler:handle_event/2',[]],['fun','mem_ps','mem_ps_node_event_handler:handle_info/2',[]],['fun','mem_ps','mem_ps_node_event_handler:init/1',[]],['fun','mem_ps','mem_ps_node_event_handler:terminate/2',[]],['fun','mem_ps','mem_ps_ring_event_handler:code_change/3',[]],['fun','mem_ps','mem_ps_ring_event_handler:handle_call/2',[]],['fun','mem_ps','mem_ps_ring_event_handler:handle_event/2',[]],['fun','mem_ps','mem_ps_ring_event_handler:handle_info/2',[]],['fun','mem_ps','mem_ps_ring_event_handler:init/1',[]],['fun','mem_ps','mem_ps_ring_event_handler:terminate/2',[]],['fun','mem_ps','mem_ps_sup:init/1',[]],['fun','mem_ps','mem_ps_sup:start_link/0',[]],['fun','mem_ps','mem_stat_node_event_handler:code_change/3',[]],['fun','mem_ps','mem_stat_node_event_handler:handle_call/2',[]],['fun','mem_ps','mem_stat_node_event_handler:handle_event/2',[]],['fun','mem_ps','mem_stat_node_event_handler:handle_info/2',[]],['fun','mem_ps','mem_stat_node_event_handler:init/1',[]],['fun','mem_ps','mem_stat_node_event_handler:terminate/2',[]],['fun','mem_ps','mem_stat_ring_event_handler:code_change/3',[]],['fun','mem_ps','mem_stat_ring_event_handler:handle_call/2',[]],['fun','mem_ps','mem_stat_ring_event_handler:handle_event/2',[]],['fun','mem_ps','mem_stat_ring_event_handler:handle_info/2',[]],['fun','mem_ps','mem_stat_ring_event_handler:init/1',[]],['fun','mem_ps','mem_stat_ring_event_handler:terminate/2',[]],['fun','mem_ps','mem_stat_vnode:delete/1',[]],['fun','mem_ps','mem_stat_vnode:encode_handoff_item/2',[]],['fun','mem_ps','mem_stat_vnode:handle_command/3',[]],['fun','mem_ps','mem_stat_vnode:handle_coverage/4',[]],['fun','mem_ps','mem_stat_vnode:handle_exit/3',[]],['fun','mem_ps','mem_stat_vnode:handle_handoff_command/3',[]],['fun','mem_ps','mem_stat_vnode:handle_handoff_data/2',[]],['fun','mem_ps','mem_stat_vnode:handoff_cancelled/1',[]],['fun','mem_ps','mem_stat_vnode:handoff_finished/2',[]],['fun','mem_ps','mem_stat_vnode:handoff_starting/2',[]],['fun','mem_ps','mem_stat_vnode:init/1',[]],['fun','mem_ps','mem_stat_vnode:is_empty/1',[]],['fun','mem_ps','mem_stat_vnode:start_vnode/1',[]],['fun','mem_ps','mem_stat_vnode:terminate/2',[]],['fun','mem_ps','write_fsm:code_change/4',[]],['fun','mem_ps','write_fsm:execute/2','Execute the write request and then go into waiting'],['fun','mem_ps','write_fsm:handle_event/3',[]],['fun','mem_ps','write_fsm:handle_info/3',[]],['fun','mem_ps','write_fsm:handle_sync_event/4',[]],['fun','mem_ps','write_fsm:init/1','Initialize the state data.'],['fun','mem_ps','write_fsm:prepare/2','Prepare the write by calculating the _preference l'],['fun','mem_ps','write_fsm:start_link/5',[]],['fun','mem_ps','write_fsm:start_link/6',[]],['fun','mem_ps','write_fsm:terminate/3',[]],['fun','mem_ps','write_fsm:waiting/2','Wait for W write reqs to respond.'],['fun','mem_ps','write_fsm:write/3',[]],['fun','mem_ps','write_fsm:write/4',[]],['fun','mem_ps','write_fsm_sup:init/1',[]],['fun','mem_ps','write_fsm_sup:start_link/0',[]],['fun','mem_ps','write_fsm_sup:start_write_fsm/1',[]]];