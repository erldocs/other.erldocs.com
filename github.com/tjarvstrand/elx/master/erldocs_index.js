var index = [['app','elx','elx','[application]'],['mod','elx','elx_dfa','Context free grammars.'],['mod','elx','elx_grammar','BNF context-free grammars.'],['mod','elx','elx_parse_engine','Parsing of token stream according to dfas.'],['fun','elx','elx_dfa:action/1','  Return DFAs next action when reading Token wit'],['fun','elx','elx_dfa:check/1','Check DFA for conflicts.'],['fun','elx','elx_dfa:goto/1','  Return DFAs next state when the lookahead is N'],['fun','elx','elx_dfa:new/1','Return a new dfa() computed from Grammar.'],['fun','elx','elx_dfa:start_state/1','Return the id of dfa start state corresponding to '],['fun','elx','elx_grammar:action/1','  Perform the action corresponding to Symbol acco'],['fun','elx','elx_grammar:new/1','Return a new grammar() instance.'],['fun','elx','elx_grammar:precedence/1','Return the precedence of Rule if defined.'],['fun','elx','elx_grammar:productions/1','  Return a list of all symbol() -&gt; [symbol()] '],['fun','elx','elx_grammar:start_symbols/1','Return the start symbols valid for Grammar.'],['fun','elx','elx_grammar:symbol_to_start_symbol/1','Return Symbol converted to a valid start symbol Gr'],['fun','elx','elx_grammar:term_symbols/1','Return the term symbols valid for Grammar.'],['fun','elx','elx_parse_engine:new/1',[]],['fun','elx','elx_parse_engine:run/1','Generate a DFA based on Grammar and use it to pars']];