var index = [['app','jesse','jesse','[application]'],['mod','jesse','jesse','JESSE (JSon Schema Erlang).'],['mod','jesse','jesse_database','Schema definitions cache handling.'],['mod','jesse','jesse_json_path','Implementation of Key Value Coding style "queries"'],['mod','jesse','jesse_schema_validator','Json schema validation module.'],['fun','jesse','jesse:add_schema/1','Equivalent to add_schema/2, but Schema is a binary'],['fun','jesse','jesse:add_schema/1','Adds a schema definition Schema to in-memory stora'],['fun','jesse','jesse:del_schema/1','Deletes a schema definition from in-memory storage'],['fun','jesse','jesse:load_schemas/1','Loads schema definitions from filesystem to in-mem'],['fun','jesse','jesse:load_schemas/1','Loads schema definitions from filesystem to in-mem'],['fun','jesse','jesse:validate/1','Equivalent to validate/2, but Data is a binary str'],['fun','jesse','jesse:validate/1','Validates json Data against a schema with the same'],['fun','jesse','jesse:validate_with_accumulator/1','Equivalent to validate_with_accumulator/4 where bo'],['fun','jesse','jesse:validate_with_accumulator/1','Equivalent to validate_with_accumulator/4 where bo'],['fun','jesse','jesse:validate_with_accumulator/1','Equivalent to validate_with_schema/3 but with the '],['fun','jesse','jesse:validate_with_accumulator/1','Equivalent to validate_with_accumulator/4 where bo'],['fun','jesse','jesse:validate_with_schema/1','Equivalent to validate_with_schema/2, but both Sch'],['fun','jesse','jesse:validate_with_schema/1','Validates json Data agains the given schema Schema'],['fun','jesse','jesse_database:add/1','Adds a schema definition Schema to in-memory stora'],['fun','jesse','jesse_database:delete/1','Deletes a schema definition from in-memory storage'],['fun','jesse','jesse_database:read/1','Reads a schema definition with the same key as Key'],['fun','jesse','jesse_database:update/1','Loads schema definitions from filesystem to in-mem'],['fun','jesse','jesse_json_path:path/1','Return the result of the query Path on P.'],['fun','jesse','jesse_json_path:to_proplist/1','Normalize P to nested proplists.'],['fun','jesse','jesse_json_path:unwrap_value/1','Unwrap data (remove mochijson2 and jiffy specific '],['fun','jesse','jesse_json_path:value/1','Return the immediate result of the query for key K'],['fun','jesse','jesse_schema_validator:get_schema_id/1','Returns value of "id" field from json object Schem'],['fun','jesse','jesse_schema_validator:is_json_object/1','A naive check if the given data is a json object.'],['fun','jesse','jesse_schema_validator:validate/1','Validates json Data against Schema.']];