var index = [['app','etbx','etbx','[application]'],['mod','etbx','etbx','The ETBX library is a set of Erlang (http://www.er'],['mod','etbx','etbx_sdb','The ETBX library is a set of Erlang (http://www.er'],['fun','etbx','etbx:any/2','Returns one element from the list for which Pred(E'],['fun','etbx','etbx:contains/1','Tests if X is present in the given list.'],['fun','etbx','etbx:delete/1','delete property K from associative structure.'],['fun','etbx','etbx:doall/1',[]],['fun','etbx','etbx:eval/1','Evaluates an Erlang expression.'],['fun','etbx','etbx:eval/1','Same as eval(Expr, []).'],['fun','etbx','etbx:every_fun/1','returns a function that checks if all of the predi'],['fun','etbx','etbx:expand/1','given an associative structure M any term T and an'],['fun','etbx','etbx:expand/1','same as expand(M, T, 10).'],['fun','etbx','etbx:first/1','returns the first element of the specified list, t'],['fun','etbx','etbx:get_env/1','Retrieves a Hypervisor Application env setting.'],['fun','etbx','etbx:get_env/1','Retrieves an Application env setting.'],['fun','etbx','etbx:get_in/3','Recursively look up a value in an associative stru'],['fun','etbx','etbx:get_value/1','looks up key in an associative structure.'],['fun','etbx','etbx:get_value/1','same as get_value(K, O, undefined).'],['fun','etbx','etbx:if_nil/1','checks if value is_nil and returns the given defau'],['fun','etbx','etbx:index_of/1','returns the index for the first occurrence of an e'],['fun','etbx','etbx:is_nil/0',[]],['fun','etbx','etbx:is_nil/1','a common sense test for what one would expect shou'],['fun','etbx','etbx:maybe_apply/1','Call the specified function if it exists, otherwis'],['fun','etbx','etbx:maybe_apply/1','Call the specified function if it exists, otherwis'],['fun','etbx','etbx:merge/1','merge objects in list L.'],['fun','etbx','etbx:merge_with/2',[]],['fun','etbx','etbx:pad/1','if the length of the list L is less than N, pad th'],['fun','etbx','etbx:partition/1','Split a list into multiple lists of n items each.'],['fun','etbx','etbx:pretty_stacktrace/0',[]],['fun','etbx','etbx:range/0',[]],['fun','etbx','etbx:range/1',[]],['fun','etbx','etbx:range/2',[]],['fun','etbx','etbx:range/3',[]],['fun','etbx','etbx:remap/1','given a function F and a property list P, apply F '],['fun','etbx','etbx:run/1',[]],['fun','etbx','etbx:run/2',[]],['fun','etbx','etbx:run/3',[]],['fun','etbx','etbx:select/1','returns an associative structure of the same passe'],['fun','etbx','etbx:seq/1',[]],['fun','etbx','etbx:seq/2',[]],['fun','etbx','etbx:set_loglevel/1','Set lager logging level at runtime.'],['fun','etbx','etbx:some_fun/1','returns a function that checks if any of the predi'],['fun','etbx','etbx:split/1','basically lists:split without the mental retardati'],['fun','etbx','etbx:start_app/1','Starts all dependencies for a given application an'],['fun','etbx','etbx:stop_app/2','Stops an application and all its dependencies.'],['fun','etbx','etbx:take/2',[]],['fun','etbx','etbx:to_atom/1',[]],['fun','etbx','etbx:to_atom/2',[]],['fun','etbx','etbx:to_binary/1',[]],['fun','etbx','etbx:to_float/1',[]],['fun','etbx','etbx:to_hex/1',[]],['fun','etbx','etbx:to_list/1',[]],['fun','etbx','etbx:to_rec/1','converts a property list into a record.'],['fun','etbx','etbx:to_string/1',[]],['fun','etbx','etbx:to_tuple/1',[]],['fun','etbx','etbx:trim/1',[]],['fun','etbx','etbx:update/1','update property K with value V in an associate str'],['fun','etbx','etbx_sdb:erase/1',[]],['fun','etbx','etbx_sdb:erase/2',[]],['fun','etbx','etbx_sdb:init/3','Initializes a DB object, reading its initial state'],['fun','etbx','etbx_sdb:lookup/2',[]],['fun','etbx','etbx_sdb:store/3',[]]];