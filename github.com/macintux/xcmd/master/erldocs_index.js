var index = [['app','xcmd','xcmd','[application]'],['mod','xcmd','xcmd',[]],['mod','xcmd','xcmd_app',[]],['mod','xcmd','xcmd_broadcast',[]],['mod','xcmd','xcmd_broadcast_handler',[]],['mod','xcmd','xcmd_exchange_fsm',[]],['mod','xcmd','xcmd_hashtree',[]],['mod','xcmd','xcmd_manager',[]],['mod','xcmd','xcmd_object',[]],['mod','xcmd','xcmd_sup',[]],['fun','xcmd','xcmd:delete/1','Removes the value associated with the given prefix'],['fun','xcmd','xcmd:delete/1','same as delete(FullPrefix, Key, []).'],['fun','xcmd','xcmd:fold/1','Fold over all keys and values stored under a given'],['fun','xcmd','xcmd:fold/1','same as fold(Fun, Acc0, FullPrefix, []).'],['fun','xcmd','xcmd:get/1','Retrieves the local value stored at the given pref'],['fun','xcmd','xcmd:get/1','same as get(FullPrefix, Key, []).'],['fun','xcmd','xcmd:iterator/1','Return an iterator pointing to the first key store'],['fun','xcmd','xcmd:iterator/1','same as iterator(FullPrefix, []).'],['fun','xcmd','xcmd:itr_close/1','Closes the iterator.'],['fun','xcmd','xcmd:itr_default/1','Returns the value returned when an iterator points'],['fun','xcmd','xcmd:itr_done/1','Returns true if there is nothing more to iterate o'],['fun','xcmd','xcmd:itr_key/1','Return the key pointed at by the iterator.'],['fun','xcmd','xcmd:itr_key_values/1','Return the key and value(s) pointed at by the iter'],['fun','xcmd','xcmd:itr_next/1','Advances the iterator.'],['fun','xcmd','xcmd:itr_value/1','Return a single value pointed at by the iterator.'],['fun','xcmd','xcmd:itr_values/1','Return all sibling values pointed at by the iterat'],['fun','xcmd','xcmd:prefix_hash/1','Return the local hash associated with a full-prefi'],['fun','xcmd','xcmd:put/1','Stores or updates the value at the given prefix an'],['fun','xcmd','xcmd:put/1','same as put(FullPrefix, Key, Value, []).'],['fun','xcmd','xcmd:to_list/1','Return a list of all keys and values stored under '],['fun','xcmd','xcmd:to_list/1','same as to_list(FullPrefix, []).'],['fun','xcmd','xcmd_app:start/2',[]],['fun','xcmd','xcmd_app:stop/1',[]],['fun','xcmd','xcmd_broadcast:broadcast/1','Broadcasts a message originating from this node.'],['fun','xcmd','xcmd_broadcast:broadcast_members/0','Returns the broadcast servers view of full cluster'],['fun','xcmd','xcmd_broadcast:broadcast_members/1','Returns the broadcast servers view of full cluster'],['fun','xcmd','xcmd_broadcast:cancel_exchanges/2','cancel exchanges started by this node.'],['fun','xcmd','xcmd_broadcast:debug_get_peers/1','return the peers for Node for the tree rooted at R'],['fun','xcmd','xcmd_broadcast:debug_get_peers/1','return the peers for Node for the tree rooted at R'],['fun','xcmd','xcmd_broadcast:debug_get_tree/1','return peers for all Nodes for tree rooted at Root'],['fun','xcmd','xcmd_broadcast:exchanges/0','return a list of exchanges, started by broadcast o'],['fun','xcmd','xcmd_broadcast:exchanges/1','returns a list of exchanges, started by broadcast '],['fun','xcmd','xcmd_broadcast:ring_update/1','Notifies broadcast server of membership update giv'],['fun','xcmd','xcmd_broadcast:start_link/1','Starts the broadcast server on this node.'],['fun','xcmd','xcmd_broadcast:start_link/1','Starts the broadcast server on this node.'],['fun','xcmd','xcmd_exchange_fsm:code_change/4',[]],['fun','xcmd','xcmd_exchange_fsm:exchange/2',[]],['fun','xcmd','xcmd_exchange_fsm:exchange/3',[]],['fun','xcmd','xcmd_exchange_fsm:handle_event/3',[]],['fun','xcmd','xcmd_exchange_fsm:handle_info/3',[]],['fun','xcmd','xcmd_exchange_fsm:handle_sync_event/4',[]],['fun','xcmd','xcmd_exchange_fsm:init/1',[]],['fun','xcmd','xcmd_exchange_fsm:prepare/2',[]],['fun','xcmd','xcmd_exchange_fsm:prepare/3',[]],['fun','xcmd','xcmd_exchange_fsm:start/1','Start an exchange of Cluster Metadata hashtrees be'],['fun','xcmd','xcmd_exchange_fsm:terminate/3',[]],['fun','xcmd','xcmd_exchange_fsm:update/2',[]],['fun','xcmd','xcmd_exchange_fsm:update/3',[]],['fun','xcmd','xcmd_hashtree:code_change/3',[]],['fun','xcmd','xcmd_hashtree:compare/1','Compare the local tree managed by this process wit'],['fun','xcmd','xcmd_hashtree:get_bucket/1','Return the bucket for a node in the tree managed b'],['fun','xcmd','xcmd_hashtree:handle_call/3',[]],['fun','xcmd','xcmd_hashtree:handle_cast/2',[]],['fun','xcmd','xcmd_hashtree:handle_info/2',[]],['fun','xcmd','xcmd_hashtree:init/1',[]],['fun','xcmd','xcmd_hashtree:insert/1','Insert a hash for a full-prefix and key into the t'],['fun','xcmd','xcmd_hashtree:insert/1','Same as insert(PKey, Hash, false).'],['fun','xcmd','xcmd_hashtree:key_hashes/1','Return the key hashes for a node in the tree manag'],['fun','xcmd','xcmd_hashtree:lock/0','Locks the tree on this node for updating on behalf'],['fun','xcmd','xcmd_hashtree:lock/1','Lock the tree for updating.'],['fun','xcmd','xcmd_hashtree:lock/1','Locks the tree on Node for updating on behalf of t'],['fun','xcmd','xcmd_hashtree:prefix_hash/1','Return the hash for the given prefix or full-prefi'],['fun','xcmd','xcmd_hashtree:start_link/1','Starts a registered process that manages a hashtre'],['fun','xcmd','xcmd_hashtree:terminate/2',[]],['fun','xcmd','xcmd_hashtree:update/0','Updates the tree on this node.'],['fun','xcmd','xcmd_hashtree:update/1','Updates the tree on Node.'],['fun','xcmd','xcmd_manager:broadcast_data/1','Deconstructs are broadcast that is sent using xcmd'],['fun','xcmd','xcmd_manager:exchange/1','Trigger an exchange.'],['fun','xcmd','xcmd_manager:get/1','Same as get/1 but reads the value from Node'],['fun','xcmd','xcmd_manager:get/1','Reads the value for a prefixed key.'],['fun','xcmd','xcmd_manager:graft/1','returns the object associated with the given key a'],['fun','xcmd','xcmd_manager:is_stale/1','Returns false if the update (or a causally newer u'],['fun','xcmd','xcmd_manager:iterate/1','advance the iterator by one key, full-prefix or su'],['fun','xcmd','xcmd_manager:iterator/0','Returns a full-prefix iterator: an iterator for al'],['fun','xcmd','xcmd_manager:iterator/1','Return an iterator for keys stored under a prefix.'],['fun','xcmd','xcmd_manager:iterator/1','Returns a sub-prefix iterator for a given prefix.'],['fun','xcmd','xcmd_manager:iterator_close/1','Closes the iterator.'],['fun','xcmd','xcmd_manager:iterator_done/1','returns true if there are no more keys or prefixes'],['fun','xcmd','xcmd_manager:iterator_prefix/1','return the full-prefix or prefix being iterated by'],['fun','xcmd','xcmd_manager:iterator_value/1','return the key and object or the prefix pointed to'],['fun','xcmd','xcmd_manager:merge/1','Merges a remote copy of a metadata record sent via'],['fun','xcmd','xcmd_manager:merge/1','same as merge/2 but merges the object on Node'],['fun','xcmd','xcmd_manager:put/1','Sets the value of a prefixed key.'],['fun','xcmd','xcmd_manager:remote_iterator/1','Create an iterator on Node.'],['fun','xcmd','xcmd_manager:remote_iterator/1','Create an iterator on Node.'],['fun','xcmd','xcmd_manager:start_link/0','Same as start_link([]).'],['fun','xcmd','xcmd_manager:start_link/1','Start xcmd_manager and link to calling process.'],['fun','xcmd','xcmd_object:context/1','returns the context (opaque causal history) for th'],['fun','xcmd','xcmd_object:empty_context/0','returns the representation for an empty context (o'],['fun','xcmd','xcmd_object:equal_context/1','Returns true if the given context and the context '],['fun','xcmd','xcmd_object:hash/1','returns a hash representing the metadata objects c'],['fun','xcmd','xcmd_object:is_stale/1','Determines if the given context (version vector) i'],['fun','xcmd','xcmd_object:modify/1','modifies a potentially existing object, setting it'],['fun','xcmd','xcmd_object:reconcile/1','Reconciles a remote object received during replica'],['fun','xcmd','xcmd_object:resolve/1','Resolves siblings using either last-write-wins or '],['fun','xcmd','xcmd_object:value/1','returns a single value.'],['fun','xcmd','xcmd_object:value_count/1','returns the number of siblings in the given object'],['fun','xcmd','xcmd_object:values/1','returns a list of values held in the object.'],['fun','xcmd','xcmd_sup:init/1',[]],['fun','xcmd','xcmd_sup:start_link/1',[]]];