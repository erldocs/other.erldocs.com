var index = [['app','meck','meck','[application]'],['mod','meck','meck','Module mocking library for Erlang.'],['mod','meck','meck_code','Module wrangling helper functions.'],['mod','meck','meck_code_gen','Implements code generation for mocked module and a'],['mod','meck','meck_cover','Module containing functions needed by meck to inte'],['mod','meck','meck_expect','Provides expectation processing functions.'],['mod','meck','meck_history','Provides functions for digging information from th'],['mod','meck','meck_proc','Implements a gen_server that maintains the state o'],['mod','meck','meck_ret_spec','Provides expectation processing functions.'],['mod','meck','meck_util','Contains utility functions that used around other '],['fun','meck','meck:called/3','Returns whether Mod:Func has been called with Args'],['fun','meck','meck:called/4','Returns whether Pid has called Mod:Func with Args.'],['fun','meck','meck:delete/3','Deletes an expectation.'],['fun','meck','meck:exception/2','Throws an expected exception inside an expect fun.'],['fun','meck','meck:exec/1','Creates a ret_spec() from a function.'],['fun','meck','meck:expect/3','Add expectation for a function Func to the mocked '],['fun','meck','meck:expect/4','Adds an expectation with the supplied arity and re'],['fun','meck','meck:history/1','Return the call history of the mocked module for a'],['fun','meck','meck:history/2','Return the call history of the mocked module for t'],['fun','meck','meck:loop/1','Converts a list of terms into ret_spec() defining '],['fun','meck','meck:loop/4','Equivalent to expect(Mod, Func, Ari, loop(Loop)).'],['fun','meck','meck:new/1','Equivalent to new(Mod, []).'],['fun','meck','meck:new/2','Creates new mocked module(s).'],['fun','meck','meck:num_calls/3','Returns the number of times Mod:Func has been call'],['fun','meck','meck:num_calls/4','Returns the number of times process Pid has called'],['fun','meck','meck:passthrough/0','Creates a ret_spec() that makes the original modul'],['fun','meck','meck:passthrough/1','Calls the original function (if existing) inside a'],['fun','meck','meck:raise/2','Creates a ret_spec() that defines an exception.'],['fun','meck','meck:reset/1','Erases the call history for a mocked module or a l'],['fun','meck','meck:seq/1','Converts a list of terms into ret_spec() defining '],['fun','meck','meck:sequence/4','Equivalent to expect(Mod, Func, Ari, seq(Sequence)'],['fun','meck','meck:unload/0','Unloads all mocked modules from memory.'],['fun','meck','meck:unload/1','Unload a mocked module or a list of mocked modules'],['fun','meck','meck:val/1','Converts a term into ret_spec() defining an indivi'],['fun','meck','meck:validate/1','Validate the state of the mock module(s).'],['fun','meck','meck_code:abstract_code/1',[]],['fun','meck','meck_code:add_exports/1',[]],['fun','meck','meck_code:beam_file/1',[]],['fun','meck','meck_code:compile_and_load_forms/1',[]],['fun','meck','meck_code:compile_and_load_forms/1',[]],['fun','meck','meck_code:compile_options/1',[]],['fun','meck','meck_code:rename_module/1',[]],['fun','meck','meck_code_gen:get_current_call/0',[]],['fun','meck','meck_code_gen:to_forms/2',[]],['fun','meck','meck_cover:compile_beam/2','Enabled cover on &lt;name&gt;_meck_original.'],['fun','meck','meck_cover:rename_module/2','Given a cover file File exported by cover:export o'],['fun','meck','meck_expect:match/1',[]],['fun','meck','meck_expect:new/1',[]],['fun','meck','meck_expect:new/1',[]],['fun','meck','meck_expect:new_dummy/1',[]],['fun','meck','meck_expect:new_passthrough/1',[]],['fun','meck','meck_history:get_history/1',[]],['fun','meck','meck_history:num_calls/1',[]],['fun','meck','meck_proc:add_history/1',[]],['fun','meck','meck_proc:delete_expect/1',[]],['fun','meck','meck_proc:get_history/1',[]],['fun','meck','meck_proc:get_result_spec/1',[]],['fun','meck','meck_proc:invalidate/1',[]],['fun','meck','meck_proc:reset/1',[]],['fun','meck','meck_proc:set_expect/1',[]],['fun','meck','meck_proc:start/1',[]],['fun','meck','meck_proc:stop/1',[]],['fun','meck','meck_proc:validate/1',[]],['fun','meck','meck_ret_spec:eval_result/1',[]],['fun','meck','meck_ret_spec:exec/1',[]],['fun','meck','meck_ret_spec:is_meck_exception/1',[]],['fun','meck','meck_ret_spec:loop/1',[]],['fun','meck','meck_ret_spec:passthrough/0',[]],['fun','meck','meck_ret_spec:raise/2',[]],['fun','meck','meck_ret_spec:retrieve_result/1',[]],['fun','meck','meck_ret_spec:seq/1',[]],['fun','meck','meck_ret_spec:val/1',[]],['fun','meck','meck_util:match_spec_item/1',[]],['fun','meck','meck_util:original_name/1',[]],['fun','meck','meck_util:proc_name/1',[]]];