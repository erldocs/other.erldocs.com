var index = [['app','stockdb','stockdb','[application]'],['mod','stockdb','leb128','LEB128 (http://en.wikipedia.org/wiki/LEB128) reali'],['mod','stockdb','stockdb','Stock database   Designed for continious writing '],['mod','stockdb','stockdb_app',[]],['mod','stockdb','stockdb_appender',[]],['mod','stockdb','stockdb_appender_tests',[]],['mod','stockdb','stockdb_filters',[]],['mod','stockdb','stockdb_format','stockdb_format: module that codes and decodes   a'],['mod','stockdb','stockdb_format_tests',[]],['mod','stockdb','stockdb_format_v1','Binary row format for stockdb.'],['mod','stockdb','stockdb_format_v1_tests',[]],['mod','stockdb','stockdb_fs','stockdb_fs   This module handles DB file structur'],['mod','stockdb','stockdb_helpers',[]],['mod','stockdb','stockdb_iterator','StockDB iterator module   It accepts stockdb stat'],['mod','stockdb','stockdb_migrate','migrate v1 to v2.'],['mod','stockdb','stockdb_raw_tests',[]],['mod','stockdb','stockdb_reader','stockdb_reader   Read-only API.'],['mod','stockdb','stockdb_reader_tests',[]],['mod','stockdb','stockdb_saver',[]],['mod','stockdb','stockdb_sup',[]],['mod','stockdb','stockdb_test_helper',[]],['mod','stockdb','stockdb_validator',[]],['mod','stockdb','stockdb_validator_tests',[]],['fun','stockdb','leb128:decode/1',[]],['fun','stockdb','leb128:decode_signed/1',[]],['fun','stockdb','leb128:encode/1',[]],['fun','stockdb','leb128:encode_signed/1',[]],['fun','stockdb','leb128:profile/0',[]],['fun','stockdb','stockdb:append/1','Append row to db.'],['fun','stockdb','stockdb:candle/1',[]],['fun','stockdb','stockdb:candle/1',[]],['fun','stockdb','stockdb:close/1','close stockdb.'],['fun','stockdb','stockdb:common_dates/1','List dates when all given stocks have data, remote'],['fun','stockdb','stockdb:common_dates/1','List dates when all given stocks have data.'],['fun','stockdb','stockdb:dates/1','List of available dates in remote database.'],['fun','stockdb','stockdb:dates/1','List of available dates for stock.'],['fun','stockdb','stockdb:events/1','Just read all events from stockdb.'],['fun','stockdb','stockdb:events/1','Read all events for stock and date.'],['fun','stockdb','stockdb:events/1','Get all events from filtered stock/date.'],['fun','stockdb','stockdb:events/2','Get all events from filtered stock/date.'],['fun','stockdb','stockdb:info/1','Fetch requested information about given Stock/Date'],['fun','stockdb','stockdb:info/1','Fetch typical information about given Stock/Date.'],['fun','stockdb','stockdb:info/1','Fetch information from opened stockdb.'],['fun','stockdb','stockdb:init_reader/1','Shortcut for opening iterator on stock-date pair.'],['fun','stockdb','stockdb:init_reader/1','Init iterator over opened stockdb Options:    {r'],['fun','stockdb','stockdb:open_append/1','Open stock for appending.'],['fun','stockdb','stockdb:open_read/1','Open stock for reading.'],['fun','stockdb','stockdb:read_event/1','Read next event from iterator.'],['fun','stockdb','stockdb:stocks/0','List of stocks in local database.'],['fun','stockdb','stockdb:stocks/1','List of stocks in remote database.'],['fun','stockdb','stockdb:timestamp/1',[]],['fun','stockdb','stockdb:write_events/1',[]],['fun','stockdb','stockdb:write_events/1',[]],['fun','stockdb','stockdb_app:start/2',[]],['fun','stockdb','stockdb_app:stop/1',[]],['fun','stockdb','stockdb_appender:append/2',[]],['fun','stockdb','stockdb_appender:close/1',[]],['fun','stockdb','stockdb_appender:open/2',[]],['fun','stockdb','stockdb_appender:write_events/3',[]],['fun','stockdb','stockdb_filters:candle/2',[]],['fun','stockdb','stockdb_filters:count/2',[]],['fun','stockdb','stockdb_filters:drop/2',[]],['fun','stockdb','stockdb_filters:last/2',[]],['fun','stockdb','stockdb_format:decode_delta_md/1',[]],['fun','stockdb','stockdb_format:decode_full_md/1',[]],['fun','stockdb','stockdb_format:decode_packet/1','Main decoding function.'],['fun','stockdb','stockdb_format:decode_packet/1','Main decoding function: takes binary and depth, re'],['fun','stockdb','stockdb_format:decode_packet/1','Univeral decoding function: takes binary and depth'],['fun','stockdb','stockdb_format:decode_trade/1',[]],['fun','stockdb','stockdb_format:encode_delta_md/1','Encode delta MD packet with given timestamp delta '],['fun','stockdb','stockdb_format:encode_delta_md/3','Alias for encode_delta_md/2 with explicit Bid/Ask.'],['fun','stockdb','stockdb_format:encode_full_md/1','Encode full MD packet with given timestamp and (ne'],['fun','stockdb','stockdb_format:encode_full_md/3','Alias for encode_full_md/2 with explicit Bid/Ask.'],['fun','stockdb','stockdb_format:encode_trade/1',[]],['fun','stockdb','stockdb_format:encode_trade/2','higher-level trade encoding.'],['fun','stockdb','stockdb_format:format_header_value/2','serialize header value, used when writing header.'],['fun','stockdb','stockdb_format:get_timestamp/1',[]],['fun','stockdb','stockdb_format:parse_header_value/2','deserialize header value, used when parsing header'],['fun','stockdb','stockdb_format_v1:decode_delta_md/2',[]],['fun','stockdb','stockdb_format_v1:decode_full_md/2',[]],['fun','stockdb','stockdb_format_v1:decode_trade/1',[]],['fun','stockdb','stockdb_format_v1:encode_delta_md/2',[]],['fun','stockdb','stockdb_format_v1:encode_full_md/1',[]],['fun','stockdb','stockdb_format_v1:encode_trade/3',[]],['fun','stockdb','stockdb_format_v1:format_header_value/2',[]],['fun','stockdb','stockdb_format_v1:packet_type/1',[]],['fun','stockdb','stockdb_format_v1:parse_header_value/2',[]],['fun','stockdb','stockdb_format_v1:read_all_packets/2',[]],['fun','stockdb','stockdb_fs:common_dates/1','List dates when all given stocks have data.'],['fun','stockdb','stockdb_fs:common_dates/2',[]],['fun','stockdb','stockdb_fs:dates/1','List of available dates in remote database.'],['fun','stockdb','stockdb_fs:dates/1','List of available dates for stock.'],['fun','stockdb','stockdb_fs:file_info/1','return file information as {db, Stock, Date} if po'],['fun','stockdb','stockdb_fs:parse_date/1','Parse string with date.'],['fun','stockdb','stockdb_fs:path/1','Return path to DB file for given stock and date.'],['fun','stockdb','stockdb_fs:root/0','Return root dir of history.'],['fun','stockdb','stockdb_fs:stocks/0','List of stocks in local database.'],['fun','stockdb','stockdb_fs:stocks/1','List of stocks in remote database.'],['fun','stockdb','stockdb_helpers:candle/1',[]],['fun','stockdb','stockdb_helpers:md_at/2',[]],['fun','stockdb','stockdb_helpers:timestamp/1',[]],['fun','stockdb','stockdb_iterator:all_events/1','read all events from buffer until eof.'],['fun','stockdb','stockdb_iterator:filter/2','Filter source iterator, expposing same API as usua'],['fun','stockdb','stockdb_iterator:filter/3',[]],['fun','stockdb','stockdb_iterator:foldl/3',[]],['fun','stockdb','stockdb_iterator:foldl/4',[]],['fun','stockdb','stockdb_iterator:init/1','Initialize iterator.'],['fun','stockdb','stockdb_iterator:read_event/1','Pop first event from iterator, return {Event|eof, '],['fun','stockdb','stockdb_iterator:restore_last_state/1','replay last chunk and return finl state.'],['fun','stockdb','stockdb_iterator:seek_utc/2','Set position to given time.'],['fun','stockdb','stockdb_iterator:set_range/2','set time range.'],['fun','stockdb','stockdb_migrate:file/1',[]],['fun','stockdb','stockdb_reader:file_info/1','return some file_info about opened stockdb.'],['fun','stockdb','stockdb_reader:file_info/2','read file info.'],['fun','stockdb','stockdb_reader:open/1',[]],['fun','stockdb','stockdb_reader:open_existing_db/2',[]],['fun','stockdb','stockdb_reader:open_for_migrate/1',[]],['fun','stockdb','stockdb_saver:add_handler/3',[]],['fun','stockdb','stockdb_saver:add_sup_handler/3',[]],['fun','stockdb','stockdb_saver:code_change/3',[]],['fun','stockdb','stockdb_saver:handle_call/2',[]],['fun','stockdb','stockdb_saver:handle_event/2',[]],['fun','stockdb','stockdb_saver:handle_info/2',[]],['fun','stockdb','stockdb_saver:identity/2',[]],['fun','stockdb','stockdb_saver:init/1',[]],['fun','stockdb','stockdb_saver:terminate/2',[]],['fun','stockdb','stockdb_sup:init/1',[]],['fun','stockdb','stockdb_sup:start_link/0',[]],['fun','stockdb','stockdb_sup:stop/0',[]],['fun','stockdb','stockdb_validator:validate/1',[]]];