var index = [['app','couchfoo','couchfoo','[application]'],['mod','couchfoo','couch_btree',[]],['mod','couchfoo','couch_db_header',[]],['mod','couchfoo','couch_doc',[]],['mod','couchfoo','couch_file',[]],['mod','couchfoo','couchfoo',[]],['mod','couchfoo','couchfoo_parse_opts',[]],['mod','couchfoo','couchfoo_util',[]],['mod','couchfoo','json_output',[]],['mod','couchfoo','mochijson2','Yet another JSON (RFC 4627) library for Erlang.'],['mod','couchfoo','mochinum','Useful numeric algorithms for floats that cover so'],['fun','couchfoo','couch_btree:depth_first_traverse/4',[]],['fun','couchfoo','couch_btree:valid_node/1',[]],['fun','couchfoo','couch_db_header:headerbin_to_tuple/1',[]],['fun','couchfoo','couch_db_header:upgrade_header/1',[]],['fun','couchfoo','couch_doc:rev_to_str/1',[]],['fun','couchfoo','couch_doc:revs_to_strs/1',[]],['fun','couchfoo','couch_file:append_header/2',[]],['fun','couchfoo','couch_file:block_count/1',[]],['fun','couchfoo','couch_file:block_to_offset/1',[]],['fun','couchfoo','couch_file:close/1',[]],['fun','couchfoo','couch_file:file_size/1',[]],['fun','couchfoo','couch_file:find_header/3',[]],['fun','couchfoo','couch_file:header_count/3',[]],['fun','couchfoo','couch_file:offset_to_block/1',[]],['fun','couchfoo','couch_file:open/1',[]],['fun','couchfoo','couch_file:open_header/2',[]],['fun','couchfoo','couch_file:pread_iolist/2',[]],['fun','couchfoo','couch_file:pread_term/2',[]],['fun','couchfoo','couchfoo:analyze_btree/2',[]],['fun','couchfoo','couchfoo:fold_headers/6',[]],['fun','couchfoo','couchfoo:main/1',[]],['fun','couchfoo','couchfoo_parse_opts:parse_options/2',[]],['fun','couchfoo','couchfoo_util:json_decode/1',[]],['fun','couchfoo','couchfoo_util:json_encode/1',[]],['fun','couchfoo','couchfoo_util:to_hex/1',[]],['fun','couchfoo','json_output:array_end/0',[]],['fun','couchfoo','json_output:array_start/0',[]],['fun','couchfoo','json_output:indent/0',[]],['fun','couchfoo','json_output:newline/0',[]],['fun','couchfoo','json_output:obj_end/0',[]],['fun','couchfoo','json_output:obj_field/2',[]],['fun','couchfoo','json_output:obj_field_name/1',[]],['fun','couchfoo','json_output:obj_field_value/1',[]],['fun','couchfoo','json_output:obj_start/0',[]],['fun','couchfoo','json_output:set_io_device/1',[]],['fun','couchfoo','json_output:spaces/1',[]],['fun','couchfoo','json_output:start_array_element/0',[]],['fun','couchfoo','json_output:unindent/0',[]],['fun','couchfoo','mochijson2:decode/1','Decode the given iolist to Erlang terms.'],['fun','couchfoo','mochijson2:decoder/1','Create a decoder/1 with the given options.'],['fun','couchfoo','mochijson2:encode/1','Encode the given as JSON to an iolist.'],['fun','couchfoo','mochijson2:encoder/1','Create an encoder/1 with the given options.'],['fun','couchfoo','mochinum:digits/1',' Returns a string that accurately represents the g'],['fun','couchfoo','mochinum:frexp/1',' Return the fractional and exponent part of an IEE'],['fun','couchfoo','mochinum:int_ceil/1',' Return the ceiling of F as an integer.'],['fun','couchfoo','mochinum:int_pow/1',' Moderately efficient way to exponentiate integers']];