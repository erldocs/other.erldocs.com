var index = [['app','meshup','meshup','[application]'],['mod','meshup','meshup','The MeshUp service-orchestration engine.'],['mod','meshup','meshup_callbacks','Dynamic callback objects.'],['mod','meshup','meshup_caps','Storage capabilities.'],['mod','meshup','meshup_contexts','Input/output contexts.'],['mod','meshup','meshup_contracts','Types and library functions for MeshUp service-con'],['mod','meshup','meshup_flow','Flow preprocessor.'],['mod','meshup','meshup_lib','Utility procedures used in MeshUp.'],['mod','meshup','meshup_lint','Endpoint linter.'],['mod','meshup','meshup_logger','MeshUp session logger behaviour.'],['mod','meshup','meshup_matcher','Pattern matcher.'],['mod','meshup','meshup_pp','MeshUp Pretty Printer.'],['mod','meshup','meshup_promises','Promises.'],['mod','meshup','meshup_resolver','Conflict-resolution procedures.'],['mod','meshup','meshup_service','The MeshUp service behaviour.'],['mod','meshup','meshup_sessions','Session guarantees.'],['mod','meshup','meshup_shell','The MeshUp REPL.'],['mod','meshup','meshup_state','State represetation used while computing the resul'],['mod','meshup','meshup_store','MeshUp data store behaviour.'],['mod','meshup','meshup_test_services','Various small services which provoke specific beha'],['mod','meshup','meshup_txn','Generate a flow from an annotated function.'],['fun','meshup','meshup:error/1',[]],['fun','meshup','meshup:error/1',[]],['fun','meshup','meshup:finish/1','Commit a suspended session.'],['fun','meshup','meshup:inspect/1','Return the current context of a suspended session.'],['fun','meshup','meshup:is_session/1',[]],['fun','meshup','meshup:ok/1',[]],['fun','meshup','meshup:resume/1','Resume a suspended session.'],['fun','meshup','meshup:start/1','Evaluate an endpoint.'],['fun','meshup','meshup_callbacks:call/1',[]],['fun','meshup','meshup_callbacks:is_callback/1',[]],['fun','meshup','meshup_callbacks:lookup/1',[]],['fun','meshup','meshup_callbacks:name/1',[]],['fun','meshup','meshup_callbacks:new/1',[]],['fun','meshup','meshup_caps:capability/1',[]],['fun','meshup','meshup_caps:is_capability/1','Returns true iff X is a capability.'],['fun','meshup','meshup_caps:new/1',[]],['fun','meshup','meshup_caps:new/1','Construct a new capability owned by the calling pr'],['fun','meshup','meshup_caps:revoke/1','Revoke Cap.'],['fun','meshup','meshup_caps:use/1','Apply the operation encapsulated by Cap to Args.'],['fun','meshup','meshup_contexts:derive/1','Return the value associated with K in Ctx or the r'],['fun','meshup','meshup_contexts:fold/1',[]],['fun','meshup','meshup_contexts:get/1',[]],['fun','meshup','meshup_contexts:get/1',[]],['fun','meshup','meshup_contexts:is_context/1',[]],['fun','meshup','meshup_contexts:multiget/1',[]],['fun','meshup','meshup_contexts:multiset/1',[]],['fun','meshup','meshup_contexts:new/0',[]],['fun','meshup','meshup_contexts:new/1',[]],['fun','meshup','meshup_contexts:pp/1',[]],['fun','meshup','meshup_contexts:set/1',[]],['fun','meshup','meshup_contexts:to_list/1',[]],['fun','meshup','meshup_contexts:to_obj/1',[]],['fun','meshup','meshup_contexts:transfer/1','Transfer the values associated with Ks in SrcCtx t'],['fun','meshup','meshup_contexts:transfer/2','Equivalent to transfer(SrcCtx, new(), Ks).'],['fun','meshup','meshup_contracts:call/1',[]],['fun','meshup','meshup_contracts:clauses/1',[]],['fun','meshup','meshup_contracts:fold/1','Fold Fun into Acc over Contract evaluated against '],['fun','meshup','meshup_contracts:in_namespace/1',[]],['fun','meshup','meshup_contracts:is_const/1',[]],['fun','meshup','meshup_contracts:is_name/1',[]],['fun','meshup','meshup_contracts:is_subst/1',[]],['fun','meshup','meshup_contracts:is_var/1',[]],['fun','meshup','meshup_contracts:namespace/1',[]],['fun','meshup','meshup_contracts:parse/1',[]],['fun','meshup','meshup_contracts:pp/1',[]],['fun','meshup','meshup_contracts:subst_fun/1',[]],['fun','meshup','meshup_contracts:subst_target/1',[]],['fun','meshup','meshup_contracts:type/1',[]],['fun','meshup','meshup_flow:annotate/2',[]],['fun','meshup','meshup_flow:rewrite/1',[]],['fun','meshup','meshup_lib:call_within/1',[]],['fun','meshup','meshup_lint:check/1','Return ok if Endpoint (assumed to compile) might a'],['fun','meshup','meshup_logger:behaviour_info/1',[]],['fun','meshup','meshup_logger:log/3',[]],['fun','meshup','meshup_logger:new/1',[]],['fun','meshup','meshup_logger:redo/1',[]],['fun','meshup','meshup_matcher:match/1',[]],['fun','meshup','meshup_pp:cat/1',[]],['fun','meshup','meshup_pp:fmt/1',[]],['fun','meshup','meshup_pp:fmt/1',[]],['fun','meshup','meshup_pp:fmtln/1',[]],['fun','meshup','meshup_pp:fmtln/2',[]],['fun','meshup','meshup_pp:header/1',[]],['fun','meshup','meshup_pp:indent/1',[]],['fun','meshup','meshup_promises:eval/1','Return a promise for the result of Thunk, which ge'],['fun','meshup','meshup_promises:get/1','Get Promises value.'],['fun','meshup','meshup_promises:get/1','Get Promises value.'],['fun','meshup','meshup_promises:is_promise/1','Return true iff X is a promise.'],['fun','meshup','meshup_promises:is_set/1','Return true iff Promise has a value, otherwise fal'],['fun','meshup','meshup_promises:new/1','Return a fresh promise.'],['fun','meshup','meshup_promises:promise/1',[]],['fun','meshup','meshup_promises:set/1','Set Promises value to Val.'],['fun','meshup','meshup_resolver:behaviour_info/1',[]],['fun','meshup','meshup_resolver:compose/1',[]],['fun','meshup','meshup_resolver:from_fun/1',[]],['fun','meshup','meshup_resolver:make/1',[]],['fun','meshup','meshup_resolver:new/1',[]],['fun','meshup','meshup_resolver:resolve/3',[]],['fun','meshup','meshup_resolver:to_fun/1',[]],['fun','meshup','meshup_service:behaviour_info/1',[]],['fun','meshup','meshup_service:call/3',[]],['fun','meshup','meshup_service:describe/3',[]],['fun','meshup','meshup_service:make/3',[]],['fun','meshup','meshup_service:make/5',[]],['fun','meshup','meshup_service:name/1',[]],['fun','meshup','meshup_service:new/1',[]],['fun','meshup','meshup_service:props/2',[]],['fun','meshup','meshup_service:sla/2',[]],['fun','meshup','meshup_sessions:cancel/1',[]],['fun','meshup','meshup_sessions:collect/0','Garbage collect stale sessions.'],['fun','meshup','meshup_sessions:computation/1',[]],['fun','meshup','meshup_sessions:fresh_id/0',[]],['fun','meshup','meshup_sessions:id/1',[]],['fun','meshup','meshup_sessions:initial_state/0',[]],['fun','meshup','meshup_sessions:inspect/1',[]],['fun','meshup','meshup_sessions:is_halting_state/1',[]],['fun','meshup','meshup_sessions:is_mode/1',[]],['fun','meshup','meshup_sessions:is_session/1',[]],['fun','meshup','meshup_sessions:load/1',[]],['fun','meshup','meshup_sessions:merge/2',[]],['fun','meshup','meshup_sessions:mode/1',[]],['fun','meshup','meshup_sessions:new/1',[]],['fun','meshup','meshup_sessions:new_session/3',[]],['fun','meshup','meshup_sessions:older_than/3',[]],['fun','meshup','meshup_sessions:originated_on/2',[]],['fun','meshup','meshup_sessions:persist/1',[]],['fun','meshup','meshup_sessions:redo/2',[]],['fun','meshup','meshup_sessions:salvage/1','Re-apply WAL entries indiscriminantly.'],['fun','meshup','meshup_sessions:save/1',[]],['fun','meshup','meshup_sessions:state/2',[]],['fun','meshup','meshup_shell:repl/1',[]],['fun','meshup','meshup_shell:repl/2',[]],['fun','meshup','meshup_state:await/1','Replaces promises in State with their values.'],['fun','meshup','meshup_state:compress/1',[]],['fun','meshup','meshup_state:get/1','Get a context from a state; data items which dont'],['fun','meshup','meshup_state:init/1',[]],['fun','meshup','meshup_state:init/1','Add some initial data to State.'],['fun','meshup','meshup_state:merge/1','Perform a syntactic merge of two states.'],['fun','meshup','meshup_state:new/0','Make a fresh state.'],['fun','meshup','meshup_state:new/1',[]],['fun','meshup','meshup_state:pp/1',[]],['fun','meshup','meshup_state:set/1','Absorb the out-context of a service call back into'],['fun','meshup','meshup_state:to_context/1',[]],['fun','meshup','meshup_state:to_obj/1',[]],['fun','meshup','meshup_state:uncompress/1',[]],['fun','meshup','meshup_state:write/1','Write the latest version of every data item in Sta'],['fun','meshup','meshup_store:behaviour_info/1',[]],['fun','meshup','meshup_store:bind/3',[]],['fun','meshup','meshup_store:del/2',[]],['fun','meshup','meshup_store:del/3',[]],['fun','meshup','meshup_store:get/2',[]],['fun','meshup','meshup_store:get/3',[]],['fun','meshup','meshup_store:get_/2',[]],['fun','meshup','meshup_store:get_/3',[]],['fun','meshup','meshup_store:make/10',[]],['fun','meshup','meshup_store:make/7',[]],['fun','meshup','meshup_store:merge/4',[]],['fun','meshup','meshup_store:new/1',[]],['fun','meshup','meshup_store:patch_/3',[]],['fun','meshup','meshup_store:patch_/4',[]],['fun','meshup','meshup_store:put/3',[]],['fun','meshup','meshup_store:put/4',[]],['fun','meshup','meshup_store:put_/3',[]],['fun','meshup','meshup_store:put_/4',[]],['fun','meshup','meshup_store:return/3',[]],['fun','meshup','meshup_store:return/4',[]],['fun','meshup','meshup_test_services:block/0',[]],['fun','meshup','meshup_test_services:crash/1','Method crash raises Exn.'],['fun','meshup','meshup_test_services:guard/2','Method guard returns error(Rsn) iff Guard is false'],['fun','meshup','meshup_test_services:nop/0','Method nop does nothing.'],['fun','meshup','meshup_test_services:read/2','Method read reads Key from Store.'],['fun','meshup','meshup_test_services:timeout/0','Method timeout times out, or, if a Timeout &gt; 0 '],['fun','meshup','meshup_test_services:timeout/1',[]],['fun','meshup','meshup_test_services:write/3','Method write writes Key -&gt; Val to Store.'],['fun','meshup','meshup_txn:txn/1','Run a transaction (a generated flow analogous to F'],['fun','meshup','meshup_txn:txn/4',[]]];