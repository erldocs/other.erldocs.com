var index = [['app','gen_pn','gen_pn','[application]'],['mod','gen_pn','adj_list',[]],['mod','gen_pn','adj_list_tests',[]],['mod','gen_pn','gen_pn',[]],['mod','gen_pn','gen_pn_app','.'],['mod','gen_pn','gen_pn_sup',[]],['mod','gen_pn','petrinet','A simple petri net model.'],['mod','gen_pn','pn_tests',[]],['mod','gen_pn','sample_pn',[]],['fun','gen_pn','adj_list:add_adj/2',[]],['fun','gen_pn','adj_list:add_adjs/2',[]],['fun','gen_pn','adj_list:get_adjs/1',[]],['fun','gen_pn','adj_list:new/1',[]],['fun','gen_pn','adj_list:new/2',[]],['fun','gen_pn','gen_pn:behaviour_info/1',[]],['fun','gen_pn','gen_pn:init_it/6',[]],['fun','gen_pn','gen_pn:start/3','Start an anonymous instance of a petri net  Args '],['fun','gen_pn','gen_pn:start/4',[]],['fun','gen_pn','gen_pn_sup:start_link/0',[]],['fun','gen_pn','petrinet:add_arc/2','create an arc of type Type (in or out) between the'],['fun','gen_pn','petrinet:add_arcs/2','add a list of arcs to an existing petri net.'],['fun','gen_pn','petrinet:add_arcs/2',[]],['fun','gen_pn','petrinet:add_places/2','add a list of places to an existing petri net.'],['fun','gen_pn','petrinet:add_transitions/2','add a list of transitions to an existing petri net'],['fun','gen_pn','petrinet:adjust_marking/1','Adjust a marking for a given place with its old va'],['fun','gen_pn','petrinet:calculate_effect_on_marking/1','Calculate what the next marking will be if a trans'],['fun','gen_pn','petrinet:enabled_transitions/2','retrieves the list of all transitions that are ena'],['fun','gen_pn','petrinet:get_arcs/2','get arcs into or out of a given transition of a pe'],['fun','gen_pn','petrinet:get_fire_list/2','calculates what the next sequence of transition ac'],['fun','gen_pn','petrinet:get_fire_list/2','Gets the next transition that will fire, plus the '],['fun','gen_pn','petrinet:get_markings_for_transition/1','finds the incoming arcs into a transition and find'],['fun','gen_pn','petrinet:get_next_transition_to_fire/2','get the next transition to fire, and the resulting'],['fun','gen_pn','petrinet:inarc_exists/1','tests whether an entry exists for a given transiti'],['fun','gen_pn','petrinet:new/1','Construct a new Petri Net with supplied places and'],['fun','gen_pn','petrinet:new/1','Construct a new Petri Net with supplied places and'],['fun','gen_pn','petrinet:new/1','Construct a new (empty) petri net.'],['fun','gen_pn','petrinet:new_marking/1','constructs a new marking list.'],['fun','gen_pn','petrinet:outarc_exists/1','tests whether an entry exists for a given transiti'],['fun','gen_pn','petrinet:set_signal/3',[]],['fun','gen_pn','petrinet:signal/2',[]],['fun','gen_pn','petrinet:transition_is_enabled/1','tests whether all arcs into a given transition qua'],['fun','gen_pn','sample_pn:code_change/4',[]],['fun','gen_pn','sample_pn:init/3',[]],['fun','gen_pn','sample_pn:start/0',[]],['fun','gen_pn','sample_pn:start/1',[]],['fun','gen_pn','sample_pn:t1/5',[]],['fun','gen_pn','sample_pn:terminate/3',[]]];