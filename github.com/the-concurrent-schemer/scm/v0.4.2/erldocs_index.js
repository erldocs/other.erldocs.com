var index = [['app','scm','scm','[application]'],['mod','scm','scm_app','Scheme application.'],['mod','scm','scm_sup','Scheme supervisor.'],['mod','scm','scmi_analyze','Scheme interpreter syntactic analyzer.'],['mod','scm','scmi_analyze_derived','Scheme interpreter syntactic analyzer for derived '],['mod','scm','scmi_analyze_macro','Scheme interpreter syntactic analyzer for syntax e'],['mod','scm','scmi_analyze_primitive','Scheme interpreter syntactic analyzer for primitiv'],['mod','scm','scmi_analyze_program','Scheme interpreter syntactic analyzer for program '],['mod','scm','scmi_env','Scheme interpreter environment resource.'],['mod','scm','scmi_eval','Scheme interpreter expression evaluator.'],['mod','scm','scmi_iodev','Scheme interpreter i/o device resource and client.'],['mod','scm','scmi_iodev_server_file','Scheme interpreter i/o device file server.'],['mod','scm','scmi_iodev_server_ram','Scheme interpreter i/o device ram server.'],['mod','scm','scmi_iodev_server_std','Scheme interpreter i/o device stdio and stderr ser'],['mod','scm','scmi_iodev_server_std_test','Scheme interpreter i/o device stdio and stderr tes'],['mod','scm','scmi_types','Scheme interpreter types (for Erlang types and spe'],['mod','scm','scml','Scheme library.'],['mod','scm','scml_base_boolean','Scheme base library for booleans.'],['mod','scm','scml_base_bytevector','Scheme base library for bytevectors.'],['mod','scm','scml_base_char','Scheme base library for characters.'],['mod','scm','scml_base_control','Scheme base library for control features.'],['mod','scm','scml_base_equality','Scheme base library for equivalence predicates.'],['mod','scm','scml_base_exception','Scheme base library for exceptions.'],['mod','scm','scml_base_io','Scheme base library for input and output.'],['mod','scm','scml_base_list','Scheme base library for pairs and lists.'],['mod','scm','scml_base_number','Scheme base library for numbers.'],['mod','scm','scml_base_string','Scheme base library for strings.'],['mod','scm','scml_base_symbol','Scheme base library for symbols.'],['mod','scm','scml_base_system','Scheme base library for system interface.'],['mod','scm','scml_base_vector','Scheme base library for vectors.'],['mod','scm','scml_char','Scheme char library.'],['mod','scm','scml_complex','Scheme complex library.'],['mod','scm','scml_context','Scheme process-context library.'],['mod','scm','scml_cxr','Scheme cxr library.'],['mod','scm','scml_eval','Scheme eval library.'],['mod','scm','scml_file','Scheme file library.'],['mod','scm','scml_inexact','Scheme inexact library.'],['mod','scm','scml_lambda','Scheme case-lambda library.'],['mod','scm','scml_lazy','Scheme lazy library.'],['mod','scm','scml_load','Scheme load library.'],['mod','scm','scml_r5rs','Scheme r5rs library.'],['mod','scm','scml_read','Scheme read library.'],['mod','scm','scml_repl','Scheme repl library.'],['mod','scm','scml_time','Scheme time library.'],['mod','scm','scml_write','Scheme write library.'],['mod','scm','scmtmp','This module contains functions that are not yet im'],['mod','scm','xfm_import_as_export','Parse transform to export function imports.'],['fun','scm','scm_app:start/2',[]],['fun','scm','scm_app:stop/1',[]],['fun','scm','scm_sup:init/1',[]],['fun','scm','scm_sup:start_link/0',[]],['fun','scm','scmi_analyze:analyze/1',[]],['fun','scm','scmi_analyze:analyze/1',[]],['fun','scm','scmi_analyze:are_valid_variables/1',[]],['fun','scm','scmi_analyze:classify/1',[]],['fun','scm','scmi_analyze:flatten_variables/1',[]],['fun','scm','scmi_analyze:is_reserved_symbol/1',[]],['fun','scm','scmi_analyze:is_valid_variable/1',[]],['fun','scm','scmi_analyze:make_tmp_variables/1',[]],['fun','scm','scmi_analyze:splitnv_arguments/1',[]],['fun','scm','scmi_analyze:the_default/0',[]],['fun','scm','scmi_analyze:validate_variable/1',[]],['fun','scm','scmi_analyze:validate_variables/1',[]],['fun','scm','scmi_analyze_derived:$scmi_exports/0',[]],['fun','scm','scmi_analyze_derived:analyze_and/1',[]],['fun','scm','scmi_analyze_derived:analyze_begin/1',[]],['fun','scm','scmi_analyze_derived:analyze_case/1',[]],['fun','scm','scmi_analyze_derived:analyze_cond/1',[]],['fun','scm','scmi_analyze_derived:analyze_cond_expand/1',[]],['fun','scm','scmi_analyze_derived:analyze_do/1',[]],['fun','scm','scmi_analyze_derived:analyze_guard/1',[]],['fun','scm','scmi_analyze_derived:analyze_let/1',[]],['fun','scm','scmi_analyze_derived:analyze_let_values/1',[]],['fun','scm','scmi_analyze_derived:analyze_letrec/1',[]],['fun','scm','scmi_analyze_derived:analyze_letrec_values/1',[]],['fun','scm','scmi_analyze_derived:analyze_letrecs/1',[]],['fun','scm','scmi_analyze_derived:analyze_lets/1',[]],['fun','scm','scmi_analyze_derived:analyze_lets_values/1',[]],['fun','scm','scmi_analyze_derived:analyze_make_parameter/1',[]],['fun','scm','scmi_analyze_derived:analyze_or/1',[]],['fun','scm','scmi_analyze_derived:analyze_parameterize/1',[]],['fun','scm','scmi_analyze_derived:analyze_quasiquote/1',[]],['fun','scm','scmi_analyze_derived:analyze_unless/1',[]],['fun','scm','scmi_analyze_derived:analyze_unquote/1',[]],['fun','scm','scmi_analyze_derived:analyze_unquote_splicing/1',[]],['fun','scm','scmi_analyze_derived:analyze_when/1',[]],['fun','scm','scmi_analyze_derived:scan_out_internal_definitions/1',[]],['fun','scm','scmi_analyze_macro:$scmi_exports/0',[]],['fun','scm','scmi_analyze_macro:analyze_let_syntax/2',[]],['fun','scm','scmi_analyze_macro:analyze_letrec_syntax/2',[]],['fun','scm','scmi_analyze_macro:analyze_syntax_error/2',[]],['fun','scm','scmi_analyze_macro:analyze_syntax_rules/2',[]],['fun','scm','scmi_analyze_primitive:$scmi_exports/0',[]],['fun','scm','scmi_analyze_primitive:analyze_application/2',[]],['fun','scm','scmi_analyze_primitive:analyze_assignment/2',[]],['fun','scm','scmi_analyze_primitive:analyze_if/2',[]],['fun','scm','scmi_analyze_primitive:analyze_include/2',[]],['fun','scm','scmi_analyze_primitive:analyze_include_ci/2',[]],['fun','scm','scmi_analyze_primitive:analyze_include_lib/2',[]],['fun','scm','scmi_analyze_primitive:analyze_include_lib_ci/2',[]],['fun','scm','scmi_analyze_primitive:analyze_lambda/2',[]],['fun','scm','scmi_analyze_primitive:analyze_quote/2',[]],['fun','scm','scmi_analyze_primitive:analyze_sequence/2',[]],['fun','scm','scmi_analyze_primitive:apply/5',[]],['fun','scm','scmi_analyze_program:$scmi_exports/0',[]],['fun','scm','scmi_analyze_program:analyze_define/2',[]],['fun','scm','scmi_analyze_program:analyze_define_library/2',[]],['fun','scm','scmi_analyze_program:analyze_define_record_type/2',[]],['fun','scm','scmi_analyze_program:analyze_define_syntax/2',[]],['fun','scm','scmi_analyze_program:analyze_define_values/2',[]],['fun','scm','scmi_analyze_program:analyze_import/2',[]],['fun','scm','scmi_env:define_variable/1',[]],['fun','scm','scmi_env:extend/1',[]],['fun','scm','scmi_env:is_immutable/1',[]],['fun','scm','scmi_env:is_resource/1',[]],['fun','scm','scmi_env:lookup_variable/1',[]],['fun','scm','scmi_env:make_immutable/1',[]],['fun','scm','scmi_env:notify_when_destroyed/1',[]],['fun','scm','scmi_env:notify_when_destroyed/1',[]],['fun','scm','scmi_env:safe_lookup_variable/1',[]],['fun','scm','scmi_env:set_variable/1',[]],['fun','scm','scmi_env:the_empty/0',[]],['fun','scm','scmi_eval:default_ccng/1',[]],['fun','scm','scmi_eval:default_ccok/1',[]],['fun','scm','scmi_eval:eval/1',[]],['fun','scm','scmi_eval:eval/1',[]],['fun','scm','scmi_eval:eval/1',[]],['fun','scm','scmi_eval:eval/1',[]],['fun','scm','scmi_eval:exec/1',[]],['fun','scm','scmi_eval:exec/1',[]],['fun','scm','scmi_eval:exec/1',[]],['fun','scm','scmi_eval:exec/1',[]],['fun','scm','scmi_iodev:close/1',[]],['fun','scm','scmi_iodev:close/1',[]],['fun','scm','scmi_iodev:flush/1',[]],['fun','scm','scmi_iodev:is_ready/1',[]],['fun','scm','scmi_iodev:is_resource/1',[]],['fun','scm','scmi_iodev:is_resource_alive/1',[]],['fun','scm','scmi_iodev:is_resource_alive/1',[]],['fun','scm','scmi_iodev:new/1',[]],['fun','scm','scmi_iodev:notify_when_destroyed/1',[]],['fun','scm','scmi_iodev:notify_when_destroyed/1',[]],['fun','scm','scmi_iodev:open/2',[]],['fun','scm','scmi_iodev:peek/1',[]],['fun','scm','scmi_iodev:read/1',[]],['fun','scm','scmi_iodev:read_all/1',[]],['fun','scm','scmi_iodev:read_line/1',[]],['fun','scm','scmi_iodev:write/1',[]],['fun','scm','scmi_iodev_server_file:close/1',[]],['fun','scm','scmi_iodev_server_file:close/1',[]],['fun','scm','scmi_iodev_server_file:code_change/3',[]],['fun','scm','scmi_iodev_server_file:flush/1',[]],['fun','scm','scmi_iodev_server_file:getopts/1',[]],['fun','scm','scmi_iodev_server_file:getopts/1',[]],['fun','scm','scmi_iodev_server_file:handle_call/3',[]],['fun','scm','scmi_iodev_server_file:handle_cast/2',[]],['fun','scm','scmi_iodev_server_file:handle_info/2',[]],['fun','scm','scmi_iodev_server_file:init/1',[]],['fun','scm','scmi_iodev_server_file:is_ready/1',[]],['fun','scm','scmi_iodev_server_file:peek/1',[]],['fun','scm','scmi_iodev_server_file:read/1',[]],['fun','scm','scmi_iodev_server_file:read_all/1',[]],['fun','scm','scmi_iodev_server_file:read_line/1',[]],['fun','scm','scmi_iodev_server_file:start/1',[]],['fun','scm','scmi_iodev_server_file:terminate/2',[]],['fun','scm','scmi_iodev_server_file:write/1',[]],['fun','scm','scmi_iodev_server_ram:close/1',[]],['fun','scm','scmi_iodev_server_ram:close/1',[]],['fun','scm','scmi_iodev_server_ram:code_change/3',[]],['fun','scm','scmi_iodev_server_ram:flush/1',[]],['fun','scm','scmi_iodev_server_ram:getopts/1',[]],['fun','scm','scmi_iodev_server_ram:getopts/1',[]],['fun','scm','scmi_iodev_server_ram:handle_call/3',[]],['fun','scm','scmi_iodev_server_ram:handle_cast/2',[]],['fun','scm','scmi_iodev_server_ram:handle_info/2',[]],['fun','scm','scmi_iodev_server_ram:init/1',[]],['fun','scm','scmi_iodev_server_ram:is_ready/1',[]],['fun','scm','scmi_iodev_server_ram:peek/1',[]],['fun','scm','scmi_iodev_server_ram:read/1',[]],['fun','scm','scmi_iodev_server_ram:read_all/1',[]],['fun','scm','scmi_iodev_server_ram:read_line/1',[]],['fun','scm','scmi_iodev_server_ram:start/1',[]],['fun','scm','scmi_iodev_server_ram:terminate/2',[]],['fun','scm','scmi_iodev_server_ram:write/1',[]],['fun','scm','scmi_iodev_server_std:close/1',[]],['fun','scm','scmi_iodev_server_std:close/1',[]],['fun','scm','scmi_iodev_server_std:code_change/3',[]],['fun','scm','scmi_iodev_server_std:flush/1',[]],['fun','scm','scmi_iodev_server_std:getopts/1',[]],['fun','scm','scmi_iodev_server_std:getopts/1',[]],['fun','scm','scmi_iodev_server_std:handle_call/3',[]],['fun','scm','scmi_iodev_server_std:handle_cast/2',[]],['fun','scm','scmi_iodev_server_std:handle_info/2',[]],['fun','scm','scmi_iodev_server_std:init/1',[]],['fun','scm','scmi_iodev_server_std:is_ready/1',[]],['fun','scm','scmi_iodev_server_std:peek/1',[]],['fun','scm','scmi_iodev_server_std:read/1',[]],['fun','scm','scmi_iodev_server_std:read_all/1',[]],['fun','scm','scmi_iodev_server_std:read_line/1',[]],['fun','scm','scmi_iodev_server_std:start/2',[]],['fun','scm','scmi_iodev_server_std:terminate/2',[]],['fun','scm','scmi_iodev_server_std:write/1',[]],['fun','scm','scmi_iodev_server_std_test:test_server/1',[]],['fun','scm','scml:binary_part/1',[]],['fun','scm','scml:binary_part/1',[]],['fun','scm','scml:libraries/0','This function is a temporary place holder.'],['fun','scm','scml:list_part/1',[]],['fun','scm','scml:list_part/1',[]],['fun','scm','scml:to_unicode/1',[]],['fun','scm','scml:to_utf8/1',[]],['fun','scm','scml:tuple_part/1',[]],['fun','scm','scml:tuple_part/1',[]],['fun','scm','scml:unicode_to_utf8/1',[]],['fun','scm','scml:unicode_to_utf8/1',[]],['fun','scm','scml:unicode_to_utf8/1',[]],['fun','scm','scml:utf8_to_unicode/1',[]],['fun','scm','scml:utf8_to_unicode/1',[]],['fun','scm','scml:utf8_to_unicode/1',[]],['fun','scm','scml_base_boolean:$scml_exports/0',[]],['fun','scm','scml_base_boolean:boolean=?/1','Returns #t if all the arguments are booleans and a'],['fun','scm','scml_base_boolean:boolean?/1','Returns #t if obj is either #t or #f, and returns '],['fun','scm','scml_base_boolean:not/1','Returns #t if obj is false, and returns #f otherwi'],['fun','scm','scml_base_bytevector:$scml_exports/0',[]],['fun','scm','scml_base_bytevector:bytevector-append/1','Returns a bytevector whose bytes are the concatena'],['fun','scm','scml_base_bytevector:bytevector-copy!/1','_unsupported_.'],['fun','scm','scml_base_bytevector:bytevector-copy!/1','_unsupported_.'],['fun','scm','scml_base_bytevector:bytevector-copy!/1','_unsupported_.'],['fun','scm','scml_base_bytevector:bytevector-copy/1','Returns a bytevector constructed from the bytes of'],['fun','scm','scml_base_bytevector:bytevector-copy/1','Equivalent to bytevector-copy(V, Start, bytevec'],['fun','scm','scml_base_bytevector:bytevector-copy/1','Equivalent to bytevector-copy(V, 0, bytevector-'],['fun','scm','scml_base_bytevector:bytevector-length/1','Returns the number of bytes in the given bytevecto'],['fun','scm','scml_base_bytevector:bytevector-u8-ref/1','Returns byte k of bytevector using zero-origin ind'],['fun','scm','scml_base_bytevector:bytevector-u8-set!/1','_unsupported_.'],['fun','scm','scml_base_bytevector:bytevector/1','Returns a bytevector whose bytes contain the given'],['fun','scm','scml_base_bytevector:bytevector?/1','Returns #t if obj is a bytevector, otherwise retur'],['fun','scm','scml_base_bytevector:make-bytevector/1','Returns a bytevector of k bytes.'],['fun','scm','scml_base_bytevector:make-bytevector/1','Equivalent to make-bytevector(K, 0).'],['fun','scm','scml_base_bytevector:string->utf8/1','encodes the characters of a string between start a'],['fun','scm','scml_base_bytevector:string->utf8/1','Equivalent to string-&gt;utf8(S, Start, string-'],['fun','scm','scml_base_bytevector:string->utf8/1','Equivalent to string-&gt;utf8(S, 0, string-leng'],['fun','scm','scml_base_bytevector:utf8->string/1','Decodes the bytes of a bytevector between start an'],['fun','scm','scml_base_bytevector:utf8->string/1','Equivalent to utf8-&gt;string(V, Start, bytevec'],['fun','scm','scml_base_bytevector:utf8->string/1','Equivalent to utf8-&gt;string(V, 0, bytevector-'],['fun','scm','scml_base_char:$scml_exports/0',[]],['fun','scm','scml_base_char:char->integer/1','Returns an exact integer equal to the Unicode scal'],['fun','scm','scml_base_char:char<=?/1','Returns #t if all the characters are monotonically'],['fun','scm','scml_base_char:char<?/1','Returns #t if all the characters are monotonically'],['fun','scm','scml_base_char:char=?/1','Returns #t if all the characters are equal, otherw'],['fun','scm','scml_base_char:char>=?/1','Returns #t if all the characters are monotonically'],['fun','scm','scml_base_char:char>?/1','Returns #t if all the characters are monotonically'],['fun','scm','scml_base_char:char?/1','Returns #t if obj is a character, otherwise return'],['fun','scm','scml_base_char:integer->char/1','Returns a character equal to the Unicode scalar va'],['fun','scm','scml_base_control:$scml_exports/0',[]],['fun','scm','scml_base_control:apply/1','Calls +Proc+ with the elements of the list +(appen'],['fun','scm','scml_base_control:call-with-values/1','Calls its producer argument with no values and a c'],['fun','scm','scml_base_control:call/cc/1','Packages the current continuation as an "escape pr'],['fun','scm','scml_base_control:dynamic-wind/1','Calls +Thunk+ without arguments, returning the res'],['fun','scm','scml_base_control:for-each/1','Applies proc element-wise to the elements of the l'],['fun','scm','scml_base_control:map/1','Applies proc element-wise to the elements of the l'],['fun','scm','scml_base_control:procedure?/1','Returns #t if obj is a procedure, otherwise return'],['fun','scm','scml_base_control:string-for-each/1','Equivalent to for-each([Proc | Args]).'],['fun','scm','scml_base_control:string-map/1','Equivalent to map([Proc | Args]).'],['fun','scm','scml_base_control:values/1','Delivers all of its arguments to its continuation.'],['fun','scm','scml_base_control:vector-for-each/1','Equivalent to for-each([Proc | Args]).'],['fun','scm','scml_base_control:vector-map/1','Equivalent to map([Proc | Args]).'],['fun','scm','scml_base_equality:$scml_exports/0',[]],['fun','scm','scml_base_equality:eq?/1','Equivalent to eqv? / 2.'],['fun','scm','scml_base_equality:equal?/1','Returns #t if obj1 and obj2 have the same display'],['fun','scm','scml_base_equality:eqv?/1','Returns #t if obj1 and obj2 are normally regarded '],['fun','scm','scml_base_exception:$scml_exports/0',[]],['fun','scm','scml_base_exception:error-object-irritants/1','Returns the list of the irritants encapsulated by '],['fun','scm','scml_base_exception:error-object-message/1','Returns the message encapsulated by the +error-obj'],['fun','scm','scml_base_exception:error-object?/1','Returns #t if the given object is an object create'],['fun','scm','scml_base_exception:error/1','Raises an exception as if by calling +raise+ on a '],['fun','scm','scml_base_exception:file-error?/1','Returns #t if the given object is an object raised'],['fun','scm','scml_base_exception:raise-continuable/1','Raises an exception by invoking the current except'],['fun','scm','scml_base_exception:raise/1','Raises an exception by invoking the current except'],['fun','scm','scml_base_exception:read-error?/1','Returns #t if the given object is an object raised'],['fun','scm','scml_base_exception:with-exception-handler/1','Returns the results of invoking +Thunk+.'],['fun','scm','scml_base_io:$scml_exports/0',[]],['fun','scm','scml_base_io:binary-port?/1','Returns #t if obj is a binary port, otherwise retu'],['fun','scm','scml_base_io:call-with-port/1','Calls proc with port as an argument.'],['fun','scm','scml_base_io:char-ready?/0','Equivalent to char-ready?(current-input-port()'],['fun','scm','scml_base_io:char-ready?/1','Returns #t if a character is ready on the textual '],['fun','scm','scml_base_io:close-input-port/1','Close the resource associated with port, rendering'],['fun','scm','scml_base_io:close-output-port/1','Close the resource associated with port, rendering'],['fun','scm','scml_base_io:close-port/1','Close the resource associated with port, rendering'],['fun','scm','scml_base_io:current-error-port/0','Returns the current error port.'],['fun','scm','scml_base_io:current-error-port/1','Returns the converter procedure for the current er'],['fun','scm','scml_base_io:current-error-port/2','Saves the given port as the current error port.'],['fun','scm','scml_base_io:current-input-port/0','Returns the current input port.'],['fun','scm','scml_base_io:current-input-port/1','Returns the converter procedure for the current in'],['fun','scm','scml_base_io:current-input-port/2','Saves the given port as the current input port.'],['fun','scm','scml_base_io:current-output-port/0','Returns the current output port.'],['fun','scm','scml_base_io:current-output-port/1','Returns the converter procedure for the current ou'],['fun','scm','scml_base_io:current-output-port/2','Saves the given port as the current output port.'],['fun','scm','scml_base_io:eof-object/0','Returns an end-of-file object.'],['fun','scm','scml_base_io:eof-object?/1','Returns #t if obj is an end-of-file object, otherw'],['fun','scm','scml_base_io:flush-output-port/0','Equivalent to flush-output-port(current-output-'],['fun','scm','scml_base_io:flush-output-port/1','Flushes any buffered output from the buffer of out'],['fun','scm','scml_base_io:get-output-bytevector/1','Returns a bytevector consisting of the bytes that '],['fun','scm','scml_base_io:get-output-string/1','Returns a string consisting of the characters that'],['fun','scm','scml_base_io:input-port-open?/1','Returns #t if port is still open and capable of pe'],['fun','scm','scml_base_io:input-port?/1','Returns #t if obj is an input port, otherwise retu'],['fun','scm','scml_base_io:newline/0','Equivalent to newline(current-output-port()).'],['fun','scm','scml_base_io:newline/1','Writes an end of line to the textual output port.'],['fun','scm','scml_base_io:open-input-bytevector/1','Returns a binary input port that delivers bytes fr'],['fun','scm','scml_base_io:open-input-string/1','Returns a textual input port that delivers charact'],['fun','scm','scml_base_io:open-output-bytevector/0','Returns a binary output port that will accumulate '],['fun','scm','scml_base_io:open-output-string/0','Returns a textual output port that will accumulate'],['fun','scm','scml_base_io:output-port-open?/1','Returns #t if port is still open and capable of pe'],['fun','scm','scml_base_io:output-port?/1','Returns #t if obj is an output port, otherwise ret'],['fun','scm','scml_base_io:peek-char/0','Equivalent to peek-char(current-input-port()).'],['fun','scm','scml_base_io:peek-char/1','Returns the next character available from the text'],['fun','scm','scml_base_io:peek-u8/0','Equivalent to peek-u8(current-input-port()).'],['fun','scm','scml_base_io:peek-u8/1','Returns the next byte available from the binary in'],['fun','scm','scml_base_io:port?/1','Returns #t if obj is a port, otherwise returns #f.'],['fun','scm','scml_base_io:read-bytevector!/1','_unsupported_.'],['fun','scm','scml_base_io:read-bytevector!/1','_unsupported_.'],['fun','scm','scml_base_io:read-bytevector!/1','_unsupported_.'],['fun','scm','scml_base_io:read-bytevector!/1','_unsupported_.'],['fun','scm','scml_base_io:read-bytevector/1','Reads the next k bytes, or as many as are availabl'],['fun','scm','scml_base_io:read-bytevector/1','Equivalent to read-bytevector(K, current-input-'],['fun','scm','scml_base_io:read-char/0','Equivalent to read-char(current-input-port()).'],['fun','scm','scml_base_io:read-char/1','Returns the next character available from the text'],['fun','scm','scml_base_io:read-line/0','Equivalent to read-line(current-input-port()).'],['fun','scm','scml_base_io:read-line/1','Returns the next line of text available from the t'],['fun','scm','scml_base_io:read-string/1','Reads the next k characters, or as many as are ava'],['fun','scm','scml_base_io:read-string/1','Equivalent to read-string(K, current-input-port'],['fun','scm','scml_base_io:read-u8/0','Equivalent to read-u8(current-input-port()).'],['fun','scm','scml_base_io:read-u8/1','Returns the next byte available from the binary in'],['fun','scm','scml_base_io:textual-port?/1','Returns #t if obj is a textual port, otherwise ret'],['fun','scm','scml_base_io:u8-ready?/0','Equivalent to u8-ready?(current-input-port()).'],['fun','scm','scml_base_io:u8-ready?/1','Returns #t if a byte is ready on the binary input '],['fun','scm','scml_base_io:write-bytevector/1','Writes the bytes of bytevector from start to end i'],['fun','scm','scml_base_io:write-bytevector/1','Equivalent to write-bytevector(V, current-outpu'],['fun','scm','scml_base_io:write-bytevector/1','Equivalent to write-bytevector(V, current-outpu'],['fun','scm','scml_base_io:write-bytevector/1','Equivalent to write-bytevector(V, current-outpu'],['fun','scm','scml_base_io:write-char/1','Writes the character char to the given textual out'],['fun','scm','scml_base_io:write-char/1','Equivalent to write-char(C, current-output-port'],['fun','scm','scml_base_io:write-string/1','Writes the characters of string from start to end '],['fun','scm','scml_base_io:write-string/1','Equivalent to write-string(S, current-output-po'],['fun','scm','scml_base_io:write-string/1','Equivalent to write-string(S, current-output-po'],['fun','scm','scml_base_io:write-string/1','Equivalent to write-string(S, current-output-po'],['fun','scm','scml_base_io:write-u8/1','Writes the byte to the given binary output port.'],['fun','scm','scml_base_io:write-u8/1','Equivalent to write-u8(B, current-output-port('],['fun','scm','scml_base_list:$scml_exports/0',[]],['fun','scm','scml_base_list:append/1','Returns a list consisting of the elements of the f'],['fun','scm','scml_base_list:assoc/1','Return the first pair of alist whose car field is '],['fun','scm','scml_base_list:assoc/1','Equivalent to assoc(Obj, List, equal?).'],['fun','scm','scml_base_list:assq/1','Equivalent to assq(Obj, List, eq?).'],['fun','scm','scml_base_list:assv/1','Equivalent to assv(Obj, List, eqv?).'],['fun','scm','scml_base_list:caar/1','Returns the composition of car.'],['fun','scm','scml_base_list:cadr/1','Returns the composition of car and cdr.'],['fun','scm','scml_base_list:car/1','Returns the contents of the car field of pair.'],['fun','scm','scml_base_list:cdar/1','Returns the composition of cdr and car.'],['fun','scm','scml_base_list:cddr/1','Returns the composition of cdr and cdr.'],['fun','scm','scml_base_list:cdr/1','Returns the contents of the cdr field of pair.'],['fun','scm','scml_base_list:cons/1','Returns a pair whose car is obj1 and whose cdr is '],['fun','scm','scml_base_list:length/1','Returns the length of list.'],['fun','scm','scml_base_list:list-copy/1','Equivalent to list(obj).'],['fun','scm','scml_base_list:list-ref/1','Returns the kth element of list.'],['fun','scm','scml_base_list:list-set!/1','_unsupported_.'],['fun','scm','scml_base_list:list-tail/1','Returns the sublist of list obtained by omitting t'],['fun','scm','scml_base_list:list/1','Returns a list of the arguments.'],['fun','scm','scml_base_list:list?/1','Returns #t if obj is a (proper) list, otherwise re'],['fun','scm','scml_base_list:make-list/1','Returns a list of k elements.'],['fun','scm','scml_base_list:make-list/1','Equivalent to make-list(K, #f).'],['fun','scm','scml_base_list:member/1','Return the first sublist of list whose car is obj '],['fun','scm','scml_base_list:member/1','Equivalent to memq(Obj, List, equal?).'],['fun','scm','scml_base_list:memq/1','Equivalent to memq(Obj, List, eq?).'],['fun','scm','scml_base_list:memv/1','Equivalent to memq(Obj, List, eqv?).'],['fun','scm','scml_base_list:null?/1','Returns #t if obj is the empty list, otherwise ret'],['fun','scm','scml_base_list:pair?/1','Returns #t if obj is a pair, and otherwise returns'],['fun','scm','scml_base_list:reverse/1','Returns a list consisting of the elements of list '],['fun','scm','scml_base_list:set-car!/1','_unsupported_.'],['fun','scm','scml_base_list:set-cdr!/1','_unsupported_.'],['fun','scm','scml_base_number:$scml_exports/0',[]],['fun','scm','scml_base_number:*/1',[]],['fun','scm','scml_base_number:+/1',[]],['fun','scm','scml_base_number:-/1',[]],['fun','scm','scml_base_number://1',[]],['fun','scm','scml_base_number:</1',[]],['fun','scm','scml_base_number:<=/1',[]],['fun','scm','scml_base_number:=/1','This function is a temporary place holder and is n'],['fun','scm','scml_base_number:>/1',[]],['fun','scm','scml_base_number:>=/1',[]],['fun','scm','scml_base_number:abs/1',[]],['fun','scm','scml_base_number:ceiling/1',[]],['fun','scm','scml_base_number:complex?/1',[]],['fun','scm','scml_base_number:denominator/1',[]],['fun','scm','scml_base_number:even?/1',[]],['fun','scm','scml_base_number:exact-integer-sqrt/1',[]],['fun','scm','scml_base_number:exact-integer?/1',[]],['fun','scm','scml_base_number:exact/1',[]],['fun','scm','scml_base_number:exact?/1','This function is a temporary place holder and is n'],['fun','scm','scml_base_number:expt/1',[]],['fun','scm','scml_base_number:floor-quotient/1',[]],['fun','scm','scml_base_number:floor-remainder/1',[]],['fun','scm','scml_base_number:floor//1',[]],['fun','scm','scml_base_number:floor/1',[]],['fun','scm','scml_base_number:gcd/1',[]],['fun','scm','scml_base_number:inexact/1',[]],['fun','scm','scml_base_number:inexact?/1',[]],['fun','scm','scml_base_number:integer?/1',[]],['fun','scm','scml_base_number:lcm/1',[]],['fun','scm','scml_base_number:max/1',[]],['fun','scm','scml_base_number:min/1',[]],['fun','scm','scml_base_number:modulo/1',[]],['fun','scm','scml_base_number:negative?/1',[]],['fun','scm','scml_base_number:number->string/1',[]],['fun','scm','scml_base_number:number->string/1',[]],['fun','scm','scml_base_number:number?/1',[]],['fun','scm','scml_base_number:numerator/1',[]],['fun','scm','scml_base_number:odd?/1',[]],['fun','scm','scml_base_number:positive?/1',[]],['fun','scm','scml_base_number:quotient/1',[]],['fun','scm','scml_base_number:rational?/1',[]],['fun','scm','scml_base_number:rationalize/1',[]],['fun','scm','scml_base_number:real?/1',[]],['fun','scm','scml_base_number:remainder/1',[]],['fun','scm','scml_base_number:round/1',[]],['fun','scm','scml_base_number:square/1',[]],['fun','scm','scml_base_number:string->number/1',[]],['fun','scm','scml_base_number:string->number/1',[]],['fun','scm','scml_base_number:truncate-quotient/1',[]],['fun','scm','scml_base_number:truncate-remainder/1',[]],['fun','scm','scml_base_number:truncate//1',[]],['fun','scm','scml_base_number:truncate/1',[]],['fun','scm','scml_base_number:zero?/1',[]],['fun','scm','scml_base_string:$scml_exports/0',[]],['fun','scm','scml_base_string:list->string/1','Returns a string constructed from the characters i'],['fun','scm','scml_base_string:make-string/1','Returns a string of k characters.'],['fun','scm','scml_base_string:make-string/1','Equivalent to make-string(K, #\\null).'],['fun','scm','scml_base_string:string->list/1','Returns a list of the characters of string between'],['fun','scm','scml_base_string:string->list/1','Equivalent to string-&gt;list(S, Start, string-'],['fun','scm','scml_base_string:string->list/1','Equivalent to string-&gt;list(S, 0, string-leng'],['fun','scm','scml_base_string:string-append/1','Returns a string whose characters are the concaten'],['fun','scm','scml_base_string:string-copy!/1','_unsupported_.'],['fun','scm','scml_base_string:string-copy!/1','_unsupported_.'],['fun','scm','scml_base_string:string-copy!/1','_unsupported_.'],['fun','scm','scml_base_string:string-copy/1','Returns a string constructed from the characters o'],['fun','scm','scml_base_string:string-copy/1','Equivalent to string-copy(S, Start, string-leng'],['fun','scm','scml_base_string:string-copy/1','Equivalent to string-copy(S, 0, string-length('],['fun','scm','scml_base_string:string-fill!/1','_unsupported_.'],['fun','scm','scml_base_string:string-fill!/1','_unsupported_.'],['fun','scm','scml_base_string:string-fill!/1','_unsupported_.'],['fun','scm','scml_base_string:string-length/1','Returns the number of characters in the given stri'],['fun','scm','scml_base_string:string-ref/1','Returns character k of string using zero-origin in'],['fun','scm','scml_base_string:string-set!/1','_unsupported_.'],['fun','scm','scml_base_string:string/1','Returns a string composed of the arguments.'],['fun','scm','scml_base_string:string<=?/1','Returns #t if all the strings are monotonically  '],['fun','scm','scml_base_string:string<?/1','Returns #t if all the strings are monotonically in'],['fun','scm','scml_base_string:string=?/1','Returns #t if all the strings are the same length '],['fun','scm','scml_base_string:string>=?/1','Returns #t if all the strings are monotonically  '],['fun','scm','scml_base_string:string>?/1','Returns #t if all the strings are monotonically de'],['fun','scm','scml_base_string:string?/1','Returns #t if obj is a string, otherwise returns #'],['fun','scm','scml_base_string:substring/1','Equivalent to string-copy(S, Start, End).'],['fun','scm','scml_base_symbol:$scml_exports/0',[]],['fun','scm','scml_base_symbol:string->symbol/1','Returns the symbol whose name is string.'],['fun','scm','scml_base_symbol:symbol->string/1','Returns the name of symbol as a string, but withou'],['fun','scm','scml_base_symbol:symbol=?/1','Returns #t if all the arguments are symbols and al'],['fun','scm','scml_base_symbol:symbol?/1','Returns #t if obj is a symbol, otherwise returns #'],['fun','scm','scml_base_symbol:symbol_to_unicode/1',[]],['fun','scm','scml_base_symbol:unicode_to_symbol/1',[]],['fun','scm','scml_base_system:$scml_exports/0',[]],['fun','scm','scml_base_system:features/0',[]],['fun','scm','scml_base_vector:$scml_exports/0',[]],['fun','scm','scml_base_vector:list->vector/1','Returns a vector constructed from the elements in '],['fun','scm','scml_base_vector:make-vector/1','Returns a vector of k elements.'],['fun','scm','scml_base_vector:make-vector/1','Equivalent to make-vector(K, #f).'],['fun','scm','scml_base_vector:string->vector/1','Equivalent to list-&gt;vector(string-&gt;list('],['fun','scm','scml_base_vector:string->vector/1','Equivalent to list-&gt;vector(string-&gt;list('],['fun','scm','scml_base_vector:string->vector/1','Equivalent to list-&gt;vector(string-&gt;list('],['fun','scm','scml_base_vector:vector->list/1','Returns a list of the elements of vector between s'],['fun','scm','scml_base_vector:vector->list/1','Equivalent to vector-&gt;list(V, Start, vector-'],['fun','scm','scml_base_vector:vector->list/1','Equivalent to vector-&gt;list(V, 0, vector-leng'],['fun','scm','scml_base_vector:vector->string/1','Equivalent to list-&gt;string(vector-&gt;list('],['fun','scm','scml_base_vector:vector->string/1','Equivalent to vector-&gt;string(V, Start, vecto'],['fun','scm','scml_base_vector:vector->string/1','Equivalent to vector-&gt;string(V, 0, vector-le'],['fun','scm','scml_base_vector:vector-append/1','Returns a vector whose elements are the concatenat'],['fun','scm','scml_base_vector:vector-copy!/1','_unsupported_.'],['fun','scm','scml_base_vector:vector-copy!/1','_unsupported_.'],['fun','scm','scml_base_vector:vector-copy!/1','_unsupported_.'],['fun','scm','scml_base_vector:vector-copy/1','Returns a vector constructed from the elements of '],['fun','scm','scml_base_vector:vector-copy/1','Equivalent to vector-copy(V, Start, vector-leng'],['fun','scm','scml_base_vector:vector-copy/1','Equivalent to vector-copy(V, 0, vector-length('],['fun','scm','scml_base_vector:vector-fill!/1','_unsupported_.'],['fun','scm','scml_base_vector:vector-fill!/1','_unsupported_.'],['fun','scm','scml_base_vector:vector-fill!/1','_unsupported_.'],['fun','scm','scml_base_vector:vector-length/1','Returns the number of elements in the given vector'],['fun','scm','scml_base_vector:vector-ref/1','Returns element k of vector using zero-origin inde'],['fun','scm','scml_base_vector:vector-set!/1','_unsupported_.'],['fun','scm','scml_base_vector:vector/1','Returns a vector whose elements contain the given '],['fun','scm','scml_base_vector:vector?/1','Returns #t if obj is a vector, otherwise returns #'],['fun','scm','scml_char:$scml_exports/0',[]],['fun','scm','scml_char:char-alphabetic?/1',[]],['fun','scm','scml_char:char-ci<=?/1',[]],['fun','scm','scml_char:char-ci<?/1',[]],['fun','scm','scml_char:char-ci=?/1',[]],['fun','scm','scml_char:char-ci>=?/1',[]],['fun','scm','scml_char:char-ci>?/1',[]],['fun','scm','scml_char:char-downcase/1',[]],['fun','scm','scml_char:char-foldcase/1',[]],['fun','scm','scml_char:char-lower-case?/1',[]],['fun','scm','scml_char:char-numeric?/1',[]],['fun','scm','scml_char:char-upcase/1',[]],['fun','scm','scml_char:char-upper-case?/1',[]],['fun','scm','scml_char:char-whitespace?/1',[]],['fun','scm','scml_char:digit-value/1',[]],['fun','scm','scml_char:string-ci<=?/1',[]],['fun','scm','scml_char:string-ci<?/1',[]],['fun','scm','scml_char:string-ci=?/1',[]],['fun','scm','scml_char:string-ci>=?/1',[]],['fun','scm','scml_char:string-ci>?/1',[]],['fun','scm','scml_char:string-downcase/1',[]],['fun','scm','scml_char:string-foldcase/1',[]],['fun','scm','scml_char:string-upcase/1',[]],['fun','scm','scml_complex:$scml_exports/0',[]],['fun','scm','scml_complex:angle/1',[]],['fun','scm','scml_complex:imag-part/1',[]],['fun','scm','scml_complex:magnitude/1',[]],['fun','scm','scml_complex:make-polar/1',[]],['fun','scm','scml_complex:make-rectangular/1',[]],['fun','scm','scml_complex:real-part/1',[]],['fun','scm','scml_context:$scml_exports/0',[]],['fun','scm','scml_context:command-line/0',[]],['fun','scm','scml_context:emergency-exit/0',[]],['fun','scm','scml_context:emergency-exit/1',[]],['fun','scm','scml_context:exit/0',[]],['fun','scm','scml_context:exit/1',[]],['fun','scm','scml_context:get-environment-variable/1',[]],['fun','scm','scml_context:get-environment-variables/0',[]],['fun','scm','scml_cxr:$scml_exports/0',[]],['fun','scm','scml_cxr:caaaar/1',[]],['fun','scm','scml_cxr:caaadr/1',[]],['fun','scm','scml_cxr:caaar/1',[]],['fun','scm','scml_cxr:caadar/1',[]],['fun','scm','scml_cxr:caaddr/1',[]],['fun','scm','scml_cxr:caadr/1',[]],['fun','scm','scml_cxr:cadaar/1',[]],['fun','scm','scml_cxr:cadadr/1',[]],['fun','scm','scml_cxr:cadar/1',[]],['fun','scm','scml_cxr:caddar/1',[]],['fun','scm','scml_cxr:cadddr/1',[]],['fun','scm','scml_cxr:caddr/1',[]],['fun','scm','scml_cxr:cdaaar/1',[]],['fun','scm','scml_cxr:cdaadr/1',[]],['fun','scm','scml_cxr:cdaar/1',[]],['fun','scm','scml_cxr:cdadar/1',[]],['fun','scm','scml_cxr:cdaddr/1',[]],['fun','scm','scml_cxr:cdadr/1',[]],['fun','scm','scml_cxr:cddaar/1',[]],['fun','scm','scml_cxr:cddadr/1',[]],['fun','scm','scml_cxr:cddar/1',[]],['fun','scm','scml_cxr:cdddar/1',[]],['fun','scm','scml_cxr:cddddr/1',[]],['fun','scm','scml_cxr:cdddr/1',[]],['fun','scm','scml_eval:$scml_exports/0',[]],['fun','scm','scml_eval:environment/1',[]],['fun','scm','scml_eval:eval/1',[]],['fun','scm','scml_file:$scml_exports/0',[]],['fun','scm','scml_file:call-with-input-file/1',[]],['fun','scm','scml_file:call-with-output-file/1',[]],['fun','scm','scml_file:delete-file/1',[]],['fun','scm','scml_file:file-exists?/1',[]],['fun','scm','scml_file:open-binary-input-file/1',[]],['fun','scm','scml_file:open-binary-output-file/1',[]],['fun','scm','scml_file:open-input-file/1',[]],['fun','scm','scml_file:open-output-file/1',[]],['fun','scm','scml_file:with-input-from-file/1',[]],['fun','scm','scml_file:with-output-to-file/1',[]],['fun','scm','scml_inexact:$scml_exports/0',[]],['fun','scm','scml_inexact:acos/1',[]],['fun','scm','scml_inexact:asin/1',[]],['fun','scm','scml_inexact:atan/1',[]],['fun','scm','scml_inexact:atan/1',[]],['fun','scm','scml_inexact:cos/1',[]],['fun','scm','scml_inexact:exp/1',[]],['fun','scm','scml_inexact:finite?/1',[]],['fun','scm','scml_inexact:infinite?/1',[]],['fun','scm','scml_inexact:log/1',[]],['fun','scm','scml_inexact:log/1',[]],['fun','scm','scml_inexact:nan?/1',[]],['fun','scm','scml_inexact:sin/1',[]],['fun','scm','scml_inexact:sqrt/1',[]],['fun','scm','scml_inexact:tan/1',[]],['fun','scm','scml_lambda:$scml_exports/0',[]],['fun','scm','scml_lambda:case-lambda/1',[]],['fun','scm','scml_lazy:$scml_exports/0',[]],['fun','scm','scml_lazy:delay-force/1',[]],['fun','scm','scml_lazy:delay/1',[]],['fun','scm','scml_lazy:force/1',[]],['fun','scm','scml_lazy:make-promise/1',[]],['fun','scm','scml_lazy:promise?/1',[]],['fun','scm','scml_load:$scml_exports/0',[]],['fun','scm','scml_load:load/1',[]],['fun','scm','scml_load:load/1',[]],['fun','scm','scml_r5rs:$scml_exports/0',[]],['fun','scm','scml_r5rs:call-with-current-continuation/1',[]],['fun','scm','scml_r5rs:exact->inexact/1',[]],['fun','scm','scml_r5rs:inexact->exact/1',[]],['fun','scm','scml_r5rs:null-environment/1',[]],['fun','scm','scml_r5rs:scheme-report-environment/1',[]],['fun','scm','scml_r5rs:transcript-off/0',[]],['fun','scm','scml_r5rs:transcript-on/1',[]],['fun','scm','scml_read:$scml_exports/0',[]],['fun','scm','scml_read:read/0',[]],['fun','scm','scml_read:read/1',[]],['fun','scm','scml_repl:$scml_exports/0',[]],['fun','scm','scml_repl:interaction-environment/0',[]],['fun','scm','scml_time:$scml_exports/0',[]],['fun','scm','scml_time:current-jiffy/0',[]],['fun','scm','scml_time:current-second/0',[]],['fun','scm','scml_time:jiffies-per-second/0',[]],['fun','scm','scml_write:$scml_exports/0',[]],['fun','scm','scml_write:display/1',[]],['fun','scm','scml_write:display/1',[]],['fun','scm','scml_write:write-shared/1',[]],['fun','scm','scml_write:write-shared/1',[]],['fun','scm','scml_write:write-simple/1',[]],['fun','scm','scml_write:write-simple/1',[]],['fun','scm','scml_write:write/1',[]],['fun','scm','scml_write:write/1',[]],['fun','scm','scmtmp:exact/1','This function is a temporary place holder.'],['fun','scm','scmtmp:inexact/1','This function is a temporary place holder.'],['fun','scm','scmtmp:make-polar/1','This function is a temporary place holder.'],['fun','scm','scmtmp:make-rational/1','This function is a temporary place holder.'],['fun','scm','scmtmp:make-rational/1','This function is a temporary place holder.'],['fun','scm','scmtmp:make-real/1','This function is a temporary place holder.'],['fun','scm','scmtmp:make-rectangular/1','This function is a temporary place holder.'],['fun','scm','xfm_import_as_export:parse_transform/2',[]]];