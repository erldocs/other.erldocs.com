var index = [['app','riak_core','riak_core','[application]'],['mod','riak_core','app_helper',[]],['mod','riak_core','bloom',[]],['mod','riak_core','dvvset','  An Erlang implementation of *compact* Dotted Ve'],['mod','riak_core','gen_nb_server',[]],['mod','riak_core','hashtree_tree','This module implements a specialized hash tree tha'],['mod','riak_core','process_proxy',[]],['mod','riak_core','riak_core',[]],['mod','riak_core','riak_core_apl',[]],['mod','riak_core','riak_core_app',[]],['mod','riak_core','riak_core_bg_manager','  The background manager allows tokens and locks '],['mod','riak_core','riak_core_broadcast',[]],['mod','riak_core','riak_core_broadcast_handler',[]],['mod','riak_core','riak_core_bucket','Functions for manipulating bucket properties.'],['mod','riak_core','riak_core_bucket_props',[]],['mod','riak_core','riak_core_bucket_type','Bucket Types allow groups of buckets to share conf'],['mod','riak_core','riak_core_capability','  This module implements a cluster capability sys'],['mod','riak_core','riak_core_cinfo_core',[]],['mod','riak_core','riak_core_claim','The default functions used for claiming partition '],['mod','riak_core','riak_core_claim_sim','riak_core_claim_sim models adding/removing nodes f'],['mod','riak_core','riak_core_claim_util',[]],['mod','riak_core','riak_core_claimant',[]],['mod','riak_core','riak_core_cli_registry','This module tracks registrations for clique integr'],['mod','riak_core','riak_core_cluster_cli','This module encapsulates the command line interfac'],['mod','riak_core','riak_core_console',[]],['mod','riak_core','riak_core_console_table',[]],['mod','riak_core','riak_core_coverage_fsm','The coverage fsm is a behavior used to create     '],['mod','riak_core','riak_core_coverage_plan','A module to calculate a plan to cover a minimal se'],['mod','riak_core','riak_core_dist_mon',[]],['mod','riak_core','riak_core_dtrace','Erlang-triggerable DTrace probe support.'],['mod','riak_core','riak_core_eventhandler_guard',[]],['mod','riak_core','riak_core_eventhandler_sup','supervise riak_core_eventhandler_guard processes.'],['mod','riak_core','riak_core_exo_monitor','Legacy mapping module folsom metrics to exometer.'],['mod','riak_core','riak_core_format','Functions for formatting data.'],['mod','riak_core','riak_core_gen_server',[]],['mod','riak_core','riak_core_gossip','riak_core_gossip takes care of the mechanics of sh'],['mod','riak_core','riak_core_handoff_cli',[]],['mod','riak_core','riak_core_handoff_listener','entry point for TCP-based handoff.'],['mod','riak_core','riak_core_handoff_listener_sup',[]],['mod','riak_core','riak_core_handoff_manager',[]],['mod','riak_core','riak_core_handoff_receiver','incoming data handler for TCP-based handoff.'],['mod','riak_core','riak_core_handoff_receiver_sup',[]],['mod','riak_core','riak_core_handoff_sender','send a partitions data via TCP-based handoff.'],['mod','riak_core','riak_core_handoff_sender_sup',[]],['mod','riak_core','riak_core_handoff_status',[]],['mod','riak_core','riak_core_handoff_sup',[]],['mod','riak_core','riak_core_metadata',[]],['mod','riak_core','riak_core_metadata_evt_sup',[]],['mod','riak_core','riak_core_metadata_exchange_fsm',[]],['mod','riak_core','riak_core_metadata_hashtree',[]],['mod','riak_core','riak_core_metadata_manager',[]],['mod','riak_core','riak_core_metadata_object',[]],['mod','riak_core','riak_core_mochiglobal','Abuse module constant pools as a "read-only shared'],['mod','riak_core','riak_core_net_ticktime','Change net_kernels ticktime on-the-fly.'],['mod','riak_core','riak_core_new_claim','This module is a pass-thru to riak_core_claim for '],['mod','riak_core','riak_core_node_watcher',[]],['mod','riak_core','riak_core_node_watcher_events',[]],['mod','riak_core','riak_core_nodeid',[]],['mod','riak_core','riak_core_priority_queue',[]],['mod','riak_core','riak_core_pw_auth',[]],['mod','riak_core','riak_core_repair',[]],['mod','riak_core','riak_core_ring','riak_core_ring manages a riak nodes local view of'],['mod','riak_core','riak_core_ring_events',[]],['mod','riak_core','riak_core_ring_handler',[]],['mod','riak_core','riak_core_ring_manager','the local view of the clusters ring configuration'],['mod','riak_core','riak_core_ring_util',[]],['mod','riak_core','riak_core_security',[]],['mod','riak_core','riak_core_send_msg','OTP equivalents for sending reply- and event-like '],['mod','riak_core','riak_core_ssl_util','Various ssl functions for the Riak Core Connection'],['mod','riak_core','riak_core_stat',[]],['mod','riak_core','riak_core_stat_cache',[]],['mod','riak_core','riak_core_stat_calc_proc',[]],['mod','riak_core','riak_core_stat_calc_sup',[]],['mod','riak_core','riak_core_stat_q','riak_core_stat_q is an interface to query folsom s'],['mod','riak_core','riak_core_stat_sup',[]],['mod','riak_core','riak_core_stat_xform',[]],['mod','riak_core','riak_core_stats_sup',[]],['mod','riak_core','riak_core_status',[]],['mod','riak_core','riak_core_sup',[]],['mod','riak_core','riak_core_sysmon_handler','A custom event handler to the riak_sysmon applicat'],['mod','riak_core','riak_core_sysmon_minder',[]],['mod','riak_core','riak_core_tcp_mon',[]],['mod','riak_core','riak_core_test_util','utilities for test scripts.'],['mod','riak_core','riak_core_tracer',[]],['mod','riak_core','riak_core_util','Various functions that are useful throughout Riak.'],['mod','riak_core','riak_core_vnode',[]],['mod','riak_core','riak_core_vnode_manager',[]],['mod','riak_core','riak_core_vnode_master','dispatch to vnodes.'],['mod','riak_core','riak_core_vnode_proxy',[]],['mod','riak_core','riak_core_vnode_proxy_sup',[]],['mod','riak_core','riak_core_vnode_sup','supervise riak_vnode processes.'],['mod','riak_core','riak_core_vnode_worker',[]],['mod','riak_core','riak_core_vnode_worker_pool','This is a wrapper around a poolboy pool, that impl'],['mod','riak_core','vclock','A simple Erlang implementation of vector clocks as'],['fun','riak_core','app_helper:get_env/1','The official way to get a value from this applicat'],['fun','riak_core','app_helper:get_env/1','The official way to get a value from the apps env'],['fun','riak_core','app_helper:get_env/1','Retrieve all Key/Value pairs in the env for the sp'],['fun','riak_core','app_helper:get_prop_or_env/1','Return the value for Key in Properties if it exist'],['fun','riak_core','app_helper:get_prop_or_env/1','Retrieve value for Key from Properties if it exist'],['fun','riak_core','app_helper:try_envs/1',[]],['fun','riak_core','app_helper:try_envs/1','Like get_env but try multiple {App, Key} combos be'],['fun','riak_core','bloom:add/2',[]],['fun','riak_core','bloom:add_element/2',[]],['fun','riak_core','bloom:bloom/1',[]],['fun','riak_core','bloom:bloom/2',[]],['fun','riak_core','bloom:capacity/1',[]],['fun','riak_core','bloom:is_element/2',[]],['fun','riak_core','bloom:member/2',[]],['fun','riak_core','bloom:sbf/1',[]],['fun','riak_core','bloom:sbf/2',[]],['fun','riak_core','bloom:sbf/3',[]],['fun','riak_core','bloom:sbf/4',[]],['fun','riak_core','bloom:size/1',[]],['fun','riak_core','dvvset:equal/1','Compares the equality of both clocks, regarding  '],['fun','riak_core','dvvset:ids/1','Returns all the ids used in this clock set.'],['fun','riak_core','dvvset:join/1','Return a version vector that represents the causal'],['fun','riak_core','dvvset:last/1','Returns the latest value in the clock set,  accor'],['fun','riak_core','dvvset:less/1','Returns True if the first clock is causally older '],['fun','riak_core','dvvset:lww/1','Return a clock with the same causal history, but w'],['fun','riak_core','dvvset:map/1','Maps (applies) a function on all values in this cl'],['fun','riak_core','dvvset:new/1','Constructs a new clock set with the causal history'],['fun','riak_core','dvvset:new/1','Constructs a new clock set without causal history,'],['fun','riak_core','dvvset:reconcile/1','Return a clock with the same causal history, but w'],['fun','riak_core','dvvset:size/1','Returns the total number of values in this clock s'],['fun','riak_core','dvvset:sync/1','Synchronizes a list of clocks using sync/2.'],['fun','riak_core','dvvset:update/1','Advances the causal history of the  first clock w'],['fun','riak_core','dvvset:update/1','Advances the causal history with the given id.'],['fun','riak_core','dvvset:values/1','Returns all the values used in this clock set,  i'],['fun','riak_core','gen_nb_server:start_link/4','Start server listening on IpAddr:Port.'],['fun','riak_core','hashtree_tree:compare/1','Compare a local and remote tree.'],['fun','riak_core','hashtree_tree:destroy/1','Destroys the tree cleaning up any used resources.'],['fun','riak_core','hashtree_tree:get_bucket/1','Returns the hashtree buckets for a given node in t'],['fun','riak_core','hashtree_tree:insert/1','Insert a hash into the tree.'],['fun','riak_core','hashtree_tree:insert/1','an alias for insert(Prefixes, Key, Hash, [], Tree)'],['fun','riak_core','hashtree_tree:key_hashes/1','Returns the hashtree segment hashes for a given no'],['fun','riak_core','hashtree_tree:local_compare/1','Compare two local trees.'],['fun','riak_core','hashtree_tree:new/1','Creates a new hashtree.'],['fun','riak_core','hashtree_tree:prefix_hash/1','Returns the top-hash of the node corresponding to '],['fun','riak_core','hashtree_tree:top_hash/1','Returns the top-hash of the tree.'],['fun','riak_core','hashtree_tree:update_perform/1','Update the tree with a snapshot obtained by update'],['fun','riak_core','hashtree_tree:update_snapshot/1','Snapshot the tree for updating.'],['fun','riak_core','process_proxy:init/1',[]],['fun','riak_core','process_proxy:start_link/2',[]],['fun','riak_core','process_proxy:stop/1',[]],['fun','riak_core','riak_core:add_guarded_event_handler/3',[]],['fun','riak_core','riak_core:add_guarded_event_handler/4','Add a "guarded" event handler to a gen_event insta'],['fun','riak_core','riak_core:bucket_fixups/0',[]],['fun','riak_core','riak_core:bucket_validators/0',[]],['fun','riak_core','riak_core:delete_guarded_event_handler/3','Delete a guarded event handler from a gen_event in'],['fun','riak_core','riak_core:down/1',[]],['fun','riak_core','riak_core:health_check/1',[]],['fun','riak_core','riak_core:join/1','Join the ring found on the specified remote node.'],['fun','riak_core','riak_core:join/4',[]],['fun','riak_core','riak_core:leave/0',[]],['fun','riak_core','riak_core:register/1','Register a riak_core application.'],['fun','riak_core','riak_core:register/2','Register a named riak_core application.'],['fun','riak_core','riak_core:remove/1',[]],['fun','riak_core','riak_core:remove_from_cluster/1','Cause all partitions owned by ExitingNode to be ta'],['fun','riak_core','riak_core:staged_join/1','Join the remote cluster without automatically clai'],['fun','riak_core','riak_core:stat_mods/0',[]],['fun','riak_core','riak_core:stop/0','Stop the riak application and the calling process.'],['fun','riak_core','riak_core:stop/1',[]],['fun','riak_core','riak_core:vnode_modules/0',[]],['fun','riak_core','riak_core:wait_for_application/1',[]],['fun','riak_core','riak_core:wait_for_service/1',[]],['fun','riak_core','riak_core_apl:active_owners/1',[]],['fun','riak_core','riak_core_apl:active_owners/1','Return preflist of all active primary nodes (with '],['fun','riak_core','riak_core_apl:first_up/2','Return the first entry that is up in the preflist '],['fun','riak_core','riak_core_apl:get_apl/1','Get the active preflist taking account of which no'],['fun','riak_core','riak_core_apl:get_apl/1','Get the active preflist taking account of which no'],['fun','riak_core','riak_core_apl:get_apl_ann/1','Get the active preflist for a given {bucket, key} '],['fun','riak_core','riak_core_apl:get_apl_ann/1','Get the active preflist taking account of which no'],['fun','riak_core','riak_core_apl:get_apl_ann/3','Get the active preflist taking account of which no'],['fun','riak_core','riak_core_apl:get_apl_ann_with_pnum/1','Get the active preflist taking account of which no'],['fun','riak_core','riak_core_apl:get_primary_apl/1','Same as get_apl, but returns only the primaries.'],['fun','riak_core','riak_core_apl:get_primary_apl/1','Same as get_apl, but returns only the primaries.'],['fun','riak_core','riak_core_apl:get_primary_apl_chbin/1','Same as get_apl, but returns only the primaries.'],['fun','riak_core','riak_core_apl:offline_owners/1',[]],['fun','riak_core','riak_core_apl:offline_owners/2',[]],['fun','riak_core','riak_core_app:start/2',[]],['fun','riak_core','riak_core_app:stop/1',[]],['fun','riak_core','riak_core_bg_manager:all_locks/0','Returns all locks.'],['fun','riak_core','riak_core_bg_manager:all_locks/1','Returns all locks named Name'],['fun','riak_core','riak_core_bg_manager:all_resources/0','Get a list of all resources of all types in all st'],['fun','riak_core','riak_core_bg_manager:all_resources/1','Get a list of all resources named Resource'],['fun','riak_core','riak_core_bg_manager:all_tokens/0','Returns all tokens.'],['fun','riak_core','riak_core_bg_manager:all_tokens/1','Returns all tokens named Name'],['fun','riak_core','riak_core_bg_manager:bypass/1','Global kill switch - causes all locks/tokens to be'],['fun','riak_core','riak_core_bg_manager:bypassed/0','Return bypass state as boolean.'],['fun','riak_core','riak_core_bg_manager:concurrency_limit/1','Get the current maximum concurrency for the given '],['fun','riak_core','riak_core_bg_manager:concurrency_limit_reached/1','Returns true if the number of held locks is at the'],['fun','riak_core','riak_core_bg_manager:disable/0','Disable handing out of all locks and tokens.'],['fun','riak_core','riak_core_bg_manager:disable/1','Disable handing out resource of the given kind.'],['fun','riak_core','riak_core_bg_manager:disable/1','Disable handing out resource of the given kind.'],['fun','riak_core','riak_core_bg_manager:enable/0','Enable handing out of all locks and tokens.'],['fun','riak_core','riak_core_bg_manager:enable/1','Enable handing out resources of the kind specified'],['fun','riak_core','riak_core_bg_manager:enabled/0','Return global enabled status.'],['fun','riak_core','riak_core_bg_manager:enabled/1',[]],['fun','riak_core','riak_core_bg_manager:get_lock/1','Acquire a concurrency lock, if available,  and ass'],['fun','riak_core','riak_core_bg_manager:get_lock/1','Acquire a concurrency lock, if available, and asso'],['fun','riak_core','riak_core_bg_manager:get_lock/1','Acquire a concurrency lock of the given name, if a'],['fun','riak_core','riak_core_bg_manager:get_token/1',[]],['fun','riak_core','riak_core_bg_manager:get_token/1',[]],['fun','riak_core','riak_core_bg_manager:get_token/1','Get a token without blocking.'],['fun','riak_core','riak_core_bg_manager:lock_count/1','Return the current concurrency count of the given '],['fun','riak_core','riak_core_bg_manager:lock_info/0','Return list of lock types and associated info.'],['fun','riak_core','riak_core_bg_manager:lock_info/1','Return the registration info for the named Lock.'],['fun','riak_core','riak_core_bg_manager:ps/0','List most recent requests/grants for all tokens an'],['fun','riak_core','riak_core_bg_manager:set_concurrency_limit/1','Set a new maximum concurrency for the given lock t'],['fun','riak_core','riak_core_bg_manager:set_concurrency_limit/1','same as set_concurrency_limit(Type, Limit, false)'],['fun','riak_core','riak_core_bg_manager:set_token_rate/1','Set the refill rate of tokens.'],['fun','riak_core','riak_core_bg_manager:start/0',[]],['fun','riak_core','riak_core_bg_manager:start_link/0','Starts the server.'],['fun','riak_core','riak_core_bg_manager:token_info/0','Return list of token kinds and associated info.'],['fun','riak_core','riak_core_bg_manager:token_info/1','Return the registration info for the named Token.'],['fun','riak_core','riak_core_bg_manager:token_rate/1','Get the current refill rate of named token.'],['fun','riak_core','riak_core_bg_manager:use_bg_mgr/0','Return true iff the riak_core "use background mana'],['fun','riak_core','riak_core_bg_manager:use_bg_mgr/1','Return true iff both the global configuration swit'],['fun','riak_core','riak_core_broadcast:broadcast/1','Broadcasts a message originating from this node.'],['fun','riak_core','riak_core_broadcast:broadcast_members/0','Returns the broadcast servers view of full cluster'],['fun','riak_core','riak_core_broadcast:broadcast_members/1','Returns the broadcast servers view of full cluster'],['fun','riak_core','riak_core_broadcast:cancel_exchanges/2','cancel exchanges started by this node.'],['fun','riak_core','riak_core_broadcast:debug_get_peers/1','return the peers for Node for the tree rooted at R'],['fun','riak_core','riak_core_broadcast:debug_get_peers/1','return the peers for Node for the tree rooted at R'],['fun','riak_core','riak_core_broadcast:debug_get_tree/1','return peers for all Nodes for tree rooted at Root'],['fun','riak_core','riak_core_broadcast:exchanges/0','return a list of exchanges, started by broadcast o'],['fun','riak_core','riak_core_broadcast:exchanges/1','returns a list of exchanges, started by broadcast '],['fun','riak_core','riak_core_broadcast:ring_update/1','Notifies broadcast server of membership update giv'],['fun','riak_core','riak_core_broadcast:start_link/0','Starts the broadcast server on this node.'],['fun','riak_core','riak_core_broadcast:start_link/1','Starts the broadcast server on this node.'],['fun','riak_core','riak_core_bucket:all_n/1',[]],['fun','riak_core','riak_core_bucket:append_bucket_defaults/1','Add a list of defaults to global list of defaults '],['fun','riak_core','riak_core_bucket:bucket_nval_map/1','returns a proplist containing all buckets and thei'],['fun','riak_core','riak_core_bucket:default_object_nval/0','returns the default n value for buckets that have '],['fun','riak_core','riak_core_bucket:get_bucket/1','Return the complete current list of properties for'],['fun','riak_core','riak_core_bucket:get_buckets/1','Get bucket properties Props for all the buckets in'],['fun','riak_core','riak_core_bucket:merge_props/1','Merge two sets of bucket props.'],['fun','riak_core','riak_core_bucket:n_val/1',[]],['fun','riak_core','riak_core_bucket:name/1',[]],['fun','riak_core','riak_core_bucket:reset_bucket/1','Reset the bucket properties for Bucket to the sett'],['fun','riak_core','riak_core_bucket:set_bucket/1','Set the given BucketProps in Bucket or {BucketType'],['fun','riak_core','riak_core_bucket_props:append_defaults/1',[]],['fun','riak_core','riak_core_bucket_props:defaults/0',[]],['fun','riak_core','riak_core_bucket_props:merge/1',[]],['fun','riak_core','riak_core_bucket_props:resolve/1',[]],['fun','riak_core','riak_core_bucket_props:validate/2',[]],['fun','riak_core','riak_core_bucket_type:activate/1','Activate the type.'],['fun','riak_core','riak_core_bucket_type:create/1','Create the type.'],['fun','riak_core','riak_core_bucket_type:defaults/0','The hardcoded defaults for all bucket types.'],['fun','riak_core','riak_core_bucket_type:defaults/1','The hardcoded defaults for the legacy, default buc'],['fun','riak_core','riak_core_bucket_type:get/1','Return the properties associated with the given bu'],['fun','riak_core','riak_core_bucket_type:iterator/0','Return an iterator that can be used to walk throug'],['fun','riak_core','riak_core_bucket_type:itr_close/1',[]],['fun','riak_core','riak_core_bucket_type:itr_done/1','Returns true if there are no more bucket types to '],['fun','riak_core','riak_core_bucket_type:itr_next/1','Advance the iterator to the next bucket type.'],['fun','riak_core','riak_core_bucket_type:itr_value/1','Returns the type and properties that the iterator '],['fun','riak_core','riak_core_bucket_type:property_hash/1',[]],['fun','riak_core','riak_core_bucket_type:property_hash/1','Returns a hash of a specified set of bucket type p'],['fun','riak_core','riak_core_bucket_type:reset/1','Reset the properties of the bucket.'],['fun','riak_core','riak_core_bucket_type:status/1','Returns the state the type is in.'],['fun','riak_core','riak_core_bucket_type:update/1','Update an existing bucket type.'],['fun','riak_core','riak_core_capability:all/0','Return a list of all negotiated capabilities.'],['fun','riak_core','riak_core_capability:code_change/3',[]],['fun','riak_core','riak_core_capability:get/1','Query the current negotiated mode for a given capa'],['fun','riak_core','riak_core_capability:get/2','Query the current negotiated mode for a given capa'],['fun','riak_core','riak_core_capability:handle_call/3',[]],['fun','riak_core','riak_core_capability:handle_cast/2',[]],['fun','riak_core','riak_core_capability:handle_info/2',[]],['fun','riak_core','riak_core_capability:init/1',[]],['fun','riak_core','riak_core_capability:make_capability/1','  Make a capbility from a capability atom, a list'],['fun','riak_core','riak_core_capability:preferred_modes/1','  Given my nodes capabilities, my nodes registe'],['fun','riak_core','riak_core_capability:register/3','Register a new capability providing a list of supp'],['fun','riak_core','riak_core_capability:register/4','Register a new capability providing a list of supp'],['fun','riak_core','riak_core_capability:start_link/0',[]],['fun','riak_core','riak_core_capability:terminate/2',[]],['fun','riak_core','riak_core_capability:update_ring/1','Add the local nodes supported capabilities to the'],['fun','riak_core','riak_core_cinfo_core:cluster_info_generator_funs/0','Required callback function for cluster_info: retur'],['fun','riak_core','riak_core_cinfo_core:cluster_info_init/0','Required callback function for cluster_info: initi'],['fun','riak_core','riak_core_claim:choose_claim_v1/1',[]],['fun','riak_core','riak_core_claim:choose_claim_v1/2',[]],['fun','riak_core','riak_core_claim:choose_claim_v1/3',[]],['fun','riak_core','riak_core_claim:choose_claim_v2/1',[]],['fun','riak_core','riak_core_claim:choose_claim_v2/2',[]],['fun','riak_core','riak_core_claim:choose_claim_v2/3',[]],['fun','riak_core','riak_core_claim:choose_claim_v3/1',[]],['fun','riak_core','riak_core_claim:choose_claim_v3/2',[]],['fun','riak_core','riak_core_claim:choose_claim_v3/3',[]],['fun','riak_core','riak_core_claim:claim/1',[]],['fun','riak_core','riak_core_claim:claim/3',[]],['fun','riak_core','riak_core_claim:claim_diagonal/3',[]],['fun','riak_core','riak_core_claim:claim_diversify/3',[]],['fun','riak_core','riak_core_claim:claim_rebalance_n/2',[]],['fun','riak_core','riak_core_claim:claim_until_balanced/2',[]],['fun','riak_core','riak_core_claim:claim_until_balanced/4',[]],['fun','riak_core','riak_core_claim:default_choose_claim/1','Choose a partition at random.'],['fun','riak_core','riak_core_claim:default_choose_claim/2',[]],['fun','riak_core','riak_core_claim:default_choose_claim/3',[]],['fun','riak_core','riak_core_claim:default_wants_claim/1','Want a partition if we currently have less than fl'],['fun','riak_core','riak_core_claim:default_wants_claim/2',[]],['fun','riak_core','riak_core_claim:diagonal_stripe/2',[]],['fun','riak_core','riak_core_claim:meets_target_n/2',[]],['fun','riak_core','riak_core_claim:never_wants_claim/1','For use by nodes that should not claim any partiti'],['fun','riak_core','riak_core_claim:never_wants_claim/2',[]],['fun','riak_core','riak_core_claim:random_choose_claim/1',[]],['fun','riak_core','riak_core_claim:random_choose_claim/2',[]],['fun','riak_core','riak_core_claim:random_choose_claim/3',[]],['fun','riak_core','riak_core_claim:wants/1',[]],['fun','riak_core','riak_core_claim:wants_claim_v1/1',[]],['fun','riak_core','riak_core_claim:wants_claim_v1/2',[]],['fun','riak_core','riak_core_claim:wants_claim_v2/1',[]],['fun','riak_core','riak_core_claim:wants_claim_v2/2',[]],['fun','riak_core','riak_core_claim:wants_claim_v3/1',[]],['fun','riak_core','riak_core_claim:wants_claim_v3/2',[]],['fun','riak_core','riak_core_claim:wants_owns_diff/2',[]],['fun','riak_core','riak_core_claim_util:adjacency_list/1',[]],['fun','riak_core','riak_core_claim_util:adjacency_matrix/1',[]],['fun','riak_core','riak_core_claim_util:adjacency_matrix_from_al/1',[]],['fun','riak_core','riak_core_claim_util:balance_stats/1',[]],['fun','riak_core','riak_core_claim_util:construct/3',[]],['fun','riak_core','riak_core_claim_util:count/2',[]],['fun','riak_core','riak_core_claim_util:diversity_stats/2',[]],['fun','riak_core','riak_core_claim_util:down_combos/2',[]],['fun','riak_core','riak_core_claim_util:fac/1',[]],['fun','riak_core','riak_core_claim_util:failure_analysis/3',[]],['fun','riak_core','riak_core_claim_util:fixup_dam/2',[]],['fun','riak_core','riak_core_claim_util:gen_complete_diverse/1',[]],['fun','riak_core','riak_core_claim_util:gen_complete_len/1',[]],['fun','riak_core','riak_core_claim_util:make_ring/1',[]],['fun','riak_core','riak_core_claim_util:node_load/3',[]],['fun','riak_core','riak_core_claim_util:node_sensitivity/3',[]],['fun','riak_core','riak_core_claim_util:num_combs/2',[]],['fun','riak_core','riak_core_claim_util:num_perms/2',[]],['fun','riak_core','riak_core_claim_util:perm_gen/1',[]],['fun','riak_core','riak_core_claim_util:print_analysis/1',[]],['fun','riak_core','riak_core_claim_util:print_analysis/2',[]],['fun','riak_core','riak_core_claim_util:print_failure_analysis/3',[]],['fun','riak_core','riak_core_claim_util:ring_stats/2',[]],['fun','riak_core','riak_core_claim_util:rms/1',[]],['fun','riak_core','riak_core_claim_util:rotations/1',[]],['fun','riak_core','riak_core_claim_util:score_am/2',[]],['fun','riak_core','riak_core_claim_util:sort_by_down_fbmax/1',[]],['fun','riak_core','riak_core_claim_util:substitutions/2',[]],['fun','riak_core','riak_core_claim_util:summarize_am/1',[]],['fun','riak_core','riak_core_claim_util:violation_stats/2',[]],['fun','riak_core','riak_core_claimant:abort_resize/0',[]],['fun','riak_core','riak_core_claimant:activate_bucket_type/1',[]],['fun','riak_core','riak_core_claimant:bucket_type_iterator/0',[]],['fun','riak_core','riak_core_claimant:bucket_type_status/1',[]],['fun','riak_core','riak_core_claimant:clear/0','Clear the current set of staged transfers.'],['fun','riak_core','riak_core_claimant:code_change/3',[]],['fun','riak_core','riak_core_claimant:commit/0','Commit the set of staged cluster changes, returnin'],['fun','riak_core','riak_core_claimant:create_bucket_type/1',[]],['fun','riak_core','riak_core_claimant:force_replace/2','Stage a request for Node to be forcefully replaced'],['fun','riak_core','riak_core_claimant:get_bucket_type/1','Lookup the properties for BucketType.'],['fun','riak_core','riak_core_claimant:get_bucket_type/1','Lookup the properties for BucketType.'],['fun','riak_core','riak_core_claimant:handle_call/3',[]],['fun','riak_core','riak_core_claimant:handle_cast/2',[]],['fun','riak_core','riak_core_claimant:handle_info/2',[]],['fun','riak_core','riak_core_claimant:init/1',[]],['fun','riak_core','riak_core_claimant:leave_member/1','Stage a request for Node to leave the cluster.'],['fun','riak_core','riak_core_claimant:plan/0','Determine how the cluster will be affected by the '],['fun','riak_core','riak_core_claimant:reassign_indices/1',[]],['fun','riak_core','riak_core_claimant:remove_member/1','Stage a request for Node to be forcefully removed '],['fun','riak_core','riak_core_claimant:replace/2','Stage a request for Node to be replaced by NewNode'],['fun','riak_core','riak_core_claimant:resize_ring/1','Stage a request to resize the ring.'],['fun','riak_core','riak_core_claimant:ring_changed/2','This function is called as part of the ring reconc'],['fun','riak_core','riak_core_claimant:start_link/0','Spawn and register the riak_core_claimant server.'],['fun','riak_core','riak_core_claimant:terminate/2',[]],['fun','riak_core','riak_core_claimant:update_bucket_type/1',[]],['fun','riak_core','riak_core_cli_registry:load_schema/0',[]],['fun','riak_core','riak_core_cli_registry:register_cli/0',[]],['fun','riak_core','riak_core_cli_registry:register_node_finder/0',[]],['fun','riak_core','riak_core_cluster_cli:partition/3',[]],['fun','riak_core','riak_core_cluster_cli:partition_count/3',[]],['fun','riak_core','riak_core_cluster_cli:partitions/3',[]],['fun','riak_core','riak_core_cluster_cli:register_cli/0',[]],['fun','riak_core','riak_core_cluster_cli:status/3',[]],['fun','riak_core','riak_core_console:add_group/1',[]],['fun','riak_core','riak_core_console:add_source/1',[]],['fun','riak_core','riak_core_console:add_user/1',[]],['fun','riak_core','riak_core_console:alter_group/1',[]],['fun','riak_core','riak_core_console:alter_user/1',[]],['fun','riak_core','riak_core_console:ciphers/1',[]],['fun','riak_core','riak_core_console:clear_staged/1',[]],['fun','riak_core','riak_core_console:command/1',[]],['fun','riak_core','riak_core_console:commit_staged/1',[]],['fun','riak_core','riak_core_console:del_group/1',[]],['fun','riak_core','riak_core_console:del_source/1',[]],['fun','riak_core','riak_core_console:del_user/1',[]],['fun','riak_core','riak_core_console:grant/1',[]],['fun','riak_core','riak_core_console:member_status/1',[]],['fun','riak_core','riak_core_console:pending_claim_percentage/2','Return for a given ring and node, percentage curre'],['fun','riak_core','riak_core_console:print_grants/1',[]],['fun','riak_core','riak_core_console:print_group/1',[]],['fun','riak_core','riak_core_console:print_groups/1',[]],['fun','riak_core','riak_core_console:print_member_status/1',[]],['fun','riak_core','riak_core_console:print_sources/1',[]],['fun','riak_core','riak_core_console:print_staged/1',[]],['fun','riak_core','riak_core_console:print_user/1',[]],['fun','riak_core','riak_core_console:print_users/1',[]],['fun','riak_core','riak_core_console:revoke/1',[]],['fun','riak_core','riak_core_console:ring_status/1',[]],['fun','riak_core','riak_core_console:security_disable/1',[]],['fun','riak_core','riak_core_console:security_enable/1',[]],['fun','riak_core','riak_core_console:security_status/1',[]],['fun','riak_core','riak_core_console:stage_force_replace/1',[]],['fun','riak_core','riak_core_console:stage_leave/1',[]],['fun','riak_core','riak_core_console:stage_remove/1',[]],['fun','riak_core','riak_core_console:stage_replace/1',[]],['fun','riak_core','riak_core_console:stage_resize_ring/1',[]],['fun','riak_core','riak_core_console:stat_disable/1',[]],['fun','riak_core','riak_core_console:stat_enable/1',[]],['fun','riak_core','riak_core_console:stat_info/1',[]],['fun','riak_core','riak_core_console:stat_reset/1',[]],['fun','riak_core','riak_core_console:stat_show/1',[]],['fun','riak_core','riak_core_console:transfer_limit/1',[]],['fun','riak_core','riak_core_console:transfers/1',[]],['fun','riak_core','riak_core_console_table:create_table/1',[]],['fun','riak_core','riak_core_console_table:print/1',[]],['fun','riak_core','riak_core_console_table:print/1',[]],['fun','riak_core','riak_core_coverage_fsm:behaviour_info/1',[]],['fun','riak_core','riak_core_coverage_fsm:start_link/1','Start a riak_core_coverage_fsm.'],['fun','riak_core','riak_core_coverage_plan:create_plan/2','Create a coverage plan to distribute work to a set'],['fun','riak_core','riak_core_dist_mon:code_change/3',[]],['fun','riak_core','riak_core_dist_mon:get_riak_env_vars/0',[]],['fun','riak_core','riak_core_dist_mon:handle_call/3',[]],['fun','riak_core','riak_core_dist_mon:handle_cast/2',[]],['fun','riak_core','riak_core_dist_mon:handle_info/2',[]],['fun','riak_core','riak_core_dist_mon:init/1',[]],['fun','riak_core','riak_core_dist_mon:set_dist_buf_sizes/2',[]],['fun','riak_core','riak_core_dist_mon:start_link/0',[]],['fun','riak_core','riak_core_dist_mon:terminate/2',[]],['fun','riak_core','riak_core_dtrace:dtrace/1',[]],['fun','riak_core','riak_core_dtrace:dtrace/3',[]],['fun','riak_core','riak_core_dtrace:dtrace/4',[]],['fun','riak_core','riak_core_dtrace:dtrace/6',[]],['fun','riak_core','riak_core_dtrace:enabled/0',[]],['fun','riak_core','riak_core_dtrace:put_tag/1',[]],['fun','riak_core','riak_core_dtrace:timeit0/1',[]],['fun','riak_core','riak_core_dtrace:timeit_best/1',[]],['fun','riak_core','riak_core_dtrace:timeit_mg/1',[]],['fun','riak_core','riak_core_eventhandler_guard:code_change/3',[]],['fun','riak_core','riak_core_eventhandler_guard:handle_call/3',[]],['fun','riak_core','riak_core_eventhandler_guard:handle_cast/2',[]],['fun','riak_core','riak_core_eventhandler_guard:handle_info/2',[]],['fun','riak_core','riak_core_eventhandler_guard:init/1',[]],['fun','riak_core','riak_core_eventhandler_guard:start_link/3',[]],['fun','riak_core','riak_core_eventhandler_guard:start_link/4',[]],['fun','riak_core','riak_core_eventhandler_guard:terminate/2',[]],['fun','riak_core','riak_core_eventhandler_sup:start_guarded_handler/3',[]],['fun','riak_core','riak_core_eventhandler_sup:start_guarded_handler/4',[]],['fun','riak_core','riak_core_eventhandler_sup:start_link/0',[]],['fun','riak_core','riak_core_eventhandler_sup:stop_guarded_handler/3',[]],['fun','riak_core','riak_core_exo_monitor:behaviour/0',[]],['fun','riak_core','riak_core_exo_monitor:copy_folsom/3',[]],['fun','riak_core','riak_core_exo_monitor:delete/3',[]],['fun','riak_core','riak_core_exo_monitor:get_datapoints/3',[]],['fun','riak_core','riak_core_exo_monitor:get_value/4',[]],['fun','riak_core','riak_core_exo_monitor:new/3',[]],['fun','riak_core','riak_core_exo_monitor:reset/3',[]],['fun','riak_core','riak_core_exo_monitor:sample/3',[]],['fun','riak_core','riak_core_exo_monitor:setopts/3',[]],['fun','riak_core','riak_core_exo_monitor:update/4',[]],['fun','riak_core','riak_core_format:epoch_to_datetime/1','Convert a folsom_utils:now_epoch() to a universal '],['fun','riak_core','riak_core_format:fmt/1','Created a string Str based on the format string Fm'],['fun','riak_core','riak_core_format:human_size_fmt/1','Create a human friendly string Str for number of b'],['fun','riak_core','riak_core_format:human_time_fmt/1','Create a human friendly string Str for the given t'],['fun','riak_core','riak_core_gen_server:abcast/2',[]],['fun','riak_core','riak_core_gen_server:abcast/3',[]],['fun','riak_core','riak_core_gen_server:call/2',[]],['fun','riak_core','riak_core_gen_server:call/3',[]],['fun','riak_core','riak_core_gen_server:cast/2',[]],['fun','riak_core','riak_core_gen_server:enter_loop/3',[]],['fun','riak_core','riak_core_gen_server:enter_loop/4',[]],['fun','riak_core','riak_core_gen_server:enter_loop/5',[]],['fun','riak_core','riak_core_gen_server:format_status/2',[]],['fun','riak_core','riak_core_gen_server:init_it/6',[]],['fun','riak_core','riak_core_gen_server:multi_call/2',[]],['fun','riak_core','riak_core_gen_server:multi_call/3',[]],['fun','riak_core','riak_core_gen_server:multi_call/4',[]],['fun','riak_core','riak_core_gen_server:pcall/3',[]],['fun','riak_core','riak_core_gen_server:pcall/4',[]],['fun','riak_core','riak_core_gen_server:pcast/3',[]],['fun','riak_core','riak_core_gen_server:print_event/3',[]],['fun','riak_core','riak_core_gen_server:reply/2',[]],['fun','riak_core','riak_core_gen_server:start/3',[]],['fun','riak_core','riak_core_gen_server:start/4',[]],['fun','riak_core','riak_core_gen_server:start_link/3',[]],['fun','riak_core','riak_core_gen_server:start_link/4',[]],['fun','riak_core','riak_core_gen_server:system_code_change/4',[]],['fun','riak_core','riak_core_gen_server:system_continue/3',[]],['fun','riak_core','riak_core_gen_server:system_terminate/1',[]],['fun','riak_core','riak_core_gen_server:wake_hib/7',[]],['fun','riak_core','riak_core_gossip:distribute_ring/1',[]],['fun','riak_core','riak_core_gossip:gossip_version/0',[]],['fun','riak_core','riak_core_gossip:handle_call/3',[]],['fun','riak_core','riak_core_gossip:handle_info/2',[]],['fun','riak_core','riak_core_gossip:random_gossip/1','Gossip state to a random node in the ring.'],['fun','riak_core','riak_core_gossip:random_recursive_gossip/1',[]],['fun','riak_core','riak_core_gossip:recursive_gossip/1',[]],['fun','riak_core','riak_core_gossip:rejoin/2',[]],['fun','riak_core','riak_core_gossip:remove_from_cluster/2',[]],['fun','riak_core','riak_core_gossip:remove_from_cluster/3',[]],['fun','riak_core','riak_core_gossip:send_ring/1',[]],['fun','riak_core','riak_core_gossip:send_ring/2',[]],['fun','riak_core','riak_core_gossip:start_link/0',[]],['fun','riak_core','riak_core_gossip:stop/0',[]],['fun','riak_core','riak_core_handoff_cli:register_cli/0',[]],['fun','riak_core','riak_core_handoff_listener:code_change/3',[]],['fun','riak_core','riak_core_handoff_listener:get_handoff_ip/0',[]],['fun','riak_core','riak_core_handoff_listener:handle_call/3',[]],['fun','riak_core','riak_core_handoff_listener:handle_cast/2',[]],['fun','riak_core','riak_core_handoff_listener:handle_info/2',[]],['fun','riak_core','riak_core_handoff_listener:init/1',[]],['fun','riak_core','riak_core_handoff_listener:new_connection/2',[]],['fun','riak_core','riak_core_handoff_listener:sock_opts/0',[]],['fun','riak_core','riak_core_handoff_listener:start_link/0',[]],['fun','riak_core','riak_core_handoff_listener:terminate/2',[]],['fun','riak_core','riak_core_handoff_listener_sup:start_link/0',[]],['fun','riak_core','riak_core_handoff_manager:add_exclusion/2',[]],['fun','riak_core','riak_core_handoff_manager:add_inbound/1',[]],['fun','riak_core','riak_core_handoff_manager:add_outbound/6',[]],['fun','riak_core','riak_core_handoff_manager:add_outbound/7',[]],['fun','riak_core','riak_core_handoff_manager:code_change/3',[]],['fun','riak_core','riak_core_handoff_manager:get_concurrency/0',[]],['fun','riak_core','riak_core_handoff_manager:get_exclusions/1',[]],['fun','riak_core','riak_core_handoff_manager:handle_call/3',[]],['fun','riak_core','riak_core_handoff_manager:handle_cast/2',[]],['fun','riak_core','riak_core_handoff_manager:handle_info/2',[]],['fun','riak_core','riak_core_handoff_manager:handoff_change_enabled_setting/2',[]],['fun','riak_core','riak_core_handoff_manager:init/1',[]],['fun','riak_core','riak_core_handoff_manager:kill_handoffs/0',[]],['fun','riak_core','riak_core_handoff_manager:kill_handoffs_in_direction/1',[]],['fun','riak_core','riak_core_handoff_manager:kill_xfer/1','Kill the transfer of ModSrcTarget with Reason.'],['fun','riak_core','riak_core_handoff_manager:remove_exclusion/2',[]],['fun','riak_core','riak_core_handoff_manager:set_concurrency/1',[]],['fun','riak_core','riak_core_handoff_manager:set_recv_data/1','Associate Data with the inbound handoff Recv.'],['fun','riak_core','riak_core_handoff_manager:start_link/0',[]],['fun','riak_core','riak_core_handoff_manager:status/0',[]],['fun','riak_core','riak_core_handoff_manager:status/1',[]],['fun','riak_core','riak_core_handoff_manager:status_update/1','Send status updates Stats to the handoff manager f'],['fun','riak_core','riak_core_handoff_manager:terminate/2',[]],['fun','riak_core','riak_core_handoff_manager:xfer/1','Initiate a transfer from SrcPartition to TargetPar'],['fun','riak_core','riak_core_handoff_receiver:code_change/3',[]],['fun','riak_core','riak_core_handoff_receiver:handle_call/3',[]],['fun','riak_core','riak_core_handoff_receiver:handle_cast/2',[]],['fun','riak_core','riak_core_handoff_receiver:handle_info/2',[]],['fun','riak_core','riak_core_handoff_receiver:init/1',[]],['fun','riak_core','riak_core_handoff_receiver:set_socket/2',[]],['fun','riak_core','riak_core_handoff_receiver:start_link/0',[]],['fun','riak_core','riak_core_handoff_receiver:start_link/1',[]],['fun','riak_core','riak_core_handoff_receiver:supports_batching/0',[]],['fun','riak_core','riak_core_handoff_receiver:terminate/2',[]],['fun','riak_core','riak_core_handoff_receiver_sup:start_link/0',[]],['fun','riak_core','riak_core_handoff_receiver_sup:start_receiver/1',[]],['fun','riak_core','riak_core_handoff_sender:get_handoff_ssl_options/0',[]],['fun','riak_core','riak_core_handoff_sender:start_link/4',[]],['fun','riak_core','riak_core_handoff_sender_sup:start_link/0',[]],['fun','riak_core','riak_core_handoff_sender_sup:start_sender/1','Start the handoff process for the module (Module),'],['fun','riak_core','riak_core_handoff_status:collect_node_transfer_data/0',[]],['fun','riak_core','riak_core_handoff_status:handoff_details/1',[]],['fun','riak_core','riak_core_handoff_status:handoff_summary/1',[]],['fun','riak_core','riak_core_handoff_sup:start_link/0',[]],['fun','riak_core','riak_core_metadata:delete/1','Removes the value associated with the given prefix'],['fun','riak_core','riak_core_metadata:delete/1','same as delete(FullPrefix, Key, []).'],['fun','riak_core','riak_core_metadata:fold/1','Fold over all keys and values stored under a given'],['fun','riak_core','riak_core_metadata:fold/1','same as fold(Fun, Acc0, FullPrefix, []).'],['fun','riak_core','riak_core_metadata:get/1','Retrieves the local value stored at the given pref'],['fun','riak_core','riak_core_metadata:get/1','same as get(FullPrefix, Key, []).'],['fun','riak_core','riak_core_metadata:iterator/1','Return an iterator pointing to the first key store'],['fun','riak_core','riak_core_metadata:iterator/1','same as iterator(FullPrefix, []).'],['fun','riak_core','riak_core_metadata:itr_close/1','Closes the iterator.'],['fun','riak_core','riak_core_metadata:itr_default/1','Returns the value returned when an iterator points'],['fun','riak_core','riak_core_metadata:itr_done/1','Returns true if there is nothing more to iterate o'],['fun','riak_core','riak_core_metadata:itr_key/1','Return the key pointed at by the iterator.'],['fun','riak_core','riak_core_metadata:itr_key_values/1','Return the key and value(s) pointed at by the iter'],['fun','riak_core','riak_core_metadata:itr_next/1','Advances the iterator.'],['fun','riak_core','riak_core_metadata:itr_value/1','Return a single value pointed at by the iterator.'],['fun','riak_core','riak_core_metadata:itr_values/1','Return all sibling values pointed at by the iterat'],['fun','riak_core','riak_core_metadata:prefix_hash/1','Return the local hash associated with a full-prefi'],['fun','riak_core','riak_core_metadata:put/1','Stores or updates the value at the given prefix an'],['fun','riak_core','riak_core_metadata:put/1','same as put(FullPrefix, Key, Value, []).'],['fun','riak_core','riak_core_metadata:to_list/1','Return a list of all keys and values stored under '],['fun','riak_core','riak_core_metadata:to_list/1','same as to_list(FullPrefix, []).'],['fun','riak_core','riak_core_metadata_evt_sup:init/1',[]],['fun','riak_core','riak_core_metadata_evt_sup:is_type_compiled/1',[]],['fun','riak_core','riak_core_metadata_evt_sup:start_link/0',[]],['fun','riak_core','riak_core_metadata_evt_sup:swap_notification_handler/3',[]],['fun','riak_core','riak_core_metadata_evt_sup:sync_notify/2',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:code_change/4',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:exchange/2',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:exchange/3',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:handle_event/3',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:handle_info/3',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:handle_sync_event/4',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:init/1',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:prepare/2',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:prepare/3',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:start/1','Start an exchange of Cluster Metadata hashtrees be'],['fun','riak_core','riak_core_metadata_exchange_fsm:terminate/3',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:update/2',[]],['fun','riak_core','riak_core_metadata_exchange_fsm:update/3',[]],['fun','riak_core','riak_core_metadata_hashtree:code_change/3',[]],['fun','riak_core','riak_core_metadata_hashtree:compare/1','Compare the local tree managed by this process wit'],['fun','riak_core','riak_core_metadata_hashtree:get_bucket/1','Return the bucket for a node in the tree managed b'],['fun','riak_core','riak_core_metadata_hashtree:handle_call/3',[]],['fun','riak_core','riak_core_metadata_hashtree:handle_cast/2',[]],['fun','riak_core','riak_core_metadata_hashtree:handle_info/2',[]],['fun','riak_core','riak_core_metadata_hashtree:init/1',[]],['fun','riak_core','riak_core_metadata_hashtree:insert/1','Insert a hash for a full-prefix and key into the t'],['fun','riak_core','riak_core_metadata_hashtree:insert/1','Same as insert(PKey, Hash, false).'],['fun','riak_core','riak_core_metadata_hashtree:key_hashes/1','Return the key hashes for a node in the tree manag'],['fun','riak_core','riak_core_metadata_hashtree:lock/0','Locks the tree on this node for updating on behalf'],['fun','riak_core','riak_core_metadata_hashtree:lock/1','Lock the tree for updating.'],['fun','riak_core','riak_core_metadata_hashtree:lock/1','Locks the tree on Node for updating on behalf of t'],['fun','riak_core','riak_core_metadata_hashtree:prefix_hash/1','Return the hash for the given prefix or full-prefi'],['fun','riak_core','riak_core_metadata_hashtree:start_link/0','Starts the process using start_link/1, passing in '],['fun','riak_core','riak_core_metadata_hashtree:start_link/1','Starts a registered process that manages a hashtre'],['fun','riak_core','riak_core_metadata_hashtree:terminate/2',[]],['fun','riak_core','riak_core_metadata_hashtree:update/0','Updates the tree on this node.'],['fun','riak_core','riak_core_metadata_hashtree:update/1','Updates the tree on Node.'],['fun','riak_core','riak_core_metadata_manager:broadcast_data/1','Deconstructs are broadcast that is sent using riak'],['fun','riak_core','riak_core_metadata_manager:exchange/1','Trigger an exchange.'],['fun','riak_core','riak_core_metadata_manager:get/1','Same as get/1 but reads the value from Node'],['fun','riak_core','riak_core_metadata_manager:get/1','Reads the value for a prefixed key.'],['fun','riak_core','riak_core_metadata_manager:graft/1','returns the object associated with the given key a'],['fun','riak_core','riak_core_metadata_manager:is_stale/1','Returns false if the update (or a causally newer u'],['fun','riak_core','riak_core_metadata_manager:iterate/1','advance the iterator by one key, full-prefix or su'],['fun','riak_core','riak_core_metadata_manager:iterator/0','Returns a full-prefix iterator: an iterator for al'],['fun','riak_core','riak_core_metadata_manager:iterator/1','Return an iterator for keys stored under a prefix.'],['fun','riak_core','riak_core_metadata_manager:iterator/1','Returns a sub-prefix iterator for a given prefix.'],['fun','riak_core','riak_core_metadata_manager:iterator_close/1','Closes the iterator.'],['fun','riak_core','riak_core_metadata_manager:iterator_done/1','returns true if there are no more keys or prefixes'],['fun','riak_core','riak_core_metadata_manager:iterator_prefix/1','return the full-prefix or prefix being iterated by'],['fun','riak_core','riak_core_metadata_manager:iterator_value/1','return the key and object or the prefix pointed to'],['fun','riak_core','riak_core_metadata_manager:merge/1','Merges a remote copy of a metadata record sent via'],['fun','riak_core','riak_core_metadata_manager:merge/1','same as merge/2 but merges the object on Node'],['fun','riak_core','riak_core_metadata_manager:put/1','Sets the value of a prefixed key.'],['fun','riak_core','riak_core_metadata_manager:remote_iterator/1','Create an iterator on Node.'],['fun','riak_core','riak_core_metadata_manager:remote_iterator/1','Create an iterator on Node.'],['fun','riak_core','riak_core_metadata_manager:start_link/0','Same as start_link([]).'],['fun','riak_core','riak_core_metadata_manager:start_link/1','Start riak_core_metadadata_manager and link to cal'],['fun','riak_core','riak_core_metadata_manager:swap_notification_handler/3','Add a listener to metadata events for types of the'],['fun','riak_core','riak_core_metadata_object:context/1','returns the context (opaque causal history) for th'],['fun','riak_core','riak_core_metadata_object:empty_context/0','returns the representation for an empty context (o'],['fun','riak_core','riak_core_metadata_object:equal_context/1','Returns true if the given context and the context '],['fun','riak_core','riak_core_metadata_object:hash/1','returns a hash representing the metadata objects c'],['fun','riak_core','riak_core_metadata_object:is_stale/1','Determines if the given context (version vector) i'],['fun','riak_core','riak_core_metadata_object:modify/1','modifies a potentially existing object, setting it'],['fun','riak_core','riak_core_metadata_object:reconcile/1','Reconciles a remote object received during replica'],['fun','riak_core','riak_core_metadata_object:resolve/1','Resolves siblings using either last-write-wins or '],['fun','riak_core','riak_core_metadata_object:value/1','returns a single value.'],['fun','riak_core','riak_core_metadata_object:value_count/1','returns the number of siblings in the given object'],['fun','riak_core','riak_core_metadata_object:values/1','returns a list of values held in the object.'],['fun','riak_core','riak_core_mochiglobal:delete/1','Delete term stored at K, no-op if non-existent.'],['fun','riak_core','riak_core_mochiglobal:get/1','Get the term for K or return Default.'],['fun','riak_core','riak_core_mochiglobal:get/1','Equivalent to get(K, undefined).'],['fun','riak_core','riak_core_mochiglobal:put/1','Store term V at K, replaces an existing term if pr'],['fun','riak_core','riak_core_net_ticktime:enable/0',[]],['fun','riak_core','riak_core_net_ticktime:start_set_net_ticktime_daemon/2',[]],['fun','riak_core','riak_core_net_ticktime:stop_set_net_ticktime_daemon/1',[]],['fun','riak_core','riak_core_new_claim:new_choose_claim/2','This exists for the sole purpose of backwards comp'],['fun','riak_core','riak_core_new_claim:new_wants_claim/2','This exists for the sole purpose of backwards comp'],['fun','riak_core','riak_core_node_watcher:avsn/0',[]],['fun','riak_core','riak_core_node_watcher:check_health/1','Force a health check for the given service.'],['fun','riak_core','riak_core_node_watcher:code_change/3',[]],['fun','riak_core','riak_core_node_watcher:handle_call/3',[]],['fun','riak_core','riak_core_node_watcher:handle_cast/2',[]],['fun','riak_core','riak_core_node_watcher:handle_info/2',[]],['fun','riak_core','riak_core_node_watcher:init/1',[]],['fun','riak_core','riak_core_node_watcher:node_down/0',[]],['fun','riak_core','riak_core_node_watcher:node_up/0',[]],['fun','riak_core','riak_core_node_watcher:nodes/1',[]],['fun','riak_core','riak_core_node_watcher:resume_health_checks/0',[]],['fun','riak_core','riak_core_node_watcher:service_down/1',[]],['fun','riak_core','riak_core_node_watcher:service_down/2',[]],['fun','riak_core','riak_core_node_watcher:service_up/1','Create a service that can be declared up or down b'],['fun','riak_core','riak_core_node_watcher:service_up/1','service_up/4 with default options.'],['fun','riak_core','riak_core_node_watcher:service_up/2',[]],['fun','riak_core','riak_core_node_watcher:services/0',[]],['fun','riak_core','riak_core_node_watcher:services/1',[]],['fun','riak_core','riak_core_node_watcher:start_link/0',[]],['fun','riak_core','riak_core_node_watcher:suspend_health_checks/0',[]],['fun','riak_core','riak_core_node_watcher:terminate/2',[]],['fun','riak_core','riak_core_node_watcher_events:add_callback/1',[]],['fun','riak_core','riak_core_node_watcher_events:add_guarded_callback/1',[]],['fun','riak_core','riak_core_node_watcher_events:add_guarded_handler/2',[]],['fun','riak_core','riak_core_node_watcher_events:add_handler/2',[]],['fun','riak_core','riak_core_node_watcher_events:add_sup_callback/1',[]],['fun','riak_core','riak_core_node_watcher_events:add_sup_handler/2',[]],['fun','riak_core','riak_core_node_watcher_events:code_change/3',[]],['fun','riak_core','riak_core_node_watcher_events:handle_call/2',[]],['fun','riak_core','riak_core_node_watcher_events:handle_event/2',[]],['fun','riak_core','riak_core_node_watcher_events:handle_info/2',[]],['fun','riak_core','riak_core_node_watcher_events:init/1',[]],['fun','riak_core','riak_core_node_watcher_events:service_update/1',[]],['fun','riak_core','riak_core_node_watcher_events:start_link/0',[]],['fun','riak_core','riak_core_node_watcher_events:terminate/2',[]],['fun','riak_core','riak_core_nodeid:get/0',[]],['fun','riak_core','riak_core_priority_queue:in/2',[]],['fun','riak_core','riak_core_priority_queue:in/3',[]],['fun','riak_core','riak_core_priority_queue:is_empty/1',[]],['fun','riak_core','riak_core_priority_queue:is_queue/1',[]],['fun','riak_core','riak_core_priority_queue:join/2',[]],['fun','riak_core','riak_core_priority_queue:len/1',[]],['fun','riak_core','riak_core_priority_queue:new/0',[]],['fun','riak_core','riak_core_priority_queue:out/1',[]],['fun','riak_core','riak_core_priority_queue:out/2',[]],['fun','riak_core','riak_core_priority_queue:pout/1',[]],['fun','riak_core','riak_core_priority_queue:to_list/1',[]],['fun','riak_core','riak_core_pw_auth:check_password/5','Check a plaintext password with a hashed password.'],['fun','riak_core','riak_core_pw_auth:hash_password/1','Hash a plaintext password, returning hashed passwo'],['fun','riak_core','riak_core_repair:gen_filter/5','Generate a Filter fun to use during partition repa'],['fun','riak_core','riak_core_repair:gen_range/1','Generate the hash Range for a given Target partiti'],['fun','riak_core','riak_core_repair:gen_range_fun/1','Generate the function that will return the hash ra'],['fun','riak_core','riak_core_repair:gen_range_map/1','Generate the map from bucket B to hash Range that '],['fun','riak_core','riak_core_ring:active_members/1','Produce a list of all active (not marked as down) '],['fun','riak_core','riak_core_ring:add_member/3',[]],['fun','riak_core','riak_core_ring:all_member_status/1','Returns the current membership status for all node'],['fun','riak_core','riak_core_ring:all_members/1','Produce a list of all nodes that are members of th'],['fun','riak_core','riak_core_ring:all_next_owners/1',[]],['fun','riak_core','riak_core_ring:all_owners/1','Provide all ownership information in the form of {'],['fun','riak_core','riak_core_ring:all_preflists/1','Provide every preflist in the ring, truncated at N'],['fun','riak_core','riak_core_ring:awaiting_resize_transfer/1','returns the first awaiting resize_transfer for a {'],['fun','riak_core','riak_core_ring:cancel_transfers/1','Return a ring with all transfers cancelled - for c'],['fun','riak_core','riak_core_ring:chash/1','Return the CHash of the ring.'],['fun','riak_core','riak_core_ring:check_tainted/2',[]],['fun','riak_core','riak_core_ring:claimant/1','Return the current claimant.'],['fun','riak_core','riak_core_ring:claiming_members/1','Return a list of all members of the cluster that a'],['fun','riak_core','riak_core_ring:clear_member_meta/3',[]],['fun','riak_core','riak_core_ring:cluster_name/1','Returns the unique identifer for this cluster.'],['fun','riak_core','riak_core_ring:complete_resize_transfers/1',[]],['fun','riak_core','riak_core_ring:completed_next_owners/2',[]],['fun','riak_core','riak_core_ring:deletion_complete/1',[]],['fun','riak_core','riak_core_ring:diff_nodes/1','For two rings, return the list of owners that have'],['fun','riak_core','riak_core_ring:disowning_indices/2','Return all indices that a node is scheduled to giv'],['fun','riak_core','riak_core_ring:down_member/3',[]],['fun','riak_core','riak_core_ring:down_members/1','Return a list of all members of the cluster that a'],['fun','riak_core','riak_core_ring:downgrade/2','Downgrade the latest ring structure to a specified'],['fun','riak_core','riak_core_ring:equal_rings/1',[]],['fun','riak_core','riak_core_ring:exit_member/3',[]],['fun','riak_core','riak_core_ring:fresh/0','This is used only when this node is creating a bra'],['fun','riak_core','riak_core_ring:fresh/1','Equivalent to fresh/1 but allows specification of '],['fun','riak_core','riak_core_ring:fresh/1','Equivalent to fresh/0 but allows specification of '],['fun','riak_core','riak_core_ring:future_index/1',[]],['fun','riak_core','riak_core_ring:future_index/1','Given a key and an index in the current ring, dete'],['fun','riak_core','riak_core_ring:future_index/5',[]],['fun','riak_core','riak_core_ring:future_indices/1','Return all partition indices that will be owned by'],['fun','riak_core','riak_core_ring:future_num_partitions/1',[]],['fun','riak_core','riak_core_ring:future_owner/1','Return the node that will own this index after tra'],['fun','riak_core','riak_core_ring:future_ring/1','Return the ring that will exist after all pending '],['fun','riak_core','riak_core_ring:get_buckets/1','return the names of all the custom buckets stored '],['fun','riak_core','riak_core_ring:get_member_meta/3',[]],['fun','riak_core','riak_core_ring:get_meta/1','Return a value from the cluster metadata dict.'],['fun','riak_core','riak_core_ring:handoff_complete/1','Marks a pending transfer as completed.'],['fun','riak_core','riak_core_ring:increment_ring_version/2',[]],['fun','riak_core','riak_core_ring:increment_vclock/2',[]],['fun','riak_core','riak_core_ring:index_owner/1','Return the node that owns the given index.'],['fun','riak_core','riak_core_ring:indices/1','Return all partition indices owned by a node.'],['fun','riak_core','riak_core_ring:is_future_index/1',[]],['fun','riak_core','riak_core_ring:is_post_resize/1',[]],['fun','riak_core','riak_core_ring:is_primary/1','Determine if a given Index/Node IdxNode combinatio'],['fun','riak_core','riak_core_ring:is_resize_complete/1',[]],['fun','riak_core','riak_core_ring:is_resizing/1',[]],['fun','riak_core','riak_core_ring:leave_member/3',[]],['fun','riak_core','riak_core_ring:maybe_abort_resize/1',[]],['fun','riak_core','riak_core_ring:member_status/1','Returns the current membership status for a node i'],['fun','riak_core','riak_core_ring:members/2',[]],['fun','riak_core','riak_core_ring:my_indices/1','Return all partition indices owned by the node exe'],['fun','riak_core','riak_core_ring:nearly_equal/1','Verify that the two rings are identical expect tha'],['fun','riak_core','riak_core_ring:next_owner/1','Return details for a pending partition ownership c'],['fun','riak_core','riak_core_ring:next_owner/1','Return details for a pending partition ownership c'],['fun','riak_core','riak_core_ring:num_partitions/1','Return the number of partitions in this Riak ring.'],['fun','riak_core','riak_core_ring:owner_node/1','Return the node that is responsible for a given ch'],['fun','riak_core','riak_core_ring:pending_changes/1','Returns a list of all pending ownership transfers.'],['fun','riak_core','riak_core_ring:preflist/1','For a given object key, produce the ordered list o'],['fun','riak_core','riak_core_ring:pretty_print/2',[]],['fun','riak_core','riak_core_ring:random_node/1','Return a randomly-chosen node from amongst the own'],['fun','riak_core','riak_core_ring:random_other_active_node/1','Return a randomly-chosen active node other than th'],['fun','riak_core','riak_core_ring:random_other_index/1',[]],['fun','riak_core','riak_core_ring:random_other_index/1','Return a partition index not owned by the node exe'],['fun','riak_core','riak_core_ring:random_other_node/1','Return a randomly-chosen node from amongst the own'],['fun','riak_core','riak_core_ring:ready_members/1','Returns a list of members guaranteed safe for requ'],['fun','riak_core','riak_core_ring:reconcile/1','Incorporate another nodes state into our view of '],['fun','riak_core','riak_core_ring:reconcile_names/2',[]],['fun','riak_core','riak_core_ring:remove_member/3',[]],['fun','riak_core','riak_core_ring:remove_meta/1','Logical delete of a key in the cluster metadata di'],['fun','riak_core','riak_core_ring:rename_node/1',' Rename OldNode to NewNode in a Riak ring.'],['fun','riak_core','riak_core_ring:reschedule_resize_transfers/1','reassign all outbound and inbound resize transfers'],['fun','riak_core','riak_core_ring:resize/1','change the size of the ring to NewRingSize.'],['fun','riak_core','riak_core_ring:resize_transfer_complete/1','mark a resize_transfer from Source to Target for M'],['fun','riak_core','riak_core_ring:resize_transfer_status/1','return the status of a resize_transfer for Source '],['fun','riak_core','riak_core_ring:resized_ring/1',[]],['fun','riak_core','riak_core_ring:responsible_index/1','Determine the integer ring index responsible     '],['fun','riak_core','riak_core_ring:ring_changed/2',[]],['fun','riak_core','riak_core_ring:ring_ready/0',[]],['fun','riak_core','riak_core_ring:ring_ready/1','Returns true if all cluster members have seen the '],['fun','riak_core','riak_core_ring:ring_ready_info/1',[]],['fun','riak_core','riak_core_ring:ring_version/1',[]],['fun','riak_core','riak_core_ring:schedule_resize_transfer/1',[]],['fun','riak_core','riak_core_ring:set_chash/2',[]],['fun','riak_core','riak_core_ring:set_claimant/2',[]],['fun','riak_core','riak_core_ring:set_cluster_name/2','Sets the unique identifer for this cluster.'],['fun','riak_core','riak_core_ring:set_member/4',[]],['fun','riak_core','riak_core_ring:set_member/5',[]],['fun','riak_core','riak_core_ring:set_owner/1','Set the node that is responsible for a given chsta'],['fun','riak_core','riak_core_ring:set_pending_changes/2',[]],['fun','riak_core','riak_core_ring:set_pending_resize/1','Given a ring, Resizing, that has been resized (and'],['fun','riak_core','riak_core_ring:set_pending_resize_abort/1',[]],['fun','riak_core','riak_core_ring:set_resized_ring/1',[]],['fun','riak_core','riak_core_ring:set_tainted/1',[]],['fun','riak_core','riak_core_ring:transfer_node/1',[]],['fun','riak_core','riak_core_ring:update_member_meta/5','Set a key in the member metadata orddict.'],['fun','riak_core','riak_core_ring:update_meta/1','Set a key in the cluster metadata dict.'],['fun','riak_core','riak_core_ring:upgrade/1','Upgrade old ring structures to the latest format.'],['fun','riak_core','riak_core_ring:vnode_type/1',[]],['fun','riak_core','riak_core_ring_events:add_callback/1',[]],['fun','riak_core','riak_core_ring_events:add_guarded_callback/1',[]],['fun','riak_core','riak_core_ring_events:add_guarded_handler/2',[]],['fun','riak_core','riak_core_ring_events:add_handler/2',[]],['fun','riak_core','riak_core_ring_events:add_sup_callback/1',[]],['fun','riak_core','riak_core_ring_events:add_sup_handler/2',[]],['fun','riak_core','riak_core_ring_events:code_change/3',[]],['fun','riak_core','riak_core_ring_events:force_sync_update/0',[]],['fun','riak_core','riak_core_ring_events:force_update/0',[]],['fun','riak_core','riak_core_ring_events:handle_call/2',[]],['fun','riak_core','riak_core_ring_events:handle_event/2',[]],['fun','riak_core','riak_core_ring_events:handle_info/2',[]],['fun','riak_core','riak_core_ring_events:init/1',[]],['fun','riak_core','riak_core_ring_events:ring_sync_update/1',[]],['fun','riak_core','riak_core_ring_events:ring_update/1',[]],['fun','riak_core','riak_core_ring_events:start_link/0',[]],['fun','riak_core','riak_core_ring_events:terminate/2',[]],['fun','riak_core','riak_core_ring_handler:code_change/3',[]],['fun','riak_core','riak_core_ring_handler:ensure_vnodes_started/1',[]],['fun','riak_core','riak_core_ring_handler:handle_call/2',[]],['fun','riak_core','riak_core_ring_handler:handle_event/2',[]],['fun','riak_core','riak_core_ring_handler:handle_info/2',[]],['fun','riak_core','riak_core_ring_handler:init/1',[]],['fun','riak_core','riak_core_ring_handler:terminate/2',[]],['fun','riak_core','riak_core_ring_manager:cleanup_ets/1',[]],['fun','riak_core','riak_core_ring_manager:do_write_ringfile/1',[]],['fun','riak_core','riak_core_ring_manager:find_latest_ringfile/0',[]],['fun','riak_core','riak_core_ring_manager:force_update/0','Exposed for support/debug purposes.'],['fun','riak_core','riak_core_ring_manager:get_bucket_meta/1','Return metadata for the given bucket.'],['fun','riak_core','riak_core_ring_manager:get_chash_bin/0','Return the chashbin generated from the current rin'],['fun','riak_core','riak_core_ring_manager:get_my_ring/0',[]],['fun','riak_core','riak_core_ring_manager:get_raw_ring/0',[]],['fun','riak_core','riak_core_ring_manager:get_raw_ring_chashbin/0',[]],['fun','riak_core','riak_core_ring_manager:get_ring_id/0',[]],['fun','riak_core','riak_core_ring_manager:handle_call/3',[]],['fun','riak_core','riak_core_ring_manager:handle_cast/2',[]],['fun','riak_core','riak_core_ring_manager:handle_info/2',[]],['fun','riak_core','riak_core_ring_manager:init/1',[]],['fun','riak_core','riak_core_ring_manager:is_stable_ring/0',[]],['fun','riak_core','riak_core_ring_manager:prune_ringfiles/0',[]],['fun','riak_core','riak_core_ring_manager:read_ringfile/1',[]],['fun','riak_core','riak_core_ring_manager:refresh_my_ring/0',[]],['fun','riak_core','riak_core_ring_manager:refresh_ring/2',[]],['fun','riak_core','riak_core_ring_manager:ring_trans/2',[]],['fun','riak_core','riak_core_ring_manager:set_cluster_name/1',[]],['fun','riak_core','riak_core_ring_manager:set_my_ring/1',[]],['fun','riak_core','riak_core_ring_manager:set_ring_global/1',[]],['fun','riak_core','riak_core_ring_manager:setup_ets/1',[]],['fun','riak_core','riak_core_ring_manager:start_link/0',[]],['fun','riak_core','riak_core_ring_manager:start_link/1',[]],['fun','riak_core','riak_core_ring_manager:write_ringfile/0',[]],['fun','riak_core','riak_core_ring_util:assign/2','Forcibly assign a partition to a specific node.'],['fun','riak_core','riak_core_ring_util:check_ring/0','Check the local ring for any preflists that do not'],['fun','riak_core','riak_core_ring_util:check_ring/1',[]],['fun','riak_core','riak_core_ring_util:check_ring/2','Check a ring for any preflists that do not satisfy'],['fun','riak_core','riak_core_ring_util:hash_is_partition_boundary/1','For user-facing tools, indicate whether a specifie'],['fun','riak_core','riak_core_ring_util:hash_to_partition_id/1','Map a key hash (as binary or integer) to a partiti'],['fun','riak_core','riak_core_ring_util:partition_id_to_hash/1','Identify the first key hash (integer form) in a pa'],['fun','riak_core','riak_core_security:add_grant/1',[]],['fun','riak_core','riak_core_security:add_group/1',[]],['fun','riak_core','riak_core_security:add_revoke/1',[]],['fun','riak_core','riak_core_security:add_source/1',[]],['fun','riak_core','riak_core_security:add_user/1',[]],['fun','riak_core','riak_core_security:alter_group/1',[]],['fun','riak_core','riak_core_security:alter_user/1',[]],['fun','riak_core','riak_core_security:authenticate/1',[]],['fun','riak_core','riak_core_security:check_permission/1',[]],['fun','riak_core','riak_core_security:check_permissions/2',[]],['fun','riak_core','riak_core_security:del_group/1',[]],['fun','riak_core','riak_core_security:del_source/2',[]],['fun','riak_core','riak_core_security:del_user/1',[]],['fun','riak_core','riak_core_security:disable/0',[]],['fun','riak_core','riak_core_security:enable/0',[]],['fun','riak_core','riak_core_security:get_ciphers/0',[]],['fun','riak_core','riak_core_security:get_username/1',[]],['fun','riak_core','riak_core_security:is_enabled/0',[]],['fun','riak_core','riak_core_security:print_ciphers/0',[]],['fun','riak_core','riak_core_security:print_grants/1',[]],['fun','riak_core','riak_core_security:print_group/1',[]],['fun','riak_core','riak_core_security:print_groups/0',[]],['fun','riak_core','riak_core_security:print_sources/0',[]],['fun','riak_core','riak_core_security:print_user/1',[]],['fun','riak_core','riak_core_security:print_users/0',[]],['fun','riak_core','riak_core_security:set_ciphers/1',[]],['fun','riak_core','riak_core_security:status/0',[]],['fun','riak_core','riak_core_send_msg:bang_unreliable/2',[]],['fun','riak_core','riak_core_send_msg:cast_unreliable/2',[]],['fun','riak_core','riak_core_send_msg:reply_unreliable/2',[]],['fun','riak_core','riak_core_send_msg:send_event_unreliable/2',[]],['fun','riak_core','riak_core_ssl_util:get_common_name/1',[]],['fun','riak_core','riak_core_ssl_util:load_certs/1',[]],['fun','riak_core','riak_core_ssl_util:maybe_use_ssl/1',[]],['fun','riak_core','riak_core_ssl_util:parse_ciphers/1',[]],['fun','riak_core','riak_core_ssl_util:print_ciphers/1',[]],['fun','riak_core','riak_core_ssl_util:upgrade_client_to_ssl/2',[]],['fun','riak_core','riak_core_ssl_util:upgrade_server_to_ssl/2',[]],['fun','riak_core','riak_core_ssl_util:validate_ssl_config/1',[]],['fun','riak_core','riak_core_stat:code_change/3',[]],['fun','riak_core','riak_core_stat:get_stats/0','Get the current aggregation of stats.'],['fun','riak_core','riak_core_stat:get_stats/1',[]],['fun','riak_core','riak_core_stat:handle_call/3',[]],['fun','riak_core','riak_core_stat:handle_cast/2',[]],['fun','riak_core','riak_core_stat:handle_info/2',[]],['fun','riak_core','riak_core_stat:init/1',[]],['fun','riak_core','riak_core_stat:prefix/0',[]],['fun','riak_core','riak_core_stat:register_stats/0',[]],['fun','riak_core','riak_core_stat:register_stats/2','(Re-)Register a list of metrics for App.'],['fun','riak_core','riak_core_stat:register_vnode_stats/3',[]],['fun','riak_core','riak_core_stat:start_link/0',[]],['fun','riak_core','riak_core_stat:terminate/2',[]],['fun','riak_core','riak_core_stat:unregister_vnode_stats/2',[]],['fun','riak_core','riak_core_stat:update/1',[]],['fun','riak_core','riak_core_stat:vnodeq_stats/0',[]],['fun','riak_core','riak_core_stat:vnodeq_stats/1',[]],['fun','riak_core','riak_core_stat_cache:code_change/3',[]],['fun','riak_core','riak_core_stat_cache:get_stats/1',[]],['fun','riak_core','riak_core_stat_cache:handle_call/3',[]],['fun','riak_core','riak_core_stat_cache:handle_cast/2',[]],['fun','riak_core','riak_core_stat_cache:handle_info/2',[]],['fun','riak_core','riak_core_stat_cache:init/1',[]],['fun','riak_core','riak_core_stat_cache:register_app/2',[]],['fun','riak_core','riak_core_stat_cache:start_link/0',[]],['fun','riak_core','riak_core_stat_cache:stop/0',[]],['fun','riak_core','riak_core_stat_cache:terminate/2',[]],['fun','riak_core','riak_core_stat_calc_proc:code_change/3',[]],['fun','riak_core','riak_core_stat_calc_proc:handle_call/3',[]],['fun','riak_core','riak_core_stat_calc_proc:handle_cast/2',[]],['fun','riak_core','riak_core_stat_calc_proc:handle_info/2',[]],['fun','riak_core','riak_core_stat_calc_proc:init/1',[]],['fun','riak_core','riak_core_stat_calc_proc:start_link/1','Cache item time to live in seconds.'],['fun','riak_core','riak_core_stat_calc_proc:stop/1',[]],['fun','riak_core','riak_core_stat_calc_proc:terminate/2',[]],['fun','riak_core','riak_core_stat_calc_proc:value/1',[]],['fun','riak_core','riak_core_stat_calc_sup:calc_proc/1',[]],['fun','riak_core','riak_core_stat_calc_sup:init/1',[]],['fun','riak_core','riak_core_stat_calc_sup:start_link/0',[]],['fun','riak_core','riak_core_stat_calc_sup:stop_proc/1',[]],['fun','riak_core','riak_core_stat_sup:init/1',[]],['fun','riak_core','riak_core_stat_sup:start_link/0',[]],['fun','riak_core','riak_core_stat_xform:parse_transform/2',[]],['fun','riak_core','riak_core_stats_sup:init/1',[]],['fun','riak_core','riak_core_stats_sup:start_link/0',[]],['fun','riak_core','riak_core_stats_sup:start_server/1',[]],['fun','riak_core','riak_core_stats_sup:stop_server/1',[]],['fun','riak_core','riak_core_status:all_active_transfers/0','Produce status for all active transfers in the clu'],['fun','riak_core','riak_core_status:partitions/2',[]],['fun','riak_core','riak_core_status:ring_status/0',[]],['fun','riak_core','riak_core_status:ringready/0',[]],['fun','riak_core','riak_core_status:transfers/0',[]],['fun','riak_core','riak_core_sup:ensembles_enabled/0',[]],['fun','riak_core','riak_core_sup:init/1',[]],['fun','riak_core','riak_core_sup:start_link/0',[]],['fun','riak_core','riak_core_sysmon_handler:add_handler/0',[]],['fun','riak_core','riak_core_sysmon_minder:start_link/0','  Starts the server.'],['fun','riak_core','riak_core_tcp_mon:code_change/3',[]],['fun','riak_core','riak_core_tcp_mon:default_status_funs/0',[]],['fun','riak_core','riak_core_tcp_mon:diff/2',[]],['fun','riak_core','riak_core_tcp_mon:format/0',[]],['fun','riak_core','riak_core_tcp_mon:format/2',[]],['fun','riak_core','riak_core_tcp_mon:format_socket_stats/2',[]],['fun','riak_core','riak_core_tcp_mon:handle_call/3',[]],['fun','riak_core','riak_core_tcp_mon:handle_cast/2',[]],['fun','riak_core','riak_core_tcp_mon:handle_info/2',[]],['fun','riak_core','riak_core_tcp_mon:init/1',[]],['fun','riak_core','riak_core_tcp_mon:kbps/2',[]],['fun','riak_core','riak_core_tcp_mon:monitor/3',[]],['fun','riak_core','riak_core_tcp_mon:rate/2',[]],['fun','riak_core','riak_core_tcp_mon:raw/2',[]],['fun','riak_core','riak_core_tcp_mon:socket_status/1',[]],['fun','riak_core','riak_core_tcp_mon:start_link/0',[]],['fun','riak_core','riak_core_tcp_mon:start_link/1',[]],['fun','riak_core','riak_core_tcp_mon:status/0',[]],['fun','riak_core','riak_core_tcp_mon:status/1',[]],['fun','riak_core','riak_core_tcp_mon:terminate/2',[]],['fun','riak_core','riak_core_tracer:all_events/1',[]],['fun','riak_core','riak_core_tracer:code_change/3',[]],['fun','riak_core','riak_core_tracer:collect/0',[]],['fun','riak_core','riak_core_tracer:collect/1',[]],['fun','riak_core','riak_core_tracer:collect/2',[]],['fun','riak_core','riak_core_tracer:filter/2',[]],['fun','riak_core','riak_core_tracer:handle_call/3',[]],['fun','riak_core','riak_core_tracer:handle_cast/2',[]],['fun','riak_core','riak_core_tracer:handle_info/2',[]],['fun','riak_core','riak_core_tracer:init/1',[]],['fun','riak_core','riak_core_tracer:reset/0',[]],['fun','riak_core','riak_core_tracer:results/0',[]],['fun','riak_core','riak_core_tracer:start_link/0',[]],['fun','riak_core','riak_core_tracer:stop/0',[]],['fun','riak_core','riak_core_tracer:stop_collect/0',[]],['fun','riak_core','riak_core_tracer:terminate/2',[]],['fun','riak_core','riak_core_tracer:test_all_events/1',[]],['fun','riak_core','riak_core_tracer:trigger_sentinel/0',[]],['fun','riak_core','riak_core_util:build_tree/1','Convert a list of elements into an N-ary tree.'],['fun','riak_core','riak_core_util:chash_bucketonly_keyfun/1','Object/ring hashing fun that ignores Key, only use'],['fun','riak_core','riak_core_util:chash_key/1','Create a binary used for determining replica place'],['fun','riak_core','riak_core_util:chash_key/1','Create a binary used for determining replica place'],['fun','riak_core','riak_core_util:chash_std_keyfun/1','Default object/ring hashing fun, direct passthroug'],['fun','riak_core','riak_core_util:compare_dates/1','Compare two RFC1123 date strings or two now() tupl'],['fun','riak_core','riak_core_util:compose/1','Function composition: returns a function that is t'],['fun','riak_core','riak_core_util:compose/1','Function composition: returns a function that is t'],['fun','riak_core','riak_core_util:format_ip_and_port/2',[]],['fun','riak_core','riak_core_util:integer_to_list/1','Convert an integer to its string representation in'],['fun','riak_core','riak_core_util:is_arch/1',[]],['fun','riak_core','riak_core_util:keydelete/1','Returns a copy of TupleList where the first occurr'],['fun','riak_core','riak_core_util:make_fold_req/1','Convert a #riak_core_fold_req_v? record to the clu'],['fun','riak_core','riak_core_util:make_fold_req/2',[]],['fun','riak_core','riak_core_util:make_fold_req/4',[]],['fun','riak_core','riak_core_util:make_newest_fold_req/1','Force a #riak_core_fold_req_v? record to the lates'],['fun','riak_core','riak_core_util:make_tmp_dir/0','Create a unique directory in /tmp.'],['fun','riak_core','riak_core_util:md5/1',[]],['fun','riak_core','riak_core_util:mkclientid/1','Create a unique-enough id for vclock clients.'],['fun','riak_core','riak_core_util:moment/0','Get the current "moment".'],['fun','riak_core','riak_core_util:multi_keydelete/1','Returns a copy of TupleList where the Nth occurren'],['fun','riak_core','riak_core_util:multi_keydelete/1','Returns a copy of TupleList where the first occurr'],['fun','riak_core','riak_core_util:multi_rpc/1','Perform an RPC call to a list of nodes in parallel'],['fun','riak_core','riak_core_util:multi_rpc/1','Perform an RPC call to a list of nodes in parallel'],['fun','riak_core','riak_core_util:multi_rpc_ann/1','Perform an RPC call to a list of nodes in parallel'],['fun','riak_core','riak_core_util:multi_rpc_ann/1','Perform an RPC call to a list of nodes in parallel'],['fun','riak_core','riak_core_util:multicall_ann/1','Similar to rpc:multicall/6.'],['fun','riak_core','riak_core_util:multicall_ann/1','Similar to rpc:multicall/4.'],['fun','riak_core','riak_core_util:orddict_delta/2',[]],['fun','riak_core','riak_core_util:peername/2',[]],['fun','riak_core','riak_core_util:pmap/1','Parallel map with a cap on the number of concurren'],['fun','riak_core','riak_core_util:pmap/2','Invoke function F over each element of list L in p'],['fun','riak_core','riak_core_util:proxy_spawn/1','Spawn an intermediate proxy process to handle erro'],['fun','riak_core','riak_core_util:reload_all/1','Ask each member node of the riak ring to reload th'],['fun','riak_core','riak_core_util:replace_file/1','Atomically/safely (to some reasonable level of dur'],['fun','riak_core','riak_core_util:rpc_every_member/1','Make an RPC call to the given module and function '],['fun','riak_core','riak_core_util:rpc_every_member_ann/4','Same as rpc_every_member/4, but annotate the resul'],['fun','riak_core','riak_core_util:safe_rpc/1','Wraps an rpc:call/5 in a try/catch to handle the c'],['fun','riak_core','riak_core_util:safe_rpc/1','Wraps an rpc:call/4 in a try/catch to handle the c'],['fun','riak_core','riak_core_util:sha/1',[]],['fun','riak_core','riak_core_util:shuffle/1',[]],['fun','riak_core','riak_core_util:sockname/2',[]],['fun','riak_core','riak_core_util:start_app_deps/1','Start depedent applications of App.'],['fun','riak_core','riak_core_util:str_to_node/1',[]],['fun','riak_core','riak_core_util:unique_id_62/0','Create a random identifying integer, returning its'],['fun','riak_core','riak_core_vnode:active/2',[]],['fun','riak_core','riak_core_vnode:active/3',[]],['fun','riak_core','riak_core_vnode:code_change/4',[]],['fun','riak_core','riak_core_vnode:core_status/1',[]],['fun','riak_core','riak_core_vnode:get_mod_index/1',[]],['fun','riak_core','riak_core_vnode:get_modstate/1','Reveal the underlying module state for testing.'],['fun','riak_core','riak_core_vnode:handle_event/3',[]],['fun','riak_core','riak_core_vnode:handle_info/3',[]],['fun','riak_core','riak_core_vnode:handle_sync_event/4',[]],['fun','riak_core','riak_core_vnode:handoff_error/3',[]],['fun','riak_core','riak_core_vnode:init/1',[]],['fun','riak_core','riak_core_vnode:monitor/1','Set up a monitor for the pid named by a sender() v'],['fun','riak_core','riak_core_vnode:reply/1','Send a reply to a vnode request.'],['fun','riak_core','riak_core_vnode:send_command/2',[]],['fun','riak_core','riak_core_vnode:send_command_after/1',[]],['fun','riak_core','riak_core_vnode:set_forwarding/2',[]],['fun','riak_core','riak_core_vnode:start_link/3',[]],['fun','riak_core','riak_core_vnode:start_link/4',[]],['fun','riak_core','riak_core_vnode:started/2',[]],['fun','riak_core','riak_core_vnode:started/3',[]],['fun','riak_core','riak_core_vnode:terminate/3',[]],['fun','riak_core','riak_core_vnode:trigger_delete/1',[]],['fun','riak_core','riak_core_vnode:trigger_handoff/2',[]],['fun','riak_core','riak_core_vnode:trigger_handoff/3',[]],['fun','riak_core','riak_core_vnode:wait_for_init/1',[]],['fun','riak_core','riak_core_vnode_manager:all_handoffs/0','Get all handoffs known by this manager.'],['fun','riak_core','riak_core_vnode_manager:all_index_pid/1',[]],['fun','riak_core','riak_core_vnode_manager:all_vnodes/0',[]],['fun','riak_core','riak_core_vnode_manager:all_vnodes/1',[]],['fun','riak_core','riak_core_vnode_manager:all_vnodes_status/0',[]],['fun','riak_core','riak_core_vnode_manager:force_handoffs/0','Provided for support/debug purposes.'],['fun','riak_core','riak_core_vnode_manager:get_tab/0',[]],['fun','riak_core','riak_core_vnode_manager:get_vnode_pid/2',[]],['fun','riak_core','riak_core_vnode_manager:handle_info/2',[]],['fun','riak_core','riak_core_vnode_manager:kill_repairs/1',[]],['fun','riak_core','riak_core_vnode_manager:repair/1','Repair the given ModPartition pair for Service usi'],['fun','riak_core','riak_core_vnode_manager:repair_status/1','Get the status of the repair process for a given M'],['fun','riak_core','riak_core_vnode_manager:start_link/0',[]],['fun','riak_core','riak_core_vnode_manager:start_vnode/2',[]],['fun','riak_core','riak_core_vnode_manager:stop/0',[]],['fun','riak_core','riak_core_vnode_manager:unregister_vnode/2',[]],['fun','riak_core','riak_core_vnode_manager:unregister_vnode/3',[]],['fun','riak_core','riak_core_vnode_manager:vnode_event/4',[]],['fun','riak_core','riak_core_vnode_manager:xfer_complete/1',[]],['fun','riak_core','riak_core_vnode_master:all_nodes/1',[]],['fun','riak_core','riak_core_vnode_master:command/3',[]],['fun','riak_core','riak_core_vnode_master:command/4',[]],['fun','riak_core','riak_core_vnode_master:command_return_vnode/4',[]],['fun','riak_core','riak_core_vnode_master:command_unreliable/3',[]],['fun','riak_core','riak_core_vnode_master:command_unreliable/4',[]],['fun','riak_core','riak_core_vnode_master:coverage/5',[]],['fun','riak_core','riak_core_vnode_master:get_vnode_pid/2',[]],['fun','riak_core','riak_core_vnode_master:handle_call/3',[]],['fun','riak_core','riak_core_vnode_master:handle_cast/2',[]],['fun','riak_core','riak_core_vnode_master:handle_info/2',[]],['fun','riak_core','riak_core_vnode_master:make_coverage_request/1',[]],['fun','riak_core','riak_core_vnode_master:make_request/1',[]],['fun','riak_core','riak_core_vnode_master:reg_name/1',[]],['fun','riak_core','riak_core_vnode_master:start_link/1',[]],['fun','riak_core','riak_core_vnode_master:start_link/2',[]],['fun','riak_core','riak_core_vnode_master:start_link/3',[]],['fun','riak_core','riak_core_vnode_master:start_vnode/2',[]],['fun','riak_core','riak_core_vnode_master:sync_command/3',[]],['fun','riak_core','riak_core_vnode_master:sync_command/4',[]],['fun','riak_core','riak_core_vnode_master:sync_spawn_command/3',[]],['fun','riak_core','riak_core_vnode_proxy:call/2',[]],['fun','riak_core','riak_core_vnode_proxy:call/3',[]],['fun','riak_core','riak_core_vnode_proxy:cast/2',[]],['fun','riak_core','riak_core_vnode_proxy:command_return_vnode/1',[]],['fun','riak_core','riak_core_vnode_proxy:init/1',[]],['fun','riak_core','riak_core_vnode_proxy:overloaded/1',[]],['fun','riak_core','riak_core_vnode_proxy:reg_name/2',[]],['fun','riak_core','riak_core_vnode_proxy:reg_name/3',[]],['fun','riak_core','riak_core_vnode_proxy:start_link/2',[]],['fun','riak_core','riak_core_vnode_proxy:system_code_change/4',[]],['fun','riak_core','riak_core_vnode_proxy:system_continue/3',[]],['fun','riak_core','riak_core_vnode_proxy:system_terminate/4',[]],['fun','riak_core','riak_core_vnode_proxy:unregister_vnode/3',[]],['fun','riak_core','riak_core_vnode_proxy_sup:init/1',[]],['fun','riak_core','riak_core_vnode_proxy_sup:start_link/0',[]],['fun','riak_core','riak_core_vnode_proxy_sup:start_proxies/1',[]],['fun','riak_core','riak_core_vnode_proxy_sup:start_proxy/2',[]],['fun','riak_core','riak_core_vnode_proxy_sup:stop_proxy/2',[]],['fun','riak_core','riak_core_vnode_sup:start_link/0',[]],['fun','riak_core','riak_core_vnode_sup:start_vnode/3',[]],['fun','riak_core','riak_core_vnode_worker:behaviour_info/1',[]],['fun','riak_core','riak_core_vnode_worker:code_change/3',[]],['fun','riak_core','riak_core_vnode_worker:handle_call/3',[]],['fun','riak_core','riak_core_vnode_worker:handle_cast/2',[]],['fun','riak_core','riak_core_vnode_worker:handle_info/2',[]],['fun','riak_core','riak_core_vnode_worker:handle_work/3',[]],['fun','riak_core','riak_core_vnode_worker:handle_work/4',[]],['fun','riak_core','riak_core_vnode_worker:init/1',[]],['fun','riak_core','riak_core_vnode_worker:start_link/1',[]],['fun','riak_core','riak_core_vnode_worker:terminate/2',[]],['fun','riak_core','riak_core_vnode_worker_pool:code_change/4',[]],['fun','riak_core','riak_core_vnode_worker_pool:handle_event/3',[]],['fun','riak_core','riak_core_vnode_worker_pool:handle_info/3',[]],['fun','riak_core','riak_core_vnode_worker_pool:handle_sync_event/4',[]],['fun','riak_core','riak_core_vnode_worker_pool:handle_work/3',[]],['fun','riak_core','riak_core_vnode_worker_pool:init/1',[]],['fun','riak_core','riak_core_vnode_worker_pool:queueing/2',[]],['fun','riak_core','riak_core_vnode_worker_pool:queueing/3',[]],['fun','riak_core','riak_core_vnode_worker_pool:ready/2',[]],['fun','riak_core','riak_core_vnode_worker_pool:ready/3',[]],['fun','riak_core','riak_core_vnode_worker_pool:shutdown/2',[]],['fun','riak_core','riak_core_vnode_worker_pool:shutdown/3',[]],['fun','riak_core','riak_core_vnode_worker_pool:shutdown_pool/2',[]],['fun','riak_core','riak_core_vnode_worker_pool:start_link/5',[]],['fun','riak_core','riak_core_vnode_worker_pool:stop/2',[]],['fun','riak_core','riak_core_vnode_worker_pool:terminate/3',[]],['fun','riak_core','vclock:all_nodes/1','Return the list of all nodes that have ever increm'],['fun','riak_core','vclock:descends/1','Return true if Va is a direct descendant of Vb, el'],['fun','riak_core','vclock:descends_dot/1','does the given vclock() descend from the given dot'],['fun','riak_core','vclock:dominates/1','true if A strictly dominates B.'],['fun','riak_core','vclock:equal/1','Compares two VClocks for equality.'],['fun','riak_core','vclock:fresh/0','Create a brand new vclock.'],['fun','riak_core','vclock:fresh/1',[]],['fun','riak_core','vclock:get_counter/1','Get the counter value in VClock set from Node.'],['fun','riak_core','vclock:get_dot/1','Get the entry dot() for vclock_node() from vclock('],['fun','riak_core','vclock:get_timestamp/1','Get the timestamp value in a VClock set from Node.'],['fun','riak_core','vclock:increment/1','Increment VClock at Node.'],['fun','riak_core','vclock:increment/1','Increment VClock at Node.'],['fun','riak_core','vclock:merge/1','Combine all VClocks in the input list into their l'],['fun','riak_core','vclock:prune/1','Possibly shrink the size of a vclock, depending on'],['fun','riak_core','vclock:pure_dot/1','in some cases the dot without timestamp data is ne'],['fun','riak_core','vclock:timestamp/0','Return a timestamp for a vector clock.'],['fun','riak_core','vclock:valid_dot/1','is the given argument a valid dot, or entry?.']];