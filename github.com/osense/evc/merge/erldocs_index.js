var index = [['app','evc','evc','[application]'],['mod','evc','evc_dict','Erlang vector clock.'],['mod','evc','evc_maps','Erlang vector clock.'],['mod','evc','evc_riak','A simple Erlang implementation of vector clocks as'],['fun','evc','evc_dict:compare/2','Returns true if M1 is less than or equal to M2.'],['fun','evc','evc_dict:descends/2','Returns true if M1 is a descendant of M2.'],['fun','evc','evc_dict:event/1',[]],['fun','evc','evc_dict:event/2',[]],['fun','evc','evc_dict:get_counter/2',[]],['fun','evc','evc_dict:get_nodes/1',[]],['fun','evc','evc_dict:get_timestamp/1',[]],['fun','evc','evc_dict:merge/2',[]],['fun','evc','evc_dict:new/0',[]],['fun','evc','evc_maps:compare/2','Returns true if M1 is less than or equal to M2.'],['fun','evc','evc_maps:descends/2','Returns true if M1 is a descendant of M2.'],['fun','evc','evc_maps:event/1',[]],['fun','evc','evc_maps:event/2',[]],['fun','evc','evc_maps:get_counter/2',[]],['fun','evc','evc_maps:get_nodes/1',[]],['fun','evc','evc_maps:get_timestamp/1',[]],['fun','evc','evc_maps:merge/2',[]],['fun','evc','evc_maps:new/0',[]],['fun','evc','evc_riak:compare/2','Returns true if Va is less than or equal to Vb, el'],['fun','evc','evc_riak:descends/1','Return true if Va is a direct descendant of Vb, el'],['fun','evc','evc_riak:dominates/1','true if A strictly dominates B.'],['fun','evc','evc_riak:equal/1','Compares two VClocks for equality.'],['fun','evc','evc_riak:event/1','Increment VClock at current node.'],['fun','evc','evc_riak:event/1','Increment VClock at Node.'],['fun','evc','evc_riak:event/1','Increment VClock at Node.'],['fun','evc','evc_riak:get_counter/1','Get the counter value in VClock set from Node.'],['fun','evc','evc_riak:get_dot/1','Get the entry dot() for evc_node() from evc().'],['fun','evc','evc_riak:get_mean_timestamp/1','Get the mean timestamp of a vector clock.'],['fun','evc','evc_riak:get_nodes/1','Return the list of all nodes that have ever evente'],['fun','evc','evc_riak:merge/1','Merge 2 VClocks, recalculating the mean timestamp.'],['fun','evc','evc_riak:merge_list/1','Combine all VClocks in the input list into their l'],['fun','evc','evc_riak:new/0','Create a brand new evc.'],['fun','evc','evc_riak:new/1',[]],['fun','evc','evc_riak:prune/1','Possibly shrink the size of a evc, depending on cu'],['fun','evc','evc_riak:timestamp/0','Return a timestamp for a vector clock.'],['fun','evc','evc_riak:valid_dot/1','is the given argument a valid dot, or entry?.']];