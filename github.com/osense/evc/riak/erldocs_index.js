var index = [['app','evc','evc','[application]'],['mod','evc','evc','A simple Erlang implementation of vector clocks as'],['fun','evc','evc:compare/2','Returns true if Va is less than or equal to Vb, el'],['fun','evc','evc:descends/1','Return true if Va is a direct descendant of Vb, el'],['fun','evc','evc:dominates/1','true if A strictly dominates B.'],['fun','evc','evc:equal/1','Compares two VClocks for equality.'],['fun','evc','evc:event/1','Increment VClock at current node.'],['fun','evc','evc:event/1','Increment VClock at Node.'],['fun','evc','evc:event/1','Increment VClock at Node.'],['fun','evc','evc:get_counter/1','Get the counter value in VClock set from Node.'],['fun','evc','evc:get_dot/1','Get the entry dot() for evc_node() from evc().'],['fun','evc','evc:get_mean_timestamp/1','Get the mean timestamp of a vector clock.'],['fun','evc','evc:get_nodes/1','Return the list of all nodes that have ever evente'],['fun','evc','evc:merge/1','Merge 2 VClocks, recalculating the mean timestamp.'],['fun','evc','evc:merge_list/1','Combine all VClocks in the input list into their l'],['fun','evc','evc:new/0','Create a brand new evc.'],['fun','evc','evc:new/1',[]],['fun','evc','evc:prune/1','Possibly shrink the size of a evc, depending on cu'],['fun','evc','evc:timestamp/0','Return a timestamp for a vector clock.'],['fun','evc','evc:valid_dot/1','is the given argument a valid dot, or entry?.']];