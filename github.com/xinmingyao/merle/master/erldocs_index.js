var index = [['app','merle','merle','[application]'],['mod','merle','gen_server2',[]],['mod','merle','merle','An Erlang memcached client.'],['mod','merle','merle_app',[]],['mod','merle','merle_sup',[]],['mod','merle','priority_queue',[]],['fun','merle','gen_server2:abcast/2',[]],['fun','merle','gen_server2:abcast/3',[]],['fun','merle','gen_server2:behaviour_info/1',[]],['fun','merle','gen_server2:call/2',[]],['fun','merle','gen_server2:call/3',[]],['fun','merle','gen_server2:cast/2',[]],['fun','merle','gen_server2:enter_loop/3',[]],['fun','merle','gen_server2:enter_loop/4',[]],['fun','merle','gen_server2:enter_loop/5',[]],['fun','merle','gen_server2:format_status/2',[]],['fun','merle','gen_server2:init_it/6',[]],['fun','merle','gen_server2:multi_call/2',[]],['fun','merle','gen_server2:multi_call/3',[]],['fun','merle','gen_server2:multi_call/4',[]],['fun','merle','gen_server2:pcall/3',[]],['fun','merle','gen_server2:pcall/4',[]],['fun','merle','gen_server2:pcast/3',[]],['fun','merle','gen_server2:print_event/3',[]],['fun','merle','gen_server2:reply/2',[]],['fun','merle','gen_server2:start/3',[]],['fun','merle','gen_server2:start/4',[]],['fun','merle','gen_server2:start_link/3',[]],['fun','merle','gen_server2:start_link/4',[]],['fun','merle','gen_server2:system_code_change/4',[]],['fun','merle','gen_server2:system_continue/3',[]],['fun','merle','gen_server2:system_terminate/4',[]],['fun','merle','gen_server2:wake_hib/7',[]],['fun','merle','merle:add/2','Store a key/value pair if it doesnt already exist'],['fun','merle','merle:add/4',[]],['fun','merle','merle:cas/3','Store a key/value pair if possible.'],['fun','merle','merle:cas/5',[]],['fun','merle','merle:connect/0','connect to memcached with defaults.'],['fun','merle','merle:connect/2','connect to memcached.'],['fun','merle','merle:delete/1','delete a key.'],['fun','merle','merle:delete/2',[]],['fun','merle','merle:disconnect/0','disconnect from memcached.'],['fun','merle','merle:flushall/0','invalidate all existing items immediately.'],['fun','merle','merle:flushall/1','invalidate all existing items based on the expire '],['fun','merle','merle:getkey/1','retrieve value based off of key.'],['fun','merle','merle:getskey/1','retrieve value based off of key for use with cas.'],['fun','merle','merle:handle_call/3',[]],['fun','merle','merle:replace/2','Replace an existing key/value pair.'],['fun','merle','merle:replace/4',[]],['fun','merle','merle:set/2','Store a key/value pair.'],['fun','merle','merle:set/4',[]],['fun','merle','merle:stats/0','retrieve memcached stats.'],['fun','merle','merle:stats/1','retrieve memcached stats based on args.'],['fun','merle','merle:verbosity/1','set the verbosity level of the logging output.'],['fun','merle','merle:version/0','retrieve memcached version.'],['fun','merle','merle_app:start/2',[]],['fun','merle','merle_app:stop/1',[]],['fun','merle','merle_sup:init/1',[]],['fun','merle','merle_sup:start_link/0',[]],['fun','merle','priority_queue:in/2',[]],['fun','merle','priority_queue:in/3',[]],['fun','merle','priority_queue:is_empty/1',[]],['fun','merle','priority_queue:is_queue/1',[]],['fun','merle','priority_queue:join/2',[]],['fun','merle','priority_queue:len/1',[]],['fun','merle','priority_queue:new/0',[]],['fun','merle','priority_queue:out/1',[]],['fun','merle','priority_queue:to_list/1',[]]];