var index = [['app','comp50-team0','comp50-team0','[application]'],['mod','comp50-team0','building',[]],['mod','comp50-team0','chair',[]],['mod','comp50-team0','client1_start',[]],['mod','comp50-team0','client_handler',[]],['mod','comp50-team0','db',[]],['mod','comp50-team0','db_start',[]],['mod','comp50-team0','pickle',[]],['mod','comp50-team0','plists','plists is a drop-in replacement for module lists,'],['mod','comp50-team0','section',[]],['mod','comp50-team0','server_start',[]],['mod','comp50-team0','table',[]],['fun','comp50-team0','chair:chairLoop/2',[]],['fun','comp50-team0','chair:start/1',[]],['fun','comp50-team0','pickle:binary/1',[]],['fun','comp50-team0','pickle:byte/0',[]],['fun','comp50-team0','pickle:choice/2',[]],['fun','comp50-team0','pickle:int/0',[]],['fun','comp50-team0','pickle:list/2',[]],['fun','comp50-team0','pickle:long/0',[]],['fun','comp50-team0','pickle:optional/1',[]],['fun','comp50-team0','pickle:pickle/2',[]],['fun','comp50-team0','pickle:record/2',[]],['fun','comp50-team0','pickle:short/0',[]],['fun','comp50-team0','pickle:sint/0',[]],['fun','comp50-team0','pickle:slong/0',[]],['fun','comp50-team0','pickle:sshort/0',[]],['fun','comp50-team0','pickle:string/0',[]],['fun','comp50-team0','pickle:tuple/1',[]],['fun','comp50-team0','pickle:unpickle/2',[]],['fun','comp50-team0','pickle:wrap/2',[]],['fun','comp50-team0','pickle:wstring/0',[]],['fun','comp50-team0','plists:all/2','Same semantics as in module lists.'],['fun','comp50-team0','plists:all/3','Same semantics as in module lists.'],['fun','comp50-team0','plists:any/2','Same semantics as in module lists.'],['fun','comp50-team0','plists:any/3','Same semantics as in module lists.'],['fun','comp50-team0','plists:filter/2','Same semantics as in module lists.'],['fun','comp50-team0','plists:filter/3','Same semantics as in module lists.'],['fun','comp50-team0','plists:fold/3','Like below, but assumes 1 as the Malt.'],['fun','comp50-team0','plists:fold/4','Like below, but uses the Fun as the Fuse by defaul'],['fun','comp50-team0','plists:fold/5','fold is more complex when made parallel.'],['fun','comp50-team0','plists:foreach/2','Same semantics as in module lists.'],['fun','comp50-team0','plists:foreach/3','Same semantics as in module lists.'],['fun','comp50-team0','plists:map/2','Same semantics as in module lists.'],['fun','comp50-team0','plists:map/3','Same semantics as in module lists.'],['fun','comp50-team0','plists:mapreduce/2','Like below, assumes default MapMalt of 1.'],['fun','comp50-team0','plists:mapreduce/3','This is a very basic mapreduce.'],['fun','comp50-team0','plists:partition/2','Same semantics as in module lists.'],['fun','comp50-team0','plists:partition/3','Same semantics as in module lists.'],['fun','comp50-team0','plists:runmany/3','Like below, but assumes a Malt of 1, meaning each'],['fun','comp50-team0','plists:runmany/4','All of the other functions are implemented with ru'],['fun','comp50-team0','plists:sort/1','Same semantics as in module lists.'],['fun','comp50-team0','plists:sort/2','Same semantics as in module lists.'],['fun','comp50-team0','plists:sort/3','This version lets you specify your own malt for so'],['fun','comp50-team0','plists:usort/1','Same semantics as in module lists.'],['fun','comp50-team0','plists:usort/2','Same semantics as in module lists.'],['fun','comp50-team0','plists:usort/3','This version lets you specify your own malt for us']];