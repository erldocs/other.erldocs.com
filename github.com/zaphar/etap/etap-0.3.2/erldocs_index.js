var index = [['app','etap','etap','[application]'],['mod','etap','etap_application','Provide test functionality to the application and '],['mod','etap','etap_can','Provide test functionality modules.'],['mod','etap','etap_exception','Adds exception based testing to the etap suite.'],['mod','etap','etap_process','Adds process/pid testing to the etap suite.'],['mod','etap','etap_request','Provides test functionality against a specific web'],['mod','etap','etap_string','Provide testing functionality for strings.'],['mod','etap','etap_web','Provide testing functionality for web requests.'],['fun','etap','etap_application:ensure_loaded/3','Assert that an application has been loaded success'],['fun','etap','etap_application:load_ok/2','Assert that an application can be loaded successfu'],['fun','etap','etap_application:pg2_group_doesntexist/2','Assert that a pg2 group does not exists.'],['fun','etap','etap_application:pg2_group_exists/2','Assert that a pg2 group exists.'],['fun','etap','etap_application:start_ok/2','Assert that an application can be started successf'],['fun','etap','etap_can:can_ok/2','Assert that a module exports a given function.'],['fun','etap','etap_can:can_ok/3','Assert that a module exports a given function with'],['fun','etap','etap_can:has_attrib/2',[]],['fun','etap','etap_can:is_attrib/3',[]],['fun','etap','etap_can:is_behaviour/2',[]],['fun','etap','etap_can:loaded_ok/2','Assert that a module has been loaded successfully.'],['fun','etap','etap_exception:dies_ok/2','Assert that an exception is raised when running a '],['fun','etap','etap_exception:lives_ok/2','Assert that an exception is not raised when runnin'],['fun','etap','etap_exception:throws_ok/3','Assert that the exception thrown by a function mat'],['fun','etap','etap_process:is_alive/2','Assert that a given process/pid is alive.'],['fun','etap','etap_process:is_mfa/3','Assert that the current function of a pid is a giv'],['fun','etap','etap_process:is_pid/2','Assert that a given variable is a pid.'],['fun','etap','etap_request:body_has_string/2',[]],['fun','etap','etap_request:body_is/2',[]],['fun','etap','etap_request:has_rheader/1','Dertermine if a specific request header exists.'],['fun','etap','etap_request:header_is/3',[]],['fun','etap','etap_request:method/0','Access a requests method.'],['fun','etap','etap_request:rbody/0','Access the requests body.'],['fun','etap','etap_request:rheader/1','Return a specific request header.'],['fun','etap','etap_request:rheaders/0','Access a requests headers.'],['fun','etap','etap_request:status/0','Access a requests status.'],['fun','etap','etap_request:status_code/0','Access a requests status code.'],['fun','etap','etap_request:status_is/2','Assert that response status code is the given stat'],['fun','etap','etap_request:status_line/0','Access a requests status line.'],['fun','etap','etap_request:url/0','Access a requests URL.'],['fun','etap','etap_string:contains_ok/3','Assert that a string is contained in another strin'],['fun','etap','etap_string:is_before/4','Assert that a string comes before another string w'],['fun','etap','etap_web:build_request/4','Create and return a request structure.'],['fun','etap','etap_web:simple_200/2','Fetch a url and verify that it returned a 200 stat'],['fun','etap','etap_web:simple_404/2','Fetch a url and verify that it returned a 404 stat']];