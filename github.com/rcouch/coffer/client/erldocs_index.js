var index = [['app','coffer','coffer','[application]'],['app','coffer','coffer','[application]'],['mod','coffer','coffer_app',[]],['mod','coffer','coffer_http',[]],['mod','coffer','coffer_http_blob',[]],['mod','coffer','coffer_http_root',[]],['mod','coffer','coffer_http_stat','stat handler to check if some blobs exists or are '],['mod','coffer','coffer_http_storage',[]],['mod','coffer','coffer_http_storages',[]],['mod','coffer','coffer_http_util',[]],['mod','coffer','coffer_sup',[]],['fun','coffer','coffer_app:start/2',[]],['fun','coffer','coffer_app:stop/1',[]],['fun','coffer','coffer_http:dispatch_rules/0',[]],['fun','coffer','coffer_http:dispatch_rules/1',[]],['fun','coffer','coffer_http_blob:handle/2',[]],['fun','coffer','coffer_http_blob:init/3',[]],['fun','coffer','coffer_http_blob:terminate/3',[]],['fun','coffer','coffer_http_root:handle/2',[]],['fun','coffer','coffer_http_root:init/3',[]],['fun','coffer','coffer_http_root:terminate/3',[]],['fun','coffer','coffer_http_stat:handle/2',[]],['fun','coffer','coffer_http_stat:init/3',[]],['fun','coffer','coffer_http_stat:terminate/3',[]],['fun','coffer','coffer_http_storage:handle/2',[]],['fun','coffer','coffer_http_storage:init/3',[]],['fun','coffer','coffer_http_storage:terminate/3',[]],['fun','coffer','coffer_http_storages:handle/2',[]],['fun','coffer','coffer_http_storages:init/3',[]],['fun','coffer','coffer_http_storages:terminate/3',[]],['fun','coffer','coffer_http_util:error/2',[]],['fun','coffer','coffer_http_util:error/3',[]],['fun','coffer','coffer_http_util:error/4',[]],['fun','coffer','coffer_http_util:maybe_prettify_json/2',[]],['fun','coffer','coffer_http_util:not_allowed/2',[]],['fun','coffer','coffer_http_util:not_found/1',[]],['fun','coffer','coffer_http_util:ok/1',[]],['fun','coffer','coffer_http_util:ok/2',[]],['fun','coffer','coffer_http_util:to_json/2',[]],['fun','coffer','coffer_sup:init/1',[]],['fun','coffer','coffer_sup:start_link/0',[]],['app','coffer_blobserver','coffer_blobserver','[application]'],['mod','coffer_blobserver','coffer_blobserver',[]],['mod','coffer_blobserver','coffer_blobserver_app',[]],['mod','coffer_blobserver','coffer_blobserver_localdisk',[]],['mod','coffer_blobserver','coffer_blobserver_sup',[]],['fun','coffer_blobserver','coffer_blobserver:all_storages/0','return the sorted list of storages.'],['fun','coffer_blobserver','coffer_blobserver:attach/3',[]],['fun','coffer_blobserver','coffer_blobserver:code_change/3',[]],['fun','coffer_blobserver','coffer_blobserver:delete_blob/2',[]],['fun','coffer_blobserver','coffer_blobserver:detach/1',[]],['fun','coffer_blobserver','coffer_blobserver:enumerate/1',[]],['fun','coffer_blobserver','coffer_blobserver:fetch_blob/2',[]],['fun','coffer_blobserver','coffer_blobserver:get_storage/1','return latest state of the storage.'],['fun','coffer_blobserver','coffer_blobserver:handle_call/3',[]],['fun','coffer_blobserver','coffer_blobserver:handle_cast/2',[]],['fun','coffer_blobserver','coffer_blobserver:handle_info/2',[]],['fun','coffer_blobserver','coffer_blobserver:init/1',[]],['fun','coffer_blobserver','coffer_blobserver:is_blob/2',[]],['fun','coffer_blobserver','coffer_blobserver:receive_blob/3',[]],['fun','coffer_blobserver','coffer_blobserver:start_link/0',[]],['fun','coffer_blobserver','coffer_blobserver:stat/2',[]],['fun','coffer_blobserver','coffer_blobserver:terminate/2',[]],['fun','coffer_blobserver','coffer_blobserver:update/2','udpate a storage state with the latest state.'],['fun','coffer_blobserver','coffer_blobserver_app:start/2',[]],['fun','coffer_blobserver','coffer_blobserver_app:stop/1',[]],['fun','coffer_blobserver','coffer_blobserver_localdisk:delete_blob/2',[]],['fun','coffer_blobserver','coffer_blobserver_localdisk:enumerate/1',[]],['fun','coffer_blobserver','coffer_blobserver_localdisk:fetch_blob/2',[]],['fun','coffer_blobserver','coffer_blobserver_localdisk:fetch_blob/3',[]],['fun','coffer_blobserver','coffer_blobserver_localdisk:init/2',[]],['fun','coffer_blobserver','coffer_blobserver_localdisk:is_blob/2',[]],['fun','coffer_blobserver','coffer_blobserver_localdisk:receive_blob/3',[]],['fun','coffer_blobserver','coffer_blobserver_localdisk:stat/2',[]],['fun','coffer_blobserver','coffer_blobserver_localdisk:terminate/1',[]],['fun','coffer_blobserver','coffer_blobserver_sup:init/1',[]],['fun','coffer_blobserver','coffer_blobserver_sup:start_link/0',[]],['app','coffer_client','coffer_client','[application]'],['mod','coffer_client','coffer_client',[]],['mod','coffer_client','coffer_client_app',[]],['mod','coffer_client','coffer_client_enumerate','JSX callback module to handle blobs list and parse'],['mod','coffer_client','coffer_client_sup',[]],['fun','coffer_client','coffer_client:close/1','close a connection to a storage and stop the pool'],['fun','coffer_client','coffer_client:enumerate/1','enumerate blobs on the remote.'],['fun','coffer_client','coffer_client:enumerate/2',[]],['fun','coffer_client','coffer_client:enumerate_fun/1',[]],['fun','coffer_client','coffer_client:fetch/2','fetch a blob from the storage, return a {ReaderFun'],['fun','coffer_client','coffer_client:is_exists/2','test if a blob is already available on the storage'],['fun','coffer_client','coffer_client:open/1','open a connection to a storage, the url given is t'],['fun','coffer_client','coffer_client:open/2','same as above but with connections options.'],['fun','coffer_client','coffer_client:reader_fun/1',[]],['fun','coffer_client','coffer_client:start/0','Start the coffer_client application.'],['fun','coffer_client','coffer_client:stop/0','Stop the coffer_client application.'],['fun','coffer_client','coffer_client:upload/1','upload a blob to the storage, refurn a writer fun.'],['fun','coffer_client','coffer_client:upload_fun/2',[]],['fun','coffer_client','coffer_client_app:start/2',[]],['fun','coffer_client','coffer_client_app:stop/1',[]],['fun','coffer_client','coffer_client_enumerate:handle_event/2',[]],['fun','coffer_client','coffer_client_enumerate:init/1',[]],['fun','coffer_client','coffer_client_enumerate:wait_blob/2',[]],['fun','coffer_client','coffer_client_enumerate:wait_blobref/2',[]],['fun','coffer_client','coffer_client_enumerate:wait_blobs/2',[]],['fun','coffer_client','coffer_client_enumerate:wait_list/2',[]],['fun','coffer_client','coffer_client_enumerate:wait_size/2',[]],['fun','coffer_client','coffer_client_sup:init/1',[]],['fun','coffer_client','coffer_client_sup:start_link/0',[]],['app','coffer_common','coffer_common','[application]'],['mod','coffer_common','coffer_blob',[]],['mod','coffer_common','coffer_blob_tests',[]],['mod','coffer_common','coffer_config',[]],['mod','coffer_common','coffer_deps',[]],['mod','coffer_common','coffer_util',[]],['mod','coffer_common','coffer_util_tests',[]],['fun','coffer_common','coffer_blob:blob_path/2',[]],['fun','coffer_common','coffer_blob:blob_regexp/0',[]],['fun','coffer_common','coffer_blob:from_path/2',[]],['fun','coffer_common','coffer_blob:parse_blobref/1',[]],['fun','coffer_common','coffer_blob:validate_blobref/1',[]],['fun','coffer_common','coffer_config:get_config/1','return a config value.'],['fun','coffer_common','coffer_config:get_config/2','return a config value.'],['fun','coffer_common','coffer_config:http_env/0',[]],['fun','coffer_common','coffer_config:index_scheme/0','return all supported index scheme.'],['fun','coffer_common','coffer_config:is_ssl/0',[]],['fun','coffer_common','coffer_config:parse_address/1',[]],['fun','coffer_common','coffer_config:parse_uri/2','parse a storage or index uri.'],['fun','coffer_common','coffer_config:ssl_options/0',[]],['fun','coffer_common','coffer_config:storage_scheme/0','return all supported storage scheme.'],['fun','coffer_common','coffer_deps:deps_on_path/0','List of project dependencies on the path.'],['fun','coffer_common','coffer_deps:ensure/0','Ensure that the ebin and include paths for depende'],['fun','coffer_common','coffer_deps:ensure/1','Ensure that all ebin and include paths for depende'],['fun','coffer_common','coffer_deps:get_base_dir/0','Return the application directory for this applicat'],['fun','coffer_common','coffer_deps:get_base_dir/1','Return the application directory for Module.'],['fun','coffer_common','coffer_deps:local_path/1','Return an application-relative directory for this '],['fun','coffer_common','coffer_deps:local_path/1','Return an application-relative directory from Modu'],['fun','coffer_common','coffer_deps:new_siblings/1','Find new siblings paths relative to Module that ar'],['fun','coffer_common','coffer_util:ensure_deps_started/1',[]],['fun','coffer_common','coffer_util:gettempdir/0','Get a usable temporary directory using the first o'],['fun','coffer_common','coffer_util:propmerge/2','Update a proplist with values of the second.'],['fun','coffer_common','coffer_util:propmerge/3','merge 2 proplists.'],['fun','coffer_common','coffer_util:require/1','Start the given applications if they were not alre'],['fun','coffer_common','coffer_util:to_binary/1',[]]];