var index = [['app','refactorerl','refactorerl','[application]'],['mod','refactorerl','binding','  This module implements the recovering of bindin'],['mod','refactorerl','create_nodes','The module creates nodes directly into the databas'],['mod','refactorerl','d_client','  This module provides an interface for distel.'],['mod','refactorerl','db_init','The module constructs the database, it can build u'],['mod','refactorerl','delete_nodes','The module deletes nodes directly from the databas'],['mod','refactorerl','distel',[]],['mod','refactorerl','distel_ie',[]],['mod','refactorerl','erl_syntax_db','This module implements a great deal of the erl_syn'],['mod','refactorerl','fdoc',[]],['mod','refactorerl','graph_printer',[]],['mod','refactorerl','into_db','The modules main function is to put the abstract '],['mod','refactorerl','mysql',[]],['mod','refactorerl','mysql_auth',[]],['mod','refactorerl','mysql_conn',[]],['mod','refactorerl','mysql_recv',[]],['mod','refactorerl','out_from_db','  This module creates the AST from the modules in'],['mod','refactorerl','refac_checks','This is a package with various useful library func'],['mod','refactorerl','refac_common','This is a package with various useful library func'],['mod','refactorerl','refac_extract_fun','  This module implements the extract function ref'],['mod','refactorerl','refac_merge_subexpr','  This module implements the refactoring merge su'],['mod','refactorerl','refac_ren_fun','  This module implements the rename function refa'],['mod','refactorerl','refac_ren_var','  This module implements the rename variable refa'],['mod','refactorerl','refac_rename','This module implements renaming.'],['mod','refactorerl','refac_reorder_funpar','  This module implements the eliminate variable r'],['mod','refactorerl','refac_superv','  An application and supervisor module to start a'],['mod','refactorerl','refac_tuple_funpar','  This module implements the tuple funpar refacto'],['mod','refactorerl','refac_tuple_to_record','  This module implements the tuple to record refa'],['mod','refactorerl','refac_var_elim','  This module implements the eliminate variable r'],['mod','refactorerl','refactor','This is an interface package to the database.'],['mod','refactorerl','refactor_db','Gen_server module to handle database connection, q'],['fun','refactorerl','binding:get_binding_occurrence_candidates/1','  Returns the list of binding occurrence candidat'],['fun','refactorerl','create_nodes:attach_subtree_to_node/1','  Attaches the element to a new root, after a spe'],['fun','refactorerl','create_nodes:connect_fun_call/1','  Connects the function call (MId2, Id) to the ta'],['fun','refactorerl','create_nodes:connect_variables/1','  Connects the function call (MId2, Id) to the ta'],['fun','refactorerl','create_nodes:conv_from_ast_to_id/1','  Converts the tree node to database id.'],['fun','refactorerl','create_nodes:create_application/1','  Creates a new application into the database, if'],['fun','refactorerl','create_nodes:create_application/1','  Creates a new application into the database, if'],['fun','refactorerl','create_nodes:create_arity_qualifier/1','  Creates a new arity qualifier into the database'],['fun','refactorerl','create_nodes:create_arity_qualifier/1','  Creates a new arity qualifier into the database'],['fun','refactorerl','create_nodes:create_atom/1','  Creates a new atom into the database, if the ne'],['fun','refactorerl','create_nodes:create_atom/1','  Creates a new atom into the database, if the ne'],['fun','refactorerl','create_nodes:create_attribute/1','  Creates a new attribute into the database, if t'],['fun','refactorerl','create_nodes:create_attribute/1','  Creates a new attribute into the database, if t'],['fun','refactorerl','create_nodes:create_binary/1','  Creates a new binary into the database, if the '],['fun','refactorerl','create_nodes:create_binary/1','  Creates a new binary into the database, if the '],['fun','refactorerl','create_nodes:create_binary_field/1','  Creates a new binary field into the database, i'],['fun','refactorerl','create_nodes:create_binary_field/1','  Creates a new binary field into the database, i'],['fun','refactorerl','create_nodes:create_block_expr/1','  Creates a new block expression into the databas'],['fun','refactorerl','create_nodes:create_block_expr/1','  Creates a new block expression into the databas'],['fun','refactorerl','create_nodes:create_case_expr/1','  Creates a new case expression into the database'],['fun','refactorerl','create_nodes:create_case_expr/1','  Creates a new case expression into the database'],['fun','refactorerl','create_nodes:create_catch_expr/1','  Creates a new catch expression into the databas'],['fun','refactorerl','create_nodes:create_catch_expr/1','  Creates a new catch expression into the databas'],['fun','refactorerl','create_nodes:create_char/1','  Creates a new char into the database, if the ne'],['fun','refactorerl','create_nodes:create_char/1','  Creates a new char into the database, if the ne'],['fun','refactorerl','create_nodes:create_class_qualifier/1','  Creates a new class qualifier into the database'],['fun','refactorerl','create_nodes:create_class_qualifier/1','  Creates a new class qualifier into the database'],['fun','refactorerl','create_nodes:create_clause/1','  Creates a new clause into the database, if the '],['fun','refactorerl','create_nodes:create_clause/1','  Creates a new clause into the database, if the '],['fun','refactorerl','create_nodes:create_comment/1','  Creates a new comment into the database, if the'],['fun','refactorerl','create_nodes:create_comment/1','  Creates a new comment into the database, if the'],['fun','refactorerl','create_nodes:create_cond_expr/1','  Creates a new condition expression into the dat'],['fun','refactorerl','create_nodes:create_cond_expr/1','  Creates a new condition expression into the dat'],['fun','refactorerl','create_nodes:create_conjunction/1','  Creates a new conjunction into the database, if'],['fun','refactorerl','create_nodes:create_conjunction/1','  Creates a new conjunction into the database, if'],['fun','refactorerl','create_nodes:create_disjunction/1','  Creates a new disjunction into the database, if'],['fun','refactorerl','create_nodes:create_disjunction/1','  Creates a new disjunction into the database, if'],['fun','refactorerl','create_nodes:create_eof_marker/1','  Creates a new eof marker into the database, if '],['fun','refactorerl','create_nodes:create_eof_marker/1','  Creates a new eof marker into the database, if '],['fun','refactorerl','create_nodes:create_float/1','  Creates a new float into the database, if the n'],['fun','refactorerl','create_nodes:create_float/1','  Creates a new float into the database, if the n'],['fun','refactorerl','create_nodes:create_form_list/1','  Creates a new form list into the database, if t'],['fun','refactorerl','create_nodes:create_form_list/1','  Creates a new form list into the database, if t'],['fun','refactorerl','create_nodes:create_fresh_variable/1','  Creates a new unique variable name with a strin'],['fun','refactorerl','create_nodes:create_fun_expr/1','  Creates a new fun expression into the database,'],['fun','refactorerl','create_nodes:create_fun_expr/1','  Creates a new fun expression into the database,'],['fun','refactorerl','create_nodes:create_function/1','  Creates a new function into the database, if th'],['fun','refactorerl','create_nodes:create_function/1','  Creates a new function into the database, if th'],['fun','refactorerl','create_nodes:create_generator/1','  Creates a new generator into the database, if t'],['fun','refactorerl','create_nodes:create_generator/1','  Creates a new generator into the database, if t'],['fun','refactorerl','create_nodes:create_if_expr/1','  Creates a new if expression into the database, '],['fun','refactorerl','create_nodes:create_if_expr/1','  Creates a new if expression into the database, '],['fun','refactorerl','create_nodes:create_implicit_fun/1','  Creates a new implicit fun into the database, i'],['fun','refactorerl','create_nodes:create_implicit_fun/1','  Creates a new implicit fun into the database, i'],['fun','refactorerl','create_nodes:create_infix_expr/1','  Creates a new infix expression into the databas'],['fun','refactorerl','create_nodes:create_infix_expr/1','  Creates a new infix expression into the databas'],['fun','refactorerl','create_nodes:create_integer/1','  Creates a new integer into the database, if the'],['fun','refactorerl','create_nodes:create_integer/1','  Creates a new integer into the database, if the'],['fun','refactorerl','create_nodes:create_list/1','  Creates a new list into the database, if the ne'],['fun','refactorerl','create_nodes:create_list/1','  Creates a new list into the database, if the ne'],['fun','refactorerl','create_nodes:create_list_comp/1','  Creates a new list comprehension into the datab'],['fun','refactorerl','create_nodes:create_list_comp/1','  Creates a new list comprehension into the datab'],['fun','refactorerl','create_nodes:create_macro/1','  Creates a new macro into the database, if the n'],['fun','refactorerl','create_nodes:create_macro/1','  Creates a new macro into the database, if the n'],['fun','refactorerl','create_nodes:create_match_expr/1','  Creates a new match expression into the databas'],['fun','refactorerl','create_nodes:create_match_expr/1','  Creates a new match expression into the databas'],['fun','refactorerl','create_nodes:create_module_qualifier/1','  Creates a new module qualifier into the databas'],['fun','refactorerl','create_nodes:create_module_qualifier/1','  Creates a new module qualifier into the databas'],['fun','refactorerl','create_nodes:create_nil/1','  Creates a new nil into the database, if the new'],['fun','refactorerl','create_nodes:create_nil/1','  Creates a new nil into the database, if the new'],['fun','refactorerl','create_nodes:create_operator/1','  Creates a new operator into the database, if th'],['fun','refactorerl','create_nodes:create_operator/1','  Creates a new operator into the database, if th'],['fun','refactorerl','create_nodes:create_parentheses/1','  Creates a new parentheses into the database, if'],['fun','refactorerl','create_nodes:create_parentheses/1','  Creates a new parentheses into the database, if'],['fun','refactorerl','create_nodes:create_prefix_expr/1','  Creates a new prefix expression into the databa'],['fun','refactorerl','create_nodes:create_prefix_expr/1','  Creates a new prefix expression into the databa'],['fun','refactorerl','create_nodes:create_qualified_name/1','  Creates a new qualified name into the database,'],['fun','refactorerl','create_nodes:create_qualified_name/1','  Creates a new qualified name into the database,'],['fun','refactorerl','create_nodes:create_query_expr/1','  Creates a new query expression into the databas'],['fun','refactorerl','create_nodes:create_query_expr/1','  Creates a new query expression into the databas'],['fun','refactorerl','create_nodes:create_receive_expr/1','  Creates a new receive expression into the datab'],['fun','refactorerl','create_nodes:create_receive_expr/1','  Creates a new receive expression into the datab'],['fun','refactorerl','create_nodes:create_record_access/1','  Creates a new record access into the database, '],['fun','refactorerl','create_nodes:create_record_access/1','  Creates a new record access into the database, '],['fun','refactorerl','create_nodes:create_record_expr/1','  Creates a new record expression into the databa'],['fun','refactorerl','create_nodes:create_record_expr/1','  Creates a new record expression into the databa'],['fun','refactorerl','create_nodes:create_record_field/1','  Creates a new record field into the database, i'],['fun','refactorerl','create_nodes:create_record_field/1','  Creates a new record field into the database, i'],['fun','refactorerl','create_nodes:create_record_index_expr/1','  Creates a new record index expression into the '],['fun','refactorerl','create_nodes:create_record_index_expr/1','  Creates a new record index expression into the '],['fun','refactorerl','create_nodes:create_rule/1','  Creates a new rule into the database, if the ne'],['fun','refactorerl','create_nodes:create_rule/1','  Creates a new rule into the database, if the ne'],['fun','refactorerl','create_nodes:create_scope/1','  Creates a new scope within the given scope.'],['fun','refactorerl','create_nodes:create_size_qualifier/1','  Creates a new size qualifier into the database,'],['fun','refactorerl','create_nodes:create_size_qualifier/1','  Creates a new size qualifier into the database,'],['fun','refactorerl','create_nodes:create_string/1','  Creates a new string into the database, if the '],['fun','refactorerl','create_nodes:create_string/1','  Creates a new string into the database, if the '],['fun','refactorerl','create_nodes:create_text/1','  Creates a new text into the database, if the ne'],['fun','refactorerl','create_nodes:create_text/1','  Creates a new text into the database, if the ne'],['fun','refactorerl','create_nodes:create_try_expr/1','  Creates a new try expression into the database,'],['fun','refactorerl','create_nodes:create_try_expr/1','  Creates a new try expression into the database,'],['fun','refactorerl','create_nodes:create_tuple/1','  Creates a new tuple into the database, if the n'],['fun','refactorerl','create_nodes:create_tuple/1','  Creates a new tuple into the database, if the n'],['fun','refactorerl','create_nodes:create_underscore/1','  Creates a new underscore into the database, if '],['fun','refactorerl','create_nodes:create_underscore/1','  Creates a new underscore into the database, if '],['fun','refactorerl','create_nodes:create_variable/1','  Creates a new variable into the database, if th'],['fun','refactorerl','create_nodes:create_variable/1','  Creates a new variable into the database, if th'],['fun','refactorerl','create_nodes:create_variables/1','  Creates a new variables into the database, if t'],['fun','refactorerl','create_nodes:init_position/1','  Inits the positions of the identifier(s in the '],['fun','refactorerl','create_nodes:init_scope/1','  Inits the scopes of the identifier(s in the lis'],['fun','refactorerl','create_nodes:move_node/1','  Changes a node id.'],['fun','refactorerl','d_client:check_out/1','  Gets the given module from the refactor databas'],['fun','refactorerl','d_client:db_init/0','  Initializes the refactor database.'],['fun','refactorerl','d_client:db_tofrom/1','  Puts the given module into the refactor databas'],['fun','refactorerl','d_client:extract_function/1','  Performs the extract function on the given modu'],['fun','refactorerl','d_client:merge_subexpression/1','  Performs the merge subexpression refactoring on'],['fun','refactorerl','d_client:rename/1','  General rename: variable or function.'],['fun','refactorerl','d_client:rename_function/1','  Performs the rename function refactoring on the'],['fun','refactorerl','d_client:rename_variable/1','  Performs the rename variable refactoring on the'],['fun','refactorerl','d_client:reorder_funpar/1','  Performs the rename variable refactoring on the'],['fun','refactorerl','d_client:tuple_funpar/1','  Performs the rename variable refactoring on the'],['fun','refactorerl','d_client:tuple_to_record/1','  Performs the extract function on the given modu'],['fun','refactorerl','d_client:var_elim/1','  Performs the eliminate variable refactoring on '],['fun','refactorerl','db_init:init/0','  The function creates the database structure for'],['fun','refactorerl','delete_nodes:delete_arity_qualifier/1','  Deletes the current arity qualifier from the da'],['fun','refactorerl','delete_nodes:delete_atom/1','  Deletes the current atom from the database.'],['fun','refactorerl','delete_nodes:delete_implicit_fun/1','  Deletes the current implicit fun from the datab'],['fun','refactorerl','delete_nodes:delete_integer/1','  Deletes the current integer from the database.'],['fun','refactorerl','delete_nodes:delete_module_qualifier/1','  Deletes the current module qualifier from the d'],['fun','refactorerl','delete_nodes:delete_node/1','  Deletes the current element from the database.'],['fun','refactorerl','delete_nodes:detach_node/1','  Detaches the element from its root.'],['fun','refactorerl','distel:apropos/1',[]],['fun','refactorerl','distel:apropos/2',[]],['fun','refactorerl','distel:break_add/2',[]],['fun','refactorerl','distel:break_delete/2',[]],['fun','refactorerl','distel:break_restore/1',[]],['fun','refactorerl','distel:break_toggle/2',[]],['fun','refactorerl','distel:debug_add/1',[]],['fun','refactorerl','distel:debug_subscribe/1',[]],['fun','refactorerl','distel:debug_toggle/2',[]],['fun','refactorerl','distel:describe/3',[]],['fun','refactorerl','distel:describe/4',[]],['fun','refactorerl','distel:eval_expression/1',[]],['fun','refactorerl','distel:find_source/1',[]],['fun','refactorerl','distel:fprof/3',[]],['fun','refactorerl','distel:fprof_analyse/1',[]],['fun','refactorerl','distel:free_vars/1',[]],['fun','refactorerl','distel:free_vars/1','Equivalent to free_vars(Text, 1).'],['fun','refactorerl','distel:functions/2',[]],['fun','refactorerl','distel:gl_proxy/1',[]],['fun','refactorerl','distel:modules/1',[]],['fun','refactorerl','distel:null_gl/0',[]],['fun','refactorerl','distel:process_list/0',[]],['fun','refactorerl','distel:process_summary/1',[]],['fun','refactorerl','distel:process_summary_and_trace/2',[]],['fun','refactorerl','distel:reload_module/2',[]],['fun','refactorerl','distel:reload_modules/0',[]],['fun','refactorerl','distel:rpc_entry/3',[]],['fun','refactorerl','distel:tracer_init/2',[]],['fun','refactorerl','distel_ie:ensure_registered/0',[]],['fun','refactorerl','distel_ie:evaluate/2',[]],['fun','refactorerl','distel_ie:init/1',[]],['fun','refactorerl','distel_ie:loop/1',[]],['fun','refactorerl','distel_ie:start/0',[]],['fun','refactorerl','distel_ie:start/1',[]],['fun','refactorerl','distel_ie:test1/0',[]],['fun','refactorerl','distel_ie:test2/0',[]],['fun','refactorerl','distel_ie:test3/0',[]],['fun','refactorerl','distel_ie:test4/0',[]],['fun','refactorerl','distel_ie:test5/0',[]],['fun','refactorerl','erl_syntax_db:application_arguments/1','  Returns the application nodes argument childre'],['fun','refactorerl','erl_syntax_db:application_operator/1','  Returns the  application nodes  operator child'],['fun','refactorerl','erl_syntax_db:arity_qualifier_argument/1','  Returns the arity_qualifier nodes argument chi'],['fun','refactorerl','erl_syntax_db:arity_qualifier_body/1','  Returns the arity_qualifier nodes body child.'],['fun','refactorerl','erl_syntax_db:atom_name/1','  Returns the atom nodes name child.'],['fun','refactorerl','erl_syntax_db:attribute_arguments/1','  Returns the attribute nodes argument children.'],['fun','refactorerl','erl_syntax_db:attribute_name/1','  Returns the attribute nodes name child.'],['fun','refactorerl','erl_syntax_db:binary_field_body/1','  Returns the binary_field nodes body child.'],['fun','refactorerl','erl_syntax_db:binary_field_types/1','  Returns the binary_field nodes type children.'],['fun','refactorerl','erl_syntax_db:binary_fields/1','  Returns the binary nodes field children.'],['fun','refactorerl','erl_syntax_db:block_expr_body/1','  Returns the block_expr nodes body children.'],['fun','refactorerl','erl_syntax_db:case_expr_argument/1','  Returns the  nodes  child/children.'],['fun','refactorerl','erl_syntax_db:case_expr_clauses/1','  Returns the  case_expr nodes clause children.'],['fun','refactorerl','erl_syntax_db:catch_expr_body/1','  Returns the catch_expr nodes body child.'],['fun','refactorerl','erl_syntax_db:char_value/1','  Returns the char nodes value.'],['fun','refactorerl','erl_syntax_db:class_qualifier_argument/1','  Returns the class_qualifier nodes argument chi'],['fun','refactorerl','erl_syntax_db:class_qualifier_body/1','  Returns the class_qualifier nodes body child.'],['fun','refactorerl','erl_syntax_db:clause_body/1','  Returns the clause nodes body children.'],['fun','refactorerl','erl_syntax_db:clause_guard/1','  Returns the clause nodes guard guard child.'],['fun','refactorerl','erl_syntax_db:clause_patterns/1','  Returns the clause nodes pattern children.'],['fun','refactorerl','erl_syntax_db:comment_padding/1','  Returns the comment nodes padding value.'],['fun','refactorerl','erl_syntax_db:comment_text/1','  Returns the comment nodes text.'],['fun','refactorerl','erl_syntax_db:cond_expr_clauses/1','  Returns the  nodes  child/children.'],['fun','refactorerl','erl_syntax_db:conjunction_body/1','  Returns the conjunction nodes body children.'],['fun','refactorerl','erl_syntax_db:disjunction_body/1','  Returns the disjunction nodes body children.'],['fun','refactorerl','erl_syntax_db:float_value/1','  Returns the float nodes value.'],['fun','refactorerl','erl_syntax_db:form_list_elements/1','  Returns the form_list nodes children.'],['fun','refactorerl','erl_syntax_db:fun_expr_clauses/1','  Returns the fun_expr nodes clause children.'],['fun','refactorerl','erl_syntax_db:function_clauses/1','  Returns the function nodes clause children.'],['fun','refactorerl','erl_syntax_db:function_name/1','  Returns the function nodes name child.'],['fun','refactorerl','erl_syntax_db:generator_body/1','  Returns the generator nodes body child.'],['fun','refactorerl','erl_syntax_db:generator_pattern/1','  Returns the generator nodes pattern child.'],['fun','refactorerl','erl_syntax_db:if_expr_clauses/1','  Returns the if_expr nodes clause children.'],['fun','refactorerl','erl_syntax_db:implicit_fun_name/1','  Returns the implicit_fun nodes name child.'],['fun','refactorerl','erl_syntax_db:infix_expr_left/1','  Returns the infix_expr nodes left child.'],['fun','refactorerl','erl_syntax_db:infix_expr_operator/1','  Returns the infix_expr nodes operator child.'],['fun','refactorerl','erl_syntax_db:infix_expr_right/1','  Returns the infix_expr nodes right child.'],['fun','refactorerl','erl_syntax_db:integer_value/1','  Returns the integer nodes value.'],['fun','refactorerl','erl_syntax_db:list_comp_body/1','  Returns the list_comp nodes body children.'],['fun','refactorerl','erl_syntax_db:list_comp_template/1','  Returns the list_comp nodes template child.'],['fun','refactorerl','erl_syntax_db:list_prefix/1','  Returns the list nodes prefix children.'],['fun','refactorerl','erl_syntax_db:list_suffix/1','  Returns the list nodes suffix child.'],['fun','refactorerl','erl_syntax_db:macro_arguments/1','  Returns the macro nodes argument children.'],['fun','refactorerl','erl_syntax_db:macro_name/1','  Returns the macro nodes name child.'],['fun','refactorerl','erl_syntax_db:match_expr_body/1','  Returns the match_expr nodes body child.'],['fun','refactorerl','erl_syntax_db:match_expr_pattern/1','  Returns the match_expr nodes pattern child.'],['fun','refactorerl','erl_syntax_db:module_qualifier_argument/1','  Returns the module_qualifier nodes argument ch'],['fun','refactorerl','erl_syntax_db:module_qualifier_body/1','  Returns the module_qualifier nodes body child.'],['fun','refactorerl','erl_syntax_db:operator_literal/1','  Returns the operator nodes  value.'],['fun','refactorerl','erl_syntax_db:parentheses_body/1','  Returns the parentheses nodes body child.'],['fun','refactorerl','erl_syntax_db:prefix_expr_argument/1','  Returns the prefix_expr nodes argument child.'],['fun','refactorerl','erl_syntax_db:prefix_expr_operator/1','  Returns the prefix_expr nodes operator child.'],['fun','refactorerl','erl_syntax_db:qualified_name_segments/1','  Returns the qualified_name nodes segment child'],['fun','refactorerl','erl_syntax_db:query_expr_body/1','  Returns the query_expr nodes body child.'],['fun','refactorerl','erl_syntax_db:receive_expr_action/1','  Returns the receive_expr nodes action children'],['fun','refactorerl','erl_syntax_db:receive_expr_clauses/1','  Returns the receive_expr nodes clause children'],['fun','refactorerl','erl_syntax_db:receive_expr_timeout/1','  Returns the receive_expr nodes timeout child.'],['fun','refactorerl','erl_syntax_db:record_access_argument/1','  Returns the record_access nodes argument child'],['fun','refactorerl','erl_syntax_db:record_access_field/1','  Returns the record_access nodes field child.'],['fun','refactorerl','erl_syntax_db:record_access_type/1','  Returns the record_access nodes type child.'],['fun','refactorerl','erl_syntax_db:record_expr_argument/1','  Returns the record_expr nodes argument child.'],['fun','refactorerl','erl_syntax_db:record_expr_fields/1','  Returns the record_expr nodes field children.'],['fun','refactorerl','erl_syntax_db:record_expr_type/1','  Returns the record_expr nodes type child.'],['fun','refactorerl','erl_syntax_db:record_field_name/1','  Returns the record_field nodes name child.'],['fun','refactorerl','erl_syntax_db:record_field_value/1','  Returns the record_field nodes value child.'],['fun','refactorerl','erl_syntax_db:record_index_expr_field/1','  Returns the record_index_expr nodes field chil'],['fun','refactorerl','erl_syntax_db:record_index_expr_type/1','  Returns the record_index_expr nodes type child'],['fun','refactorerl','erl_syntax_db:rule_clauses/1','  Returns the rule nodes clause children.'],['fun','refactorerl','erl_syntax_db:rule_name/1','  Returns the rule nodes name child.'],['fun','refactorerl','erl_syntax_db:size_qualifier_argument/1','  Returns the size_qualifier nodes argument chil'],['fun','refactorerl','erl_syntax_db:size_qualifier_body/1','  Returns the size_qualifier nodes body child.'],['fun','refactorerl','erl_syntax_db:string_value/1','  Returns the string nodes  value.'],['fun','refactorerl','erl_syntax_db:subtrees/1','  Returns the nodes children sorted by type.'],['fun','refactorerl','erl_syntax_db:text_string/1','  Returns the text nodes  value,.'],['fun','refactorerl','erl_syntax_db:try_expr_after/1','  Returns the try_expr nodes after children.'],['fun','refactorerl','erl_syntax_db:try_expr_body/1','  Returns the try_expr nodes body children.'],['fun','refactorerl','erl_syntax_db:try_expr_clauses/1','  Returns the try_expr nodes clauses children.'],['fun','refactorerl','erl_syntax_db:try_expr_handlers/1','  Returns the try_expr nodes handler children.'],['fun','refactorerl','erl_syntax_db:tuple_elements/1','  Returns the tuple nodes element children.'],['fun','refactorerl','erl_syntax_db:type/1','  Returns the nodes type.'],['fun','refactorerl','erl_syntax_db:untuple/1','  Untuple the lists elements.'],['fun','refactorerl','erl_syntax_db:variable_literal/1','  Returns the variable nodes  value.'],['fun','refactorerl','fdoc:apropos/1',[]],['fun','refactorerl','fdoc:describe/1',[]],['fun','refactorerl','fdoc:describe/2',[]],['fun','refactorerl','fdoc:describe/3',[]],['fun','refactorerl','fdoc:describe2/1',[]],['fun','refactorerl','fdoc:describe2/2',[]],['fun','refactorerl','fdoc:describe2/3',[]],['fun','refactorerl','fdoc:describe_file/1',[]],['fun','refactorerl','fdoc:description/1',[]],['fun','refactorerl','fdoc:description/2',[]],['fun','refactorerl','fdoc:description/3',[]],['fun','refactorerl','fdoc:file/1',[]],['fun','refactorerl','fdoc:get_apropos/1',[]],['fun','refactorerl','fdoc:init/0',[]],['fun','refactorerl','fdoc:loop/0',[]],['fun','refactorerl','fdoc:stop/0',[]],['fun','refactorerl','fdoc:string/1',[]],['fun','refactorerl','graph_printer:print/4',[]],['fun','refactorerl','into_db:get_id/1','       The function returns with a unique identif'],['fun','refactorerl','into_db:increment/1','       The function produces the unique identifie'],['fun','refactorerl','into_db:parse/1','  The function parses the source file, and if the'],['fun','refactorerl','into_db:set_positions/1','	  The function updates the positions in the data'],['fun','refactorerl','mysql:asciz_binary/2',[]],['fun','refactorerl','mysql:code_change/3',[]],['fun','refactorerl','mysql:connect/7',[]],['fun','refactorerl','mysql:fetch/2',[]],['fun','refactorerl','mysql:fetch/3',[]],['fun','refactorerl','mysql:get_result_affected_rows/1',[]],['fun','refactorerl','mysql:get_result_field_info/1',[]],['fun','refactorerl','mysql:get_result_reason/1',[]],['fun','refactorerl','mysql:get_result_rows/1',[]],['fun','refactorerl','mysql:handle_call/3',[]],['fun','refactorerl','mysql:handle_cast/2',[]],['fun','refactorerl','mysql:handle_info/2',[]],['fun','refactorerl','mysql:init/1',[]],['fun','refactorerl','mysql:log/3',[]],['fun','refactorerl','mysql:log/4',[]],['fun','refactorerl','mysql:quote/1',[]],['fun','refactorerl','mysql:start_link/5',[]],['fun','refactorerl','mysql:start_link/6',[]],['fun','refactorerl','mysql:start_link/7',[]],['fun','refactorerl','mysql:terminate/2',[]],['fun','refactorerl','mysql_auth:do_new_auth/8',[]],['fun','refactorerl','mysql_auth:do_old_auth/7',[]],['fun','refactorerl','mysql_conn:do_recv/3',[]],['fun','refactorerl','mysql_conn:fetch/3',[]],['fun','refactorerl','mysql_conn:fetch/4',[]],['fun','refactorerl','mysql_conn:start/6',[]],['fun','refactorerl','mysql_conn:start_link/6',[]],['fun','refactorerl','mysql_recv:start_link/4',[]],['fun','refactorerl','out_from_db:create_code/1','  Creates the module from the data strored in the'],['fun','refactorerl','out_from_db:create_code/1','  Creates the module from the data strored in the'],['fun','refactorerl','refac_checks:check_all_var_bound_ok/1','  Checks that all variables with binding occurenc'],['fun','refactorerl','refac_checks:check_are_match_body_variables_shadowed/1','  Checks if a variable can be substitued at every'],['fun','refactorerl','refac_checks:check_expression/1','  Checks if the new variable name is legal in the'],['fun','refactorerl','refac_checks:check_for_length_overrun/1','  Checks if the given number indicates tupleing n'],['fun','refactorerl','refac_checks:check_found_expression/1','  Check if an expression was found.'],['fun','refactorerl','refac_checks:check_if_binding_is_unambiguous/1','  Checks if a variable name is bound unambiguousl'],['fun','refactorerl','refac_checks:check_if_binding_occurrence_needed/1','  Checks if a the varibles binding occurrence is'],['fun','refactorerl','refac_checks:check_if_bindings_are_unambiguous/1','  Checks if variables are bound unambiguously.'],['fun','refactorerl','refac_checks:check_if_body_doesnt_have_sideffects/1','  Checks if a body subtree does not have sideeffe'],['fun','refactorerl','refac_checks:check_if_name_exists/1','  Check if the name is already bound in the claus'],['fun','refactorerl','refac_checks:check_if_not_embedded_tuple/1','  Checks if the tuple is embedded in an other tup'],['fun','refactorerl','refac_checks:check_if_occurrence_needed/1','  Checks if a varible occurrence is needed.'],['fun','refactorerl','refac_checks:check_if_tuple/1','  Checks if the expression is a tuple.'],['fun','refactorerl','refac_checks:check_inner_name_clash/1','  Checks if the change in the arity of the functi'],['fun','refactorerl','refac_checks:check_inner_scopes_too/1','  Checks if a variable is shadowed in an inner sc'],['fun','refactorerl','refac_checks:check_is_autoimported/1','  Checks if the new function name is acceptable a'],['fun','refactorerl','refac_checks:check_is_element/1','  Checks if the selected element on the corrected'],['fun','refactorerl','refac_checks:check_is_function_clause/1','  Checks if the clause on the corrected position '],['fun','refactorerl','refac_checks:check_is_legal_body/1','  Checks the starting and ending positions delimi'],['fun','refactorerl','refac_checks:check_is_legal_function_name/1','  Checks that the function name is a legal functi'],['fun','refactorerl','refac_checks:check_is_parameter/1','  Checks if the selected element on the corrected'],['fun','refactorerl','refac_checks:check_isFunctionName/1','  Checks if the new function name is acceptable a'],['fun','refactorerl','refac_checks:check_isVariableName/1','  Checks if the new Variable name is acceptable a'],['fun','refactorerl','refac_checks:check_name_clash/1','  Checks if the change in the arity of the functi'],['fun','refactorerl','refac_checks:check_non_binding_in_match_pattern/1','  Checks if the variable name occurs in a match p'],['fun','refactorerl','refac_checks:check_not_in_head_pattern_guard_macro/1','  Checks the expression id are not a part of  a g'],['fun','refactorerl','refac_checks:check_number_error/1','  Checks if the given number is bigger then 0.'],['fun','refactorerl','refac_checks:check_orderList/1','  It checks if the produced list is a valid permu'],['fun','refactorerl','refac_checks:check_outer_name_clash/1','  Checks if the change in the arity of the functi'],['fun','refactorerl','refac_checks:check_param_number_equal_to_tuple_length/1','  Checks if the number of the given record field '],['fun','refactorerl','refac_checks:check_parameter_type/1','  Checks if the selected element on the corrected'],['fun','refactorerl','refac_checks:check_pos_error/1','  Checks if on the corrected position there is a '],['fun','refactorerl','refac_checks:check_send/1','  Checks if the expression contains a !.'],['fun','refactorerl','refac_checks:check_sideeffect/1','  Checks if a node has sideeffects.'],['fun','refactorerl','refac_checks:check_sideeffects/1','  Check if the expression has sideeffects.'],['fun','refactorerl','refac_checks:check_the_name_already_exists/1','  Checks if introducing a new function would clas'],['fun','refactorerl','refac_checks:check_the_name_is_imported/1','  Checks if introducing a new function would clas'],['fun','refactorerl','refac_checks:check_true_pos/1','  Checks if corrected position is legal.'],['fun','refactorerl','refac_checks:contains_match_expr/1','  Checks if the expression of the node contains m'],['fun','refactorerl','refac_checks:error_handler/1','  Handles error in refactorings.'],['fun','refactorerl','refac_common:check_var/1','  Returns the nodes data if its a variable.'],['fun','refactorerl','refac_common:find_expression_root_id/1','  Returns the root of the expression and the path'],['fun','refactorerl','refac_common:find_the_function/1','  Returns the functions module id and id from th'],['fun','refactorerl','refac_common:get_clause_body_nodes/1','  Returns all of the nodes in the body of the cla'],['fun','refactorerl','refac_common:get_data/1','  Returns data about the function, and about the '],['fun','refactorerl','refac_common:get_fun_calls/1','  Returns the calls of a function seperated into '],['fun','refactorerl','refac_common:get_function_definition/1','  Returns the functions module id and id from th'],['fun','refactorerl','refac_common:get_id_from_pos/1','  Returns the id of the pointed location.'],['fun','refactorerl','refac_common:get_inner_scope/1','  Returns the ScopeId scopes inner scopes.'],['fun','refactorerl','refac_common:get_lowest_id/1','  Returns the leaf node in the syntax tree from t'],['fun','refactorerl','refac_common:get_module_id/1','  Returns the modules id, if exists.'],['fun','refactorerl','refac_common:get_patternIdBody/1','  Returns the expressions root which result will'],['fun','refactorerl','refac_common:get_scope_type/1','  Returns the scopes type.'],['fun','refactorerl','refac_common:get_sideeffects/1','  Returns which occurrences have sideeffects, whi'],['fun','refactorerl','refac_common:get_sideeffects_by_parent/3',[]],['fun','refactorerl','refac_common:get_subtrees/1','  Returns all the nodes below the node and the no'],['fun','refactorerl','refac_common:get_variables/1','  Returns the variables below the node and the no'],['fun','refactorerl','refac_common:local_preorder_var/1','  Returns the given subtrees variables.'],['fun','refactorerl','refac_common:preorder/1','  Traverses the Tree in preorder mode and  calls'],['fun','refactorerl','refac_common:produce_inner_scopes/1','  Returns the ScopeIds scopes inner scopes.'],['fun','refactorerl','refac_common:warnings/0','  Checks for unsupported function calls, which ca'],['fun','refactorerl','refac_extract_fun:extract_function/1','  Performs the precondition checks and collects a'],['fun','refactorerl','refac_merge_subexpr:merge_subexpression/1','  Performs the precondition checks and the and th'],['fun','refactorerl','refac_ren_fun:rename_function/1','  Performs the precondition checks and the and th'],['fun','refactorerl','refac_ren_var:rename_variable/1','  Performs the precondition checks and the and th'],['fun','refactorerl','refac_rename:rename/1','  It chooses the appropriate renaming refactoring'],['fun','refactorerl','refac_reorder_funpar:reorder_funpar/1','  Performs the precondition checks and the and th'],['fun','refactorerl','refac_superv:init/1','  Initalizes the supervisor which will manage the'],['fun','refactorerl','refac_superv:start/2','     Starts the refactorer application.'],['fun','refactorerl','refac_superv:stop/1','     Stops the refactorer application.'],['fun','refactorerl','refac_tuple_funpar:preorder/1','  Checks if Id is a member of the Tree syntax tre'],['fun','refactorerl','refac_tuple_funpar:untuple_or_tuple_funpar/1','  Performs the precondition checks and the and th'],['fun','refactorerl','refac_tuple_to_record:tuple_to_record/1','  Performs the precondition checks and the and th'],['fun','refactorerl','refac_var_elim:eliminate_variable/1','  Performs the precondition checks and the and th'],['fun','refactorerl','refactor:add_match/1','  Creates a match from the second and third param'],['fun','refactorerl','refactor:check_if_apply_exists_in_system/0','  Checks if apply call exists in the refactoring '],['fun','refactorerl','refactor:check_if_hibernate_exists_in_system/0','  Checks if hibernate call exists in the refactor'],['fun','refactorerl','refactor:check_if_spawn_exists_in_system/0','  Checks if spawn call exists in the refactoring '],['fun','refactorerl','refactor:commit/0','  Execute a commit.'],['fun','refactorerl','refactor:connect_variable_to_first_occurrence/1','  Connects the NewId variable node to the Ids fi'],['fun','refactorerl','refactor:create_condition_list/1','  Creates a condition list from the data in the l'],['fun','refactorerl','refactor:create_condition_list/1','  Creates a condition list from the data in the l'],['fun','refactorerl','refactor:create_condition_list3/1','  Creates a condition list from the parameters.'],['fun','refactorerl','refactor:delete_application_argument_between_pos/1','  Deletes the arguments from application between '],['fun','refactorerl','refactor:delete_clause_argument_between_pos/1','  Deletes the arguments from clause between the g'],['fun','refactorerl','refactor:delete_element_from_node_type/1','  Deletes the element from node_type.'],['fun','refactorerl','refactor:delete_element_from_pos/1','  Deletes the pos of the element.'],['fun','refactorerl','refactor:delete_element_from_scope/1','  Deletes the element from node_type.'],['fun','refactorerl','refactor:delete_match_expr/1','  Deletes the match expression.'],['fun','refactorerl','refactor:delete_row/1','  Deletes one child node.'],['fun','refactorerl','refactor:drop_from_dbase/1','  Delete one module from the database.'],['fun','refactorerl','refactor:exists_in_dbase/1','  Check if File is already in the database.'],['fun','refactorerl','refactor:get_all_arity_from_the_module/1','  Returns all arities from a module in a list.'],['fun','refactorerl','refactor:get_all_deprecated_application_mid_id_and_tuple_id/1','  Returns all deprecated applications datas in m'],['fun','refactorerl','refactor:get_all_dynamic_fun_call_type/0','  Returns the type of all the dynamic calls.'],['fun','refactorerl','refactor:get_all_fun_name_and_fun_id/1','  Returns all {Name,Id,MId} tuples in module.'],['fun','refactorerl','refactor:get_all_function_id_from_the_module/1','  Returns all function id from the module in a li'],['fun','refactorerl','refactor:get_all_implicit_fun_module_id_id_name_id_and_type/1','  Returns all implicit fun datas in module.'],['fun','refactorerl','refactor:get_all_module_application_mid_id_module_name_and_fun_name/1','  Returns all module applications datas in modul'],['fun','refactorerl','refactor:get_all_simple_application_mid_id_and_name/1','  Returns all simple applications datas in modul'],['fun','refactorerl','refactor:get_application_arity_from_application_id/1','  Returns the applications arity.'],['fun','refactorerl','refactor:get_application_type_mid_id_from_fun_call_id/1','  Returns the type, module id, id of the applicat'],['fun','refactorerl','refactor:get_argument_nearest_position_and_type_from_application_id_and_pos/1','  Returns the sequential number and its id of the'],['fun','refactorerl','refactor:get_argument_nearest_position_and_type_from_clause_id_and_pos/1','  Returns the sequential number and its type of t'],['fun','refactorerl','refactor:get_argument_position_from_application_id_and_pos/1','  Returns the sequential number of the pointed ar'],['fun','refactorerl','refactor:get_argument_position_from_clause_id_and_pos/1','  Returns the sequential number of the pointed ar'],['fun','refactorerl','refactor:get_arguments_from_application_id_and_from_to_pos/1','  Returns the argument ids between the given posi'],['fun','refactorerl','refactor:get_arguments_from_clause_id_and_from_to_pos/1','  Returns the argument ids between the given posi'],['fun','refactorerl','refactor:get_arity_from_arity_id/1','  Returns value of the arity.'],['fun','refactorerl','refactor:get_arity_from_fun_id/1','  Returns arity id of the function.'],['fun','refactorerl','refactor:get_arity_qualifier_body_form_arity_qualifier_id/1','  Returns the body id (function name id or arity '],['fun','refactorerl','refactor:get_arity_qualifier_data/1','  Returns the name and arity pairs in a list from'],['fun','refactorerl','refactor:get_arity_qualifier_data_and_id/1','  Returns the name, name id and arity pairs in a '],['fun','refactorerl','refactor:get_arity_qualifier_ids_from_attribute_id/1','  Returns the arity qualifiers in a list of an at'],['fun','refactorerl','refactor:get_calls_for_this_module/1','  Get calls to the module from the system.'],['fun','refactorerl','refactor:get_clashed_var_id_from_scope_and_name/1','  Returns ids of the clashed variables inside the'],['fun','refactorerl','refactor:get_clause_argument_ids_from_scope/1','  Returns patterns of the clauses inside the scop'],['fun','refactorerl','refactor:get_clause_ids_from_fun_id/1','  Returns the clause ids of the function in a lis'],['fun','refactorerl','refactor:get_clause_mids_and_ids_from_fun_id/1','  Returns the clause ids of the function in a lis'],['fun','refactorerl','refactor:get_containing_scope_id/1','  Get the containing scope id of a scope id.'],['fun','refactorerl','refactor:get_deprecated_application_name_and_module_name_from_tuple_id/1','  Returns all deprecated applications module nam'],['fun','refactorerl','refactor:get_every_fun_call_and_type_from_fun_id/1','  Returns the functions calling datas in a list.'],['fun','refactorerl','refactor:get_every_mid/0','  Returns all module identifier from the databse '],['fun','refactorerl','refactor:get_every_occurrence_of_a_var_from_id/1','  Returns all occurrences id of the binding occu'],['fun','refactorerl','refactor:get_every_type_and_fun_call_from_fun_id/1','  Returns the type, mid, id of the call in a list'],['fun','refactorerl','refactor:get_export_list/1','  Collects the exported functions (name, arity) f'],['fun','refactorerl','refactor:get_export_list_id/1','  Collects the exported functions (body id, arity'],['fun','refactorerl','refactor:get_forbidden_name_type_from_the_name/1','  Returns the types of the forbidden functions in'],['fun','refactorerl','refactor:get_form_list_id_from_mid/1','  Get the root of the module from the module id.'],['fun','refactorerl','refactor:get_fun_expr_clause_from_fun_id/1','  Gets fun_expression clauses id from fun_express'],['fun','refactorerl','refactor:get_fun_id_from_clause_id/1','  Returns function id of the selected clause.'],['fun','refactorerl','refactor:get_fun_id_from_clause_id_function_table/1','  Returns function id of the selected clause (sco'],['fun','refactorerl','refactor:get_fun_id_from_implicit_fun_id_or_application/1','  Returns module and function id of the function '],['fun','refactorerl','refactor:get_fun_name/1','  Returns the name of the function.'],['fun','refactorerl','refactor:get_fun_name_id_from_fun_id/1','  Returns the id of the function name.'],['fun','refactorerl','refactor:get_functions/1','  Returns the functions data (name, arity) which'],['fun','refactorerl','refactor:get_id_and_type_list_of_functions_from_pos/1','  Returns the identifier, type pairs in a list, w'],['fun','refactorerl','refactor:get_id_and_type_list_of_functions_from_pos_no_implicit_fun/1','  Returns the identifier, type pairs in a list, w'],['fun','refactorerl','refactor:get_id_from_pos/1','  Returns the id of the element in the given posi'],['fun','refactorerl','refactor:get_if_not_end_of_block_expr/1','  Returns the position and the id of the block ex'],['fun','refactorerl','refactor:get_if_not_end_of_clause_body/1','  Returns the position and the id of the clause b'],['fun','refactorerl','refactor:get_if_not_end_of_receive_expr_action/1','  Returns the position and the id of the receive '],['fun','refactorerl','refactor:get_if_not_end_of_try_expr_after/1','  Returns the position and the id of the try expr'],['fun','refactorerl','refactor:get_if_not_end_of_try_expr_body/1','  Returns the position and the id of the try expr'],['fun','refactorerl','refactor:get_if_not_end_of_try_expr_handlers/1','  Returns the position and the id of the try expr'],['fun','refactorerl','refactor:get_implicit_fun_call_type_from_implicit_fun_id/1','  Returns the type of the implicit fun call.'],['fun','refactorerl','refactor:get_implicit_fun_call_type_mid_id_from_fun_call_id/1','  Returns the type, module id, id of the implicit'],['fun','refactorerl','refactor:get_import_list_ids/1','  Returns the import list ids of the module in a '],['fun','refactorerl','refactor:get_imported_functions/1','  Collects the imported functions (module name, n'],['fun','refactorerl','refactor:get_imported_functions_and_ids/1','  Collects the imported functions (module name, n'],['fun','refactorerl','refactor:get_infix_expr_oper_from_tree/1','  Returns the oper of the infix expr.'],['fun','refactorerl','refactor:get_inner_scope_ids_from_scope_and_var_id/1','  Returns ids of the inner scopes, where name cla'],['fun','refactorerl','refactor:get_inner_scope_ids_from_scope_id/1','  Returns ids of the inner scopes.'],['fun','refactorerl','refactor:get_last_match/1','  Gets the last sent pairs second parameter.'],['fun','refactorerl','refactor:get_match_expr_id_and_body_from_pattern/1','  Returns the id and body of the match expression'],['fun','refactorerl','refactor:get_match_expr_id_from_pattern_and_body_id/1','  Returns the id of the match expression.'],['fun','refactorerl','refactor:get_match_expr_patterns_from_scopes/1','  Returns the pattern ids of the match expression'],['fun','refactorerl','refactor:get_match_of/1','  Gets the match of the second parameter.'],['fun','refactorerl','refactor:get_matches_of/1','  Gets the match of the second parameter.'],['fun','refactorerl','refactor:get_max_argument_position_from_application_id/1','  Returns the last sequential number of the appli'],['fun','refactorerl','refactor:get_max_argument_position_from_clause_id/1','  Returns the last sequential number of the claus'],['fun','refactorerl','refactor:get_module_id_from_path/1','  Returns the modules id.'],['fun','refactorerl','refactor:get_module_id_from_path_if_exists/1','  Returns the modules id, if exists.'],['fun','refactorerl','refactor:get_module_ids_where_used_from_fun_id/1','  Returns the module ids in a list where the func'],['fun','refactorerl','refactor:get_module_implicit_fun_module_name_name_and_arity/1','  Returns the implicit funs data module name, fu'],['fun','refactorerl','refactor:get_module_name/1','  Returns the modules name.'],['fun','refactorerl','refactor:get_module_name_from_attribute_id/1','  Returns the modules name.'],['fun','refactorerl','refactor:get_module_name_if_exists_in_module/1','  Returns the module name, if the function is in '],['fun','refactorerl','refactor:get_module_names/0','  Returns the modules name which are in the refa'],['fun','refactorerl','refactor:get_module_qualifier_body_form_module_qualifier_id/1','  Returns the body id (function name id).'],['fun','refactorerl','refactor:get_name_and_pos_from_name_id/1','  Returns name and pos (line and column) of the e'],['fun','refactorerl','refactor:get_name_from_name_id/1','  Returns name of the element.'],['fun','refactorerl','refactor:get_needed_funs_from_dbase_cache/1','  Collect the possibly needed funs for fun call m'],['fun','refactorerl','refactor:get_nodes/1','  Gets the nodes which scope is in Scopes and typ'],['fun','refactorerl','refactor:get_outer_scope_ids_from_scope_and_var_id/1','  Returns ids of the outer scopes, where name cla'],['fun','refactorerl','refactor:get_pattern_ids/1','  Gets the clauses pattern ids.'],['fun','refactorerl','refactor:get_pattern_var_id_from_var_bid_and_scope/1','  Returns the id of the pattern variable.'],['fun','refactorerl','refactor:get_pos_from_id/1','  Returns the position (line, column) of the elem'],['fun','refactorerl','refactor:get_record_definition_ids/1','  Gets the record definitions from the module.'],['fun','refactorerl','refactor:get_record_name/1','  Gets the record definitions name.'],['fun','refactorerl','refactor:get_scope_from_id/1','  Returns the scope of the element.'],['fun','refactorerl','refactor:get_scope_visib/1','  Gets the scope visibility.'],['fun','refactorerl','refactor:get_shadows_scope_and_bid_from_var_id/1','  Returns scope and binding occurrrence ids of th'],['fun','refactorerl','refactor:get_simple_implicit_fun_name_and_arity/1','  Returns the simple implicit funs data.'],['fun','refactorerl','refactor:get_true_pos_from_pointed_pos/1','  Returns the position of the element which is st'],['fun','refactorerl','refactor:get_tuple_element_ids_from_tuple_id/1','  Returns ids of the tuple elements in a list.'],['fun','refactorerl','refactor:get_var_bind_occ_and_scope_from_id/1','  Returns the binding occurence id and the scope '],['fun','refactorerl','refactor:get_var_bind_occ_from_id/1','  Returns the binding occurence id of the variabl'],['fun','refactorerl','refactor:get_var_id_from_pos/1','  Returns id of the variable in the position.'],['fun','refactorerl','refactor:insert_fun_cache/1','  Insert function call.'],['fun','refactorerl','refactor:insert_fun_call/1','  Insert function call.'],['fun','refactorerl','refactor:insert_fun_visib_data/1','  Inserts the function datas into the fun_visib t'],['fun','refactorerl','refactor:insert_postcomment_padding/1','  Inserts the padding of the postcomment node.'],['fun','refactorerl','refactor:insert_postcomment_text/1','  Inserts the text of the postcomment node.'],['fun','refactorerl','refactor:insert_precomment_padding/1','  Inserts the padding of the precomment node.'],['fun','refactorerl','refactor:insert_precomment_text/1','  Inserts the text of the precomment node.'],['fun','refactorerl','refactor:insert_scope/1','  Inserts the scope into the scope table.'],['fun','refactorerl','refactor:insert_var_visib/1','  Insert the variables visibility .'],['fun','refactorerl','refactor:is_compile_export_all/1','  Checks if the module contain a -compile(export_'],['fun','refactorerl','refactor:matcher/1','  Associates two value together.'],['fun','refactorerl','refactor:not_end_of_block_expr/1','  Returns true or false if the variable was at th'],['fun','refactorerl','refactor:not_end_of_clause_body/1','  Returns true or false if the variable was at th'],['fun','refactorerl','refactor:not_end_of_receive_expr_action/1','  Returns true or false if the variable was at th'],['fun','refactorerl','refactor:not_end_of_try_expr_after/1','  Returns true or false if the variable was at th'],['fun','refactorerl','refactor:not_end_of_try_expr_body/1','  Returns true or false if the variable was at th'],['fun','refactorerl','refactor:not_end_of_try_expr_handlers/1','  Returns true or false if the variable was at th'],['fun','refactorerl','refactor:put_fun_calls_into_dbase1/1','  Insert fun call data to the database.'],['fun','refactorerl','refactor:put_fun_calls_into_dbase2/1','  Insert fun call data to the database.'],['fun','refactorerl','refactor:put_into_dbase_fun_cache/1','  Insert fun cache data to the database.'],['fun','refactorerl','refactor:put_scope_visib_in_database/1','  Insert scope visibility data to the database.'],['fun','refactorerl','refactor:put_visib_in_database/1','  Insert variable visibity data to the database.'],['fun','refactorerl','refactor:remove_binding_occurrence/1','  Removes binding occurrence from clause body.'],['fun','refactorerl','refactor:remove_occurrence_from_tree/1','  Removes the variable occurrance if it is not ne'],['fun','refactorerl','refactor:replicate_subtree/1','  Replicates a subtree with root BodyId, and scop'],['fun','refactorerl','refactor:replicate_subtree/1','  Replicates a subtree with root BodyId, and scop'],['fun','refactorerl','refactor:set_position/1','  Updates the position of the node.'],['fun','refactorerl','refactor:simple_member_b/1','  Checks if {first param, second param} is a memb'],['fun','refactorerl','refactor:stop/1','  Stops the matcher/2 function.'],['fun','refactorerl','refactor:update_application/1','  Updates the position of the application paramet'],['fun','refactorerl','refactor:update_application_argument/1','  Updates the argument of the application.'],['fun','refactorerl','refactor:update_application_pos_between_given_positions/1','  Updates the positions of the application betwee'],['fun','refactorerl','refactor:update_clause_argument/1','  Updates the argument of the clause.'],['fun','refactorerl','refactor:update_clause_pos/1','  Updates the position of the clause.'],['fun','refactorerl','refactor:update_clause_pos_between_given_positions/1','  Updates the positions of the clause between giv'],['fun','refactorerl','refactor:update_fun_visib/1','  Updates the functions argument in the fun_visib'],['fun','refactorerl','refactor:update_function_name/1','  Updates the function name to the new name.'],['fun','refactorerl','refactor:update_integer/1','  Updates the integer value to the new value.'],['fun','refactorerl','refactor:update_scope/1','  Update the elements scope .'],['fun','refactorerl','refactor:update_scope_visibility/1','  Update the scopes visibility .'],['fun','refactorerl','refactor:update_var_visib/1','  Update the variables visibility .'],['fun','refactorerl','refactor:update_variable_name/1','  Updates the name to the new name in every occur'],['fun','refactorerl','refactor_db:commit/0','     Commits the changes to the database.'],['fun','refactorerl','refactor_db:create_table/1','     Sends the create table query to the database'],['fun','refactorerl','refactor_db:delete/1','     Sends the delete query to the database.'],['fun','refactorerl','refactor_db:drop_table/1','     Sends the drop table query to the database.'],['fun','refactorerl','refactor_db:insert/1','     Sends the insert query to the database.'],['fun','refactorerl','refactor_db:select/1','     Sends the select query to the database.'],['fun','refactorerl','refactor_db:set_autocommit/1','     Sets the autocommit on or off for the actual'],['fun','refactorerl','refactor_db:start_link/1','     Starts the server.'],['fun','refactorerl','refactor_db:stop/0','     Stops the server.'],['fun','refactorerl','refactor_db:update/1','     Sends the update query to the database.']];