var index = [['app','syntax_tools','syntax_tools','[application]'],['mod','syntax_tools','epp_dodger','epp_dodger - bypasses the Erlang preprocessor.'],['mod','syntax_tools','erl_comment_scan','Functions for reading comment lines from Erlang so'],['mod','syntax_tools','erl_prettypr','Pretty printing of abstract Erlang syntax trees.'],['mod','syntax_tools','erl_recomment','Inserting comments into abstract Erlang syntax tre'],['mod','syntax_tools','erl_syntax','Abstract Erlang syntax trees.'],['mod','syntax_tools','erl_syntax_lib','Support library for abstract Erlang syntax trees.'],['mod','syntax_tools','erl_tidy','Tidies and pretty-prints Erlang source code, remov'],['mod','syntax_tools','igor','Igor: the Module Merger and Renamer.'],['mod','syntax_tools','prettypr','A generic pretty printer library.'],['fun','syntax_tools','epp_dodger:parse/1','Equivalent to parse(IODevice, 1).'],['fun','syntax_tools','epp_dodger:parse/2','Equivalent to parse(IODevice, StartLine, []).'],['fun','syntax_tools','epp_dodger:parse/3','Reads and parses program text from an I/O stream.'],['fun','syntax_tools','epp_dodger:parse_file/1','Equivalent to parse_file(File, []).'],['fun','syntax_tools','epp_dodger:parse_file/2','Reads and parses a file.'],['fun','syntax_tools','epp_dodger:parse_form/2','Equivalent to parse_form(IODevice, StartLine, []).'],['fun','syntax_tools','epp_dodger:parse_form/3','Reads and parses a single program form from an I/O'],['fun','syntax_tools','epp_dodger:quick_parse/1','Equivalent to quick_parse(IODevice, 1).'],['fun','syntax_tools','epp_dodger:quick_parse/2','Equivalent to quick_parse(IODevice, StartLine, [])'],['fun','syntax_tools','epp_dodger:quick_parse/3','Similar to parse/3, but does a more quick-and-dirt'],['fun','syntax_tools','epp_dodger:quick_parse_file/1','Equivalent to quick_parse_file(File, []).'],['fun','syntax_tools','epp_dodger:quick_parse_file/2','Similar to parse_file/2, but does a more quick-and'],['fun','syntax_tools','epp_dodger:quick_parse_form/2','Equivalent to quick_parse_form(IODevice, StartLine'],['fun','syntax_tools','epp_dodger:quick_parse_form/3','Similar to parse_form/3, but does a more quick-and'],['fun','syntax_tools','epp_dodger:tokens_to_string/1','Generates a string corresponding to the given toke'],['fun','syntax_tools','erl_comment_scan:file/1','Extracts comments from an Erlang source code file.'],['fun','syntax_tools','erl_comment_scan:join_lines/1','Joins individual comment lines into multi-line com'],['fun','syntax_tools','erl_comment_scan:scan_lines/1','Extracts individual comment lines from a source co'],['fun','syntax_tools','erl_comment_scan:string/1','Extracts comments from a string containing Erlang '],['fun','syntax_tools','erl_prettypr:best/1','Creates a fixed "best" abstract layout for a synta'],['fun','syntax_tools','erl_prettypr:best/1','Equivalent to best(Tree, []).'],['fun','syntax_tools','erl_prettypr:format/1','Prettyprint-formats an abstract Erlang syntax tree'],['fun','syntax_tools','erl_prettypr:format/1','Equivalent to format(Tree, []).'],['fun','syntax_tools','erl_prettypr:get_ctxt_hook/1','Returns the hook function field of the prettyprint'],['fun','syntax_tools','erl_prettypr:get_ctxt_linewidth/1','Returns the line widh field of the prettyprinter c'],['fun','syntax_tools','erl_prettypr:get_ctxt_paperwidth/1','Returns the paper widh field of the prettyprinter '],['fun','syntax_tools','erl_prettypr:get_ctxt_precedence/1','Returns the operator precedence field of the prett'],['fun','syntax_tools','erl_prettypr:get_ctxt_user/1','Returns the user data field of the prettyprinter c'],['fun','syntax_tools','erl_prettypr:layout/1','Creates an abstract document layout for a syntax t'],['fun','syntax_tools','erl_prettypr:layout/1','Equivalent to layout(Tree, []).'],['fun','syntax_tools','erl_prettypr:set_ctxt_hook/1','Updates the hook function field of the prettyprint'],['fun','syntax_tools','erl_prettypr:set_ctxt_linewidth/1','Updates the line widh field of the prettyprinter c'],['fun','syntax_tools','erl_prettypr:set_ctxt_paperwidth/1','Updates the paper widh field of the prettyprinter '],['fun','syntax_tools','erl_prettypr:set_ctxt_precedence/1','Updates the operator precedence field of the prett'],['fun','syntax_tools','erl_prettypr:set_ctxt_user/1','Updates the user data field of the prettyprinter c'],['fun','syntax_tools','erl_recomment:quick_recomment_forms/2','Like recomment_forms/2, but only inserts top-level'],['fun','syntax_tools','erl_recomment:recomment_forms/2','Attaches comments to the syntax tree/trees represe'],['fun','syntax_tools','erl_recomment:recomment_tree/1','Attaches comments to a syntax tree.'],['fun','syntax_tools','erl_syntax:abstract/1','Returns the syntax tree corresponding to an Erlang'],['fun','syntax_tools','erl_syntax:add_ann/1','Appends the term Annotation to the list of user  '],['fun','syntax_tools','erl_syntax:add_postcomments/1','Appends Comments to the post-comments of Node.'],['fun','syntax_tools','erl_syntax:add_precomments/1','Appends Comments to the pre-comments of Node.'],['fun','syntax_tools','erl_syntax:application/1','Creates an abstract function application expressio'],['fun','syntax_tools','erl_syntax:application/1','Creates an abstract function application expressio'],['fun','syntax_tools','erl_syntax:application_arguments/1','Returns the list of argument subtrees of an  appl'],['fun','syntax_tools','erl_syntax:application_operator/1','Returns the operator subtree of an application nod'],['fun','syntax_tools','erl_syntax:arity_qualifier/1','Creates an abstract arity qualifier.'],['fun','syntax_tools','erl_syntax:arity_qualifier_argument/1','Returns the argument (the arity) subtree of an  a'],['fun','syntax_tools','erl_syntax:arity_qualifier_body/1','Returns the body subtree of an arity_qualifier nod'],['fun','syntax_tools','erl_syntax:atom/1','Creates an abstract atom literal.'],['fun','syntax_tools','erl_syntax:atom_literal/1','Returns the literal string represented by an atom '],['fun','syntax_tools','erl_syntax:atom_name/1','Returns the printname of an atom node.'],['fun','syntax_tools','erl_syntax:atom_value/1','Returns the value represented by an atom node.'],['fun','syntax_tools','erl_syntax:attribute/1','Creates an abstract program attribute.'],['fun','syntax_tools','erl_syntax:attribute/1','Equivalent to attribute(Name, none).'],['fun','syntax_tools','erl_syntax:attribute_arguments/1','Returns the list of argument subtrees of an  attr'],['fun','syntax_tools','erl_syntax:attribute_name/1','Returns the name subtree of an attribute node.'],['fun','syntax_tools','erl_syntax:binary/1','Creates an abstract binary-object template.'],['fun','syntax_tools','erl_syntax:binary_comp/1','Creates an abstract binary comprehension.'],['fun','syntax_tools','erl_syntax:binary_comp_body/1','Returns the list of body subtrees of a binary_comp'],['fun','syntax_tools','erl_syntax:binary_comp_template/1','Returns the template subtree of a binary_comp node'],['fun','syntax_tools','erl_syntax:binary_field/1','Creates an abstract binary template field.'],['fun','syntax_tools','erl_syntax:binary_field/1','Creates an abstract binary template field.'],['fun','syntax_tools','erl_syntax:binary_field/1','Equivalent to binary_field(Body, []).'],['fun','syntax_tools','erl_syntax:binary_field_body/1','Returns the body subtree of a binary_field.'],['fun','syntax_tools','erl_syntax:binary_field_size/1','Returns the size specifier subtree of a  binary_f'],['fun','syntax_tools','erl_syntax:binary_field_types/1','Returns the list of type-specifier subtrees of a '],['fun','syntax_tools','erl_syntax:binary_fields/1','Returns the list of field subtrees of a binary nod'],['fun','syntax_tools','erl_syntax:binary_generator/1','Creates an abstract binary_generator.'],['fun','syntax_tools','erl_syntax:binary_generator_body/1','Returns the body subtree of a generator node.'],['fun','syntax_tools','erl_syntax:binary_generator_pattern/1','Returns the pattern subtree of a generator node.'],['fun','syntax_tools','erl_syntax:block_expr/1','Creates an abstract block expression.'],['fun','syntax_tools','erl_syntax:block_expr_body/1','Returns the list of body subtrees of a block_expr '],['fun','syntax_tools','erl_syntax:case_expr/1','Creates an abstract case-expression.'],['fun','syntax_tools','erl_syntax:case_expr_argument/1','Returns the argument subtree of a case_expr node.'],['fun','syntax_tools','erl_syntax:case_expr_clauses/1','Returns the list of clause subtrees of a case_expr'],['fun','syntax_tools','erl_syntax:catch_expr/1','Creates an abstract catch-expression.'],['fun','syntax_tools','erl_syntax:catch_expr_body/1','Returns the body subtree of a catch_expr node.'],['fun','syntax_tools','erl_syntax:char/1','Creates an abstract character literal.'],['fun','syntax_tools','erl_syntax:char_literal/1','Returns the literal string represented by a char '],['fun','syntax_tools','erl_syntax:char_literal/1','Returns the literal string represented by a char '],['fun','syntax_tools','erl_syntax:char_value/1','Returns the value represented by a char node.'],['fun','syntax_tools','erl_syntax:class_qualifier/1','Creates an abstract class qualifier.'],['fun','syntax_tools','erl_syntax:class_qualifier_argument/1','Returns the argument (the class) subtree of a  cl'],['fun','syntax_tools','erl_syntax:class_qualifier_body/1','Returns the body subtree of a class_qualifier node'],['fun','syntax_tools','erl_syntax:clause/1','Creates an abstract clause.'],['fun','syntax_tools','erl_syntax:clause/1','Equivalent to clause([], Guard, Body).'],['fun','syntax_tools','erl_syntax:clause_body/1','Return the list of body subtrees of a clause node.'],['fun','syntax_tools','erl_syntax:clause_guard/1','Returns the guard subtree of a clause node, if  a'],['fun','syntax_tools','erl_syntax:clause_patterns/1','Returns the list of pattern subtrees of a clause n'],['fun','syntax_tools','erl_syntax:comment/1','Creates an abstract comment with the given padding'],['fun','syntax_tools','erl_syntax:comment/1','Equivalent to comment(none, Strings).'],['fun','syntax_tools','erl_syntax:comment_padding/1','Returns the amount of padding before the comment, '],['fun','syntax_tools','erl_syntax:comment_text/1','Returns the lines of text of the abstract comment.'],['fun','syntax_tools','erl_syntax:compact_list/1','Yields the most compact form for an abstract list '],['fun','syntax_tools','erl_syntax:concrete/1','Returns the Erlang term represented by a syntax tr'],['fun','syntax_tools','erl_syntax:cond_expr/1','Creates an abstract cond-expression.'],['fun','syntax_tools','erl_syntax:cond_expr_clauses/1','Returns the list of clause subtrees of a cond_expr'],['fun','syntax_tools','erl_syntax:conjunction/1','Creates an abstract conjunction.'],['fun','syntax_tools','erl_syntax:conjunction_body/1','Returns the list of body subtrees of a  conjuncti'],['fun','syntax_tools','erl_syntax:cons/1','"Optimising" list skeleton cons operation.'],['fun','syntax_tools','erl_syntax:copy_ann/1','Copies the list of user annotations from Source to'],['fun','syntax_tools','erl_syntax:copy_attrs/1','Copies the attributes from Source to Target.'],['fun','syntax_tools','erl_syntax:copy_comments/1','Copies the pre- and postcomments from Source to Ta'],['fun','syntax_tools','erl_syntax:copy_pos/1','Copies the position information from Source to Tar'],['fun','syntax_tools','erl_syntax:data/1','For special purposes only.'],['fun','syntax_tools','erl_syntax:disjunction/1','Creates an abstract disjunction.'],['fun','syntax_tools','erl_syntax:disjunction_body/1','Returns the list of body subtrees of a  disjuncti'],['fun','syntax_tools','erl_syntax:eof_marker/0','Creates an abstract end-of-file marker.'],['fun','syntax_tools','erl_syntax:error_marker/1','Creates an abstract error marker.'],['fun','syntax_tools','erl_syntax:error_marker_info/1','Returns the ErrorInfo structure of an error_marker'],['fun','syntax_tools','erl_syntax:flatten_form_list/1','Flattens sublists of a form_list node.'],['fun','syntax_tools','erl_syntax:float/1','Creates an abstract floating-point literal.'],['fun','syntax_tools','erl_syntax:float_literal/1','Returns the numeral string represented by a float '],['fun','syntax_tools','erl_syntax:float_value/1','Returns the value represented by a float node.'],['fun','syntax_tools','erl_syntax:form_list/1','Creates an abstract sequence of "source code forms'],['fun','syntax_tools','erl_syntax:form_list_elements/1','Returns the list of subnodes of a form_list node.'],['fun','syntax_tools','erl_syntax:fun_expr/1','Creates an abstract fun-expression.'],['fun','syntax_tools','erl_syntax:fun_expr_arity/1','Returns the arity of a fun_expr node.'],['fun','syntax_tools','erl_syntax:fun_expr_clauses/1','Returns the list of clause subtrees of a fun_expr '],['fun','syntax_tools','erl_syntax:function/1','Creates an abstract function definition.'],['fun','syntax_tools','erl_syntax:function_arity/1','Returns the arity of a function node.'],['fun','syntax_tools','erl_syntax:function_clauses/1','Returns the list of clause subtrees of a function '],['fun','syntax_tools','erl_syntax:function_name/1','Returns the name subtree of a function node.'],['fun','syntax_tools','erl_syntax:generator/1','Creates an abstract generator.'],['fun','syntax_tools','erl_syntax:generator_body/1','Returns the body subtree of a generator node.'],['fun','syntax_tools','erl_syntax:generator_pattern/1','Returns the pattern subtree of a generator node.'],['fun','syntax_tools','erl_syntax:get_ann/1','Returns the list of user annotations associated wi'],['fun','syntax_tools','erl_syntax:get_attrs/1','Returns a representation of the attributes associa'],['fun','syntax_tools','erl_syntax:get_pos/1','Returns the position information associated with '],['fun','syntax_tools','erl_syntax:get_postcomments/1','Returns the associated post-comments of a node.'],['fun','syntax_tools','erl_syntax:get_precomments/1','Returns the associated pre-comments of a node.'],['fun','syntax_tools','erl_syntax:has_comments/1','Yields false if the node has no associated  comme'],['fun','syntax_tools','erl_syntax:if_expr/1','Creates an abstract if-expression.'],['fun','syntax_tools','erl_syntax:if_expr_clauses/1','Returns the list of clause subtrees of an if_expr '],['fun','syntax_tools','erl_syntax:implicit_fun/1','Creates an abstract "implicit fun" expression.'],['fun','syntax_tools','erl_syntax:implicit_fun/1','Creates an abstract module-qualified "implicit fun'],['fun','syntax_tools','erl_syntax:implicit_fun/1','Creates an abstract "implicit fun" expression.'],['fun','syntax_tools','erl_syntax:implicit_fun_name/1','Returns the name subtree of an implicit_fun node.'],['fun','syntax_tools','erl_syntax:infix_expr/1','Creates an abstract infix operator expression.'],['fun','syntax_tools','erl_syntax:infix_expr_left/1','Returns the left argument subtree of an  infix_ex'],['fun','syntax_tools','erl_syntax:infix_expr_operator/1','Returns the operator subtree of an infix_expr node'],['fun','syntax_tools','erl_syntax:infix_expr_right/1','Returns the right argument subtree of an  infix_e'],['fun','syntax_tools','erl_syntax:integer/1','Creates an abstract integer literal.'],['fun','syntax_tools','erl_syntax:integer_literal/1','Returns the numeral string represented by an integ'],['fun','syntax_tools','erl_syntax:integer_value/1','Returns the value represented by an integer node.'],['fun','syntax_tools','erl_syntax:is_atom/1','Returns true if Node has type  atom and represent'],['fun','syntax_tools','erl_syntax:is_char/1','Returns true if Node has type  char and represent'],['fun','syntax_tools','erl_syntax:is_form/1','Returns true if Node is a syntax tree  representi'],['fun','syntax_tools','erl_syntax:is_integer/1','Returns true if Node has type  integer and repres'],['fun','syntax_tools','erl_syntax:is_leaf/1','Returns true if Node is a leaf node,  otherwise f'],['fun','syntax_tools','erl_syntax:is_list_skeleton/1','Returns true if Node has type  list or nil, other'],['fun','syntax_tools','erl_syntax:is_literal/1','Returns true if Node represents a  literal term, '],['fun','syntax_tools','erl_syntax:is_proper_list/1','Returns true if Node represents a  proper list, a'],['fun','syntax_tools','erl_syntax:is_string/1','Returns true if Node has type  string and represe'],['fun','syntax_tools','erl_syntax:is_tree/1','For special purposes only.'],['fun','syntax_tools','erl_syntax:join_comments/1','Appends the comments of Source to the current  co'],['fun','syntax_tools','erl_syntax:list/1','Constructs an abstract list skeleton.'],['fun','syntax_tools','erl_syntax:list/1','Equivalent to list(List, none).'],['fun','syntax_tools','erl_syntax:list_comp/1','Creates an abstract list comprehension.'],['fun','syntax_tools','erl_syntax:list_comp_body/1','Returns the list of body subtrees of a list_comp n'],['fun','syntax_tools','erl_syntax:list_comp_template/1','Returns the template subtree of a list_comp node.'],['fun','syntax_tools','erl_syntax:list_elements/1','Returns the list of element subtrees of a list ske'],['fun','syntax_tools','erl_syntax:list_head/1','Returns the head element subtree of a list node.'],['fun','syntax_tools','erl_syntax:list_length/1','Returns the number of element subtrees of a list s'],['fun','syntax_tools','erl_syntax:list_prefix/1','Returns the prefix element subtrees of a list node'],['fun','syntax_tools','erl_syntax:list_suffix/1','Returns the suffix subtree of a list node, if one'],['fun','syntax_tools','erl_syntax:list_tail/1','Returns the tail of a list node.'],['fun','syntax_tools','erl_syntax:macro/1','Creates an abstract macro application.'],['fun','syntax_tools','erl_syntax:macro/1','Equivalent to macro(Name, none).'],['fun','syntax_tools','erl_syntax:macro_arguments/1','Returns the list of argument subtrees of a macro '],['fun','syntax_tools','erl_syntax:macro_name/1','Returns the name subtree of a macro node.'],['fun','syntax_tools','erl_syntax:make_tree/1','Creates a syntax tree with the given type and subt'],['fun','syntax_tools','erl_syntax:map_expr/1','Creates an abstract map expression.'],['fun','syntax_tools','erl_syntax:map_expr/1','Equivalent to map_expr(none, Fields).'],['fun','syntax_tools','erl_syntax:map_expr_argument/1','Returns the argument subtree of a map_expr node, i'],['fun','syntax_tools','erl_syntax:map_expr_fields/1','Returns the list of field subtrees of a map_expr n'],['fun','syntax_tools','erl_syntax:map_field_assoc/1','Creates an abstract map assoc field.'],['fun','syntax_tools','erl_syntax:map_field_assoc_name/1','Returns the name subtree of a map_field_assoc node'],['fun','syntax_tools','erl_syntax:map_field_assoc_value/1','Returns the value subtree of a map_field_assoc nod'],['fun','syntax_tools','erl_syntax:map_field_exact/1','Creates an abstract map exact field.'],['fun','syntax_tools','erl_syntax:map_field_exact_name/1','Returns the name subtree of a map_field_exact node'],['fun','syntax_tools','erl_syntax:map_field_exact_value/1','Returns the value subtree of a map_field_exact nod'],['fun','syntax_tools','erl_syntax:match_expr/1','Creates an abstract match-expression.'],['fun','syntax_tools','erl_syntax:match_expr_body/1','Returns the body subtree of a match_expr node.'],['fun','syntax_tools','erl_syntax:match_expr_pattern/1','Returns the pattern subtree of a match_expr node.'],['fun','syntax_tools','erl_syntax:meta/1','Creates a meta-representation of a syntax tree.'],['fun','syntax_tools','erl_syntax:module_qualifier/1','Creates an abstract module qualifier.'],['fun','syntax_tools','erl_syntax:module_qualifier_argument/1','Returns the argument (the module) subtree of a  m'],['fun','syntax_tools','erl_syntax:module_qualifier_body/1','Returns the body subtree of a module_qualifier nod'],['fun','syntax_tools','erl_syntax:named_fun_expr/1','Creates an abstract named fun-expression.'],['fun','syntax_tools','erl_syntax:named_fun_expr_arity/1','Returns the arity of a named_fun_expr node.'],['fun','syntax_tools','erl_syntax:named_fun_expr_clauses/1','Returns the list of clause subtrees of a named_fun'],['fun','syntax_tools','erl_syntax:named_fun_expr_name/1','Returns the name subtree of a named_fun_expr node.'],['fun','syntax_tools','erl_syntax:nil/0','Creates an abstract empty list.'],['fun','syntax_tools','erl_syntax:normalize_list/1','Expands an abstract list skeleton to its most expl'],['fun','syntax_tools','erl_syntax:operator/1','Creates an abstract operator.'],['fun','syntax_tools','erl_syntax:operator_literal/1','Returns the literal string represented by an  ope'],['fun','syntax_tools','erl_syntax:operator_name/1','Returns the name of an operator node.'],['fun','syntax_tools','erl_syntax:parentheses/1','Creates an abstract parenthesised expression.'],['fun','syntax_tools','erl_syntax:parentheses_body/1','Returns the body subtree of a parentheses node.'],['fun','syntax_tools','erl_syntax:prefix_expr/1','Creates an abstract prefix operator expression.'],['fun','syntax_tools','erl_syntax:prefix_expr_argument/1','Returns the argument subtree of a prefix_expr node'],['fun','syntax_tools','erl_syntax:prefix_expr_operator/1','Returns the operator subtree of a prefix_expr node'],['fun','syntax_tools','erl_syntax:receive_expr/1','Creates an abstract receive-expression.'],['fun','syntax_tools','erl_syntax:receive_expr/1','Equivalent to receive_expr(Clauses, none, []).'],['fun','syntax_tools','erl_syntax:receive_expr_action/1','Returns the list of action body subtrees of a  re'],['fun','syntax_tools','erl_syntax:receive_expr_clauses/1','Returns the list of clause subtrees of a  receive'],['fun','syntax_tools','erl_syntax:receive_expr_timeout/1','Returns the timeout subtree of a receive_expr node'],['fun','syntax_tools','erl_syntax:record_access/1','Creates an abstract record field access expression'],['fun','syntax_tools','erl_syntax:record_access/1','Equivalent to record_access(Argument, none, Field)'],['fun','syntax_tools','erl_syntax:record_access_argument/1','Returns the argument subtree of a record_access no'],['fun','syntax_tools','erl_syntax:record_access_field/1','Returns the field subtree of a record_access node.'],['fun','syntax_tools','erl_syntax:record_access_type/1','Returns the type subtree of a record_access node,'],['fun','syntax_tools','erl_syntax:record_expr/1','Creates an abstract record expression.'],['fun','syntax_tools','erl_syntax:record_expr/1','Equivalent to record_expr(none, Type, Fields).'],['fun','syntax_tools','erl_syntax:record_expr_argument/1','Returns the argument subtree of a record_expr node'],['fun','syntax_tools','erl_syntax:record_expr_fields/1','Returns the list of field subtrees of a  record_e'],['fun','syntax_tools','erl_syntax:record_expr_type/1','Returns the type subtree of a record_expr node.'],['fun','syntax_tools','erl_syntax:record_field/1','Creates an abstract record field specification.'],['fun','syntax_tools','erl_syntax:record_field/1','Equivalent to record_field(Name, none).'],['fun','syntax_tools','erl_syntax:record_field_name/1','Returns the name subtree of a record_field node.'],['fun','syntax_tools','erl_syntax:record_field_value/1','Returns the value subtree of a record_field node,'],['fun','syntax_tools','erl_syntax:record_index_expr/1','Creates an abstract record field index expression.'],['fun','syntax_tools','erl_syntax:record_index_expr_field/1','Returns the field subtree of a record_index_expr n'],['fun','syntax_tools','erl_syntax:record_index_expr_type/1','Returns the type subtree of a record_index_expr no'],['fun','syntax_tools','erl_syntax:remove_comments/1','Clears the associated comments of Node.'],['fun','syntax_tools','erl_syntax:revert/1','Returns an erl_parse-compatible representation of '],['fun','syntax_tools','erl_syntax:revert_forms/1','Reverts a sequence of Erlang source code forms.'],['fun','syntax_tools','erl_syntax:set_ann/1','Sets the list of user annotations of Node to Annot'],['fun','syntax_tools','erl_syntax:set_attrs/1','Sets the attributes of Node to Attributes.'],['fun','syntax_tools','erl_syntax:set_pos/1','Sets the position information of Node to Pos.'],['fun','syntax_tools','erl_syntax:set_postcomments/1','Sets the post-comments of Node to  Comments.'],['fun','syntax_tools','erl_syntax:set_precomments/1','Sets the pre-comments of Node to  Comments.'],['fun','syntax_tools','erl_syntax:size_qualifier/1','Creates an abstract size qualifier.'],['fun','syntax_tools','erl_syntax:size_qualifier_argument/1','Returns the argument subtree (the size) of a  siz'],['fun','syntax_tools','erl_syntax:size_qualifier_body/1','Returns the body subtree of a size_qualifier node.'],['fun','syntax_tools','erl_syntax:string/1','Creates an abstract string literal.'],['fun','syntax_tools','erl_syntax:string_literal/1','Returns the literal string represented by a string'],['fun','syntax_tools','erl_syntax:string_literal/1','Returns the literal string represented by a string'],['fun','syntax_tools','erl_syntax:string_value/1','Returns the value represented by a string node.'],['fun','syntax_tools','erl_syntax:subtrees/1','Returns the grouped list of all subtrees of a synt'],['fun','syntax_tools','erl_syntax:text/1','Creates an abstract piece of source code text.'],['fun','syntax_tools','erl_syntax:text_string/1','Returns the character sequence represented by a te'],['fun','syntax_tools','erl_syntax:tree/1','For special purposes only.'],['fun','syntax_tools','erl_syntax:tree/1','Equivalent to tree(Type, []).'],['fun','syntax_tools','erl_syntax:try_after_expr/1','Equivalent to try_expr(Body, [], [], After).'],['fun','syntax_tools','erl_syntax:try_expr/1','Creates an abstract try-expression.'],['fun','syntax_tools','erl_syntax:try_expr/1','Equivalent to try_expr(Body, Clauses, Handlers, []'],['fun','syntax_tools','erl_syntax:try_expr/1','Equivalent to try_expr(Body, [], Handlers).'],['fun','syntax_tools','erl_syntax:try_expr_after/1','Returns the list of "after" subtrees of a try_expr'],['fun','syntax_tools','erl_syntax:try_expr_body/1','Returns the list of body subtrees of a try_expr no'],['fun','syntax_tools','erl_syntax:try_expr_clauses/1','Returns the list of case-clause subtrees of a  tr'],['fun','syntax_tools','erl_syntax:try_expr_handlers/1','Returns the list of handler-clause subtrees of a '],['fun','syntax_tools','erl_syntax:tuple/1','Creates an abstract tuple.'],['fun','syntax_tools','erl_syntax:tuple_elements/1','Returns the list of element subtrees of a tuple no'],['fun','syntax_tools','erl_syntax:tuple_size/1','Returns the number of elements of a tuple node.'],['fun','syntax_tools','erl_syntax:type/1','Returns the type tag of Node.'],['fun','syntax_tools','erl_syntax:underscore/0','Creates an abstract universal pattern ("_").'],['fun','syntax_tools','erl_syntax:update_tree/1','Creates a syntax tree with the same type and attri'],['fun','syntax_tools','erl_syntax:variable/1','Creates an abstract variable with the given name.'],['fun','syntax_tools','erl_syntax:variable_literal/1','Returns the name of a variable node as a string.'],['fun','syntax_tools','erl_syntax:variable_name/1','Returns the name of a variable node as an atom.'],['fun','syntax_tools','erl_syntax:warning_marker/1','Creates an abstract warning marker.'],['fun','syntax_tools','erl_syntax:warning_marker_info/1','Returns the ErrorInfo structure of a warning_marke'],['fun','syntax_tools','erl_syntax_lib:analyze_application/1','Returns the name of a called function.'],['fun','syntax_tools','erl_syntax_lib:analyze_attribute/1','Analyzes an attribute node.'],['fun','syntax_tools','erl_syntax_lib:analyze_export_attribute/1','Returns the list of function names declared by an '],['fun','syntax_tools','erl_syntax_lib:analyze_file_attribute/1','Returns the file name and line number of a file  '],['fun','syntax_tools','erl_syntax_lib:analyze_form/1','Analyzes a "source code form" node.'],['fun','syntax_tools','erl_syntax_lib:analyze_forms/1','Analyzes a sequence of "program forms".'],['fun','syntax_tools','erl_syntax_lib:analyze_function/1','Returns the name and arity of a function definitio'],['fun','syntax_tools','erl_syntax_lib:analyze_function_name/1','Returns the function name represented by a syntax '],['fun','syntax_tools','erl_syntax_lib:analyze_implicit_fun/1','Returns the name of an implicit fun expression "fu'],['fun','syntax_tools','erl_syntax_lib:analyze_import_attribute/1','Returns the module name and (if present) list of f'],['fun','syntax_tools','erl_syntax_lib:analyze_module_attribute/1','Returns the module name and possible parameters de'],['fun','syntax_tools','erl_syntax_lib:analyze_record_attribute/1','Returns the name and the list of fields of a recor'],['fun','syntax_tools','erl_syntax_lib:analyze_record_expr/1','Returns the record name and field name/names of a '],['fun','syntax_tools','erl_syntax_lib:analyze_record_field/1','Returns the label and value-expression of a record'],['fun','syntax_tools','erl_syntax_lib:analyze_rule/1','Returns the name and arity of a Mnemosyne rule.'],['fun','syntax_tools','erl_syntax_lib:analyze_wild_attribute/1','Returns the name and value of a "wild" attribute.'],['fun','syntax_tools','erl_syntax_lib:annotate_bindings/1','Adds or updates annotations on nodes in a syntax t'],['fun','syntax_tools','erl_syntax_lib:annotate_bindings/1','Adds or updates annotations on nodes in a syntax t'],['fun','syntax_tools','erl_syntax_lib:fold/2','Folds a function over all nodes of a syntax tree.'],['fun','syntax_tools','erl_syntax_lib:fold_subtrees/2','Folds a function over the immediate subtrees of a '],['fun','syntax_tools','erl_syntax_lib:foldl_listlist/2','Like lists:foldl/3, but over a list of lists.'],['fun','syntax_tools','erl_syntax_lib:function_name_expansions/1','Creates a mapping from corresponding short names t'],['fun','syntax_tools','erl_syntax_lib:is_fail_expr/1','Returns true if Tree represents an  expression wh'],['fun','syntax_tools','erl_syntax_lib:limit/1','Limits a syntax tree to a specified depth.'],['fun','syntax_tools','erl_syntax_lib:limit/2','Equivalent to limit(Tree, Depth, Text) using the '],['fun','syntax_tools','erl_syntax_lib:map/2','Applies a function to each node of a syntax tree.'],['fun','syntax_tools','erl_syntax_lib:map_subtrees/2','Applies a function to each immediate subtree of a '],['fun','syntax_tools','erl_syntax_lib:mapfold/2','Combines map and fold in a single operation.'],['fun','syntax_tools','erl_syntax_lib:mapfold_subtrees/2','Does a mapfold operation over the immediate subtre'],['fun','syntax_tools','erl_syntax_lib:mapfoldl_listlist/3','Like lists:mapfoldl/3, but over a list of lists.'],['fun','syntax_tools','erl_syntax_lib:new_variable_name/1','Returns an atom which is not already in the set Us'],['fun','syntax_tools','erl_syntax_lib:new_variable_name/2','Returns a user-named atom which is not already in '],['fun','syntax_tools','erl_syntax_lib:new_variable_names/1','Like new_variable_name/2, but generates a list of'],['fun','syntax_tools','erl_syntax_lib:new_variable_names/1','Like new_variable_name/1, but generates a list of'],['fun','syntax_tools','erl_syntax_lib:strip_comments/1','Removes all comments from all nodes of a syntax tr'],['fun','syntax_tools','erl_syntax_lib:to_comment/1','Transforms a syntax tree into an abstract comment.'],['fun','syntax_tools','erl_syntax_lib:to_comment/1','Equivalent to to_comment(Tree, Prefix, F) for a  '],['fun','syntax_tools','erl_syntax_lib:to_comment/1','Equivalent to to_comment(Tree, "% ").'],['fun','syntax_tools','erl_syntax_lib:variables/1','Returns the names of variables occurring in a synt'],['fun','syntax_tools','erl_tidy:dir/0','Equivalent to dir("").'],['fun','syntax_tools','erl_tidy:dir/1','Tidies Erlang source files in a directory and its '],['fun','syntax_tools','erl_tidy:dir/1','Equivalent to dir(Dir, []).'],['fun','syntax_tools','erl_tidy:file/1','Tidies an Erlang source code file.'],['fun','syntax_tools','erl_tidy:file/1','Equivalent to file(Name, []).'],['fun','syntax_tools','erl_tidy:module/1','Equivalent to module(Forms, []).'],['fun','syntax_tools','erl_tidy:module/2','Tidies a syntax tree representation of a module  '],['fun','syntax_tools','igor:create_stubs/1','Creates stub module source files corresponding to '],['fun','syntax_tools','igor:merge/1','Merges source code files to a single file.'],['fun','syntax_tools','igor:merge/1','Equivalent to merge(Name, Files, []).'],['fun','syntax_tools','igor:merge_files/1','Merges source code files and syntax trees to a sin'],['fun','syntax_tools','igor:merge_files/1','Equivalent to merge_files(Name, [], Files, Options'],['fun','syntax_tools','igor:merge_sources/1','Merges syntax trees to a single syntax tree.'],['fun','syntax_tools','igor:parse_transform/1','Allows Igor to work as a component of the Erlang c'],['fun','syntax_tools','igor:rename/1','Renames a set of possibly interdependent source co'],['fun','syntax_tools','igor:rename/1','Equivalent to rename(Files, Renamings, []).'],['fun','syntax_tools','prettypr:above/1','Concatenates documents vertically.'],['fun','syntax_tools','prettypr:beside/1','Concatenates documents horizontally.'],['fun','syntax_tools','prettypr:best/1','Selects a "best" layout for a document, creating a'],['fun','syntax_tools','prettypr:break/1','Forces a line break at the end of the given docume'],['fun','syntax_tools','prettypr:empty/0','Yields the empty document, which has neither heigh'],['fun','syntax_tools','prettypr:floating/1','Creates a "floating" document.'],['fun','syntax_tools','prettypr:floating/1','Equivalent to floating(D, 0, 0).'],['fun','syntax_tools','prettypr:follow/1','Separates two documents by either a single space, '],['fun','syntax_tools','prettypr:follow/1','Equivalent to follow(D1, D2, 0).'],['fun','syntax_tools','prettypr:format/1','Computes a layout for a document and returns the c'],['fun','syntax_tools','prettypr:format/1','Equivalent to format(D, PaperWidth, 65).'],['fun','syntax_tools','prettypr:format/1','Equivalent to format(D, 80).'],['fun','syntax_tools','prettypr:nest/1','Indents a document a number of character positions'],['fun','syntax_tools','prettypr:null_text/1','Similar to text/1, but the result is treated as ha'],['fun','syntax_tools','prettypr:par/1','Arranges documents in a paragraph-like layout.'],['fun','syntax_tools','prettypr:par/1','Equivalent to par(Ds, 0).'],['fun','syntax_tools','prettypr:sep/1','Arranges documents horizontally or vertically, sep'],['fun','syntax_tools','prettypr:text/1','Yields a document representing a fixed, unbreakabl'],['fun','syntax_tools','prettypr:text_par/1','Yields a document representing paragraph-formatted'],['fun','syntax_tools','prettypr:text_par/1','Equivalent to text_par(Text, 0).']];