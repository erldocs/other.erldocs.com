var index = [['app','cuttlefish','cuttlefish','[application]'],['mod','cuttlefish','cuttlefish_advanced',[]],['mod','cuttlefish','cuttlefish_bytesize',[]],['mod','cuttlefish','cuttlefish_conf',[]],['mod','cuttlefish','cuttlefish_datatypes',[]],['mod','cuttlefish','cuttlefish_duration',[]],['mod','cuttlefish','cuttlefish_escript',[]],['mod','cuttlefish','cuttlefish_generator',[]],['mod','cuttlefish','cuttlefish_mapping',[]],['mod','cuttlefish','cuttlefish_rebar_plugin',[]],['mod','cuttlefish','cuttlefish_schema',[]],['mod','cuttlefish','cuttlefish_translation',[]],['mod','cuttlefish','cuttlefish_unit',[]],['mod','cuttlefish','cuttlefish_util',[]],['mod','cuttlefish','cuttlefish_validator',[]],['mod','cuttlefish','cuttlefish_vmargs',[]],['fun','cuttlefish','cuttlefish_advanced:overlay/2','this function overlays the values in proplist Adv'],['fun','cuttlefish','cuttlefish_bytesize:parse/1','the reverse of to_string/1.'],['fun','cuttlefish','cuttlefish_bytesize:to_string/1','turns an integer of bytes into a string.'],['fun','cuttlefish','cuttlefish_conf:file/1',[]],['fun','cuttlefish','cuttlefish_conf:files/1',[]],['fun','cuttlefish','cuttlefish_conf:generate/1',[]],['fun','cuttlefish','cuttlefish_conf:generate_file/1',[]],['fun','cuttlefish','cuttlefish_conf:is_variable_defined/2',[]],['fun','cuttlefish','cuttlefish_datatypes:from_string/1',[]],['fun','cuttlefish','cuttlefish_datatypes:is_supported/1',[]],['fun','cuttlefish','cuttlefish_datatypes:to_string/1',[]],['fun','cuttlefish','cuttlefish_duration:parse/1',[]],['fun','cuttlefish','cuttlefish_duration:parse/1',[]],['fun','cuttlefish','cuttlefish_duration:to_string/1',[]],['fun','cuttlefish','cuttlefish_escript:main/1','main method for generating erlang term config file'],['fun','cuttlefish','cuttlefish_generator:find_mapping/2',[]],['fun','cuttlefish','cuttlefish_generator:map/2',[]],['fun','cuttlefish','cuttlefish_mapping:commented/1',[]],['fun','cuttlefish','cuttlefish_mapping:datatype/1',[]],['fun','cuttlefish','cuttlefish_mapping:default/1',[]],['fun','cuttlefish','cuttlefish_mapping:doc/1',[]],['fun','cuttlefish','cuttlefish_mapping:include_default/1',[]],['fun','cuttlefish','cuttlefish_mapping:is_mapping/1',[]],['fun','cuttlefish','cuttlefish_mapping:level/1',[]],['fun','cuttlefish','cuttlefish_mapping:mapping/1',[]],['fun','cuttlefish','cuttlefish_mapping:parse/2',[]],['fun','cuttlefish','cuttlefish_mapping:remove_duplicates/1',[]],['fun','cuttlefish','cuttlefish_mapping:replace/1',[]],['fun','cuttlefish','cuttlefish_mapping:validators/1',[]],['fun','cuttlefish','cuttlefish_mapping:validators/1',[]],['fun','cuttlefish','cuttlefish_mapping:variable/1',[]],['fun','cuttlefish','cuttlefish_rebar_plugin:generate/2',[]],['fun','cuttlefish','cuttlefish_schema:file/1',[]],['fun','cuttlefish','cuttlefish_schema:files/1',[]],['fun','cuttlefish','cuttlefish_schema:string/1',[]],['fun','cuttlefish','cuttlefish_schema:strings/1',[]],['fun','cuttlefish','cuttlefish_translation:func/1',[]],['fun','cuttlefish','cuttlefish_translation:is_translation/1',[]],['fun','cuttlefish','cuttlefish_translation:mapping/1',[]],['fun','cuttlefish','cuttlefish_translation:parse/2',[]],['fun','cuttlefish','cuttlefish_translation:remove_duplicates/1',[]],['fun','cuttlefish','cuttlefish_translation:replace/1',[]],['fun','cuttlefish','cuttlefish_util:ceiling/1','remember when you learned about decimal places.'],['fun','cuttlefish','cuttlefish_util:conf_get_value/1',[]],['fun','cuttlefish','cuttlefish_util:conf_get_value/1','its a wrapper for proplists:get_value, a convenie'],['fun','cuttlefish','cuttlefish_util:filter_by_variable_starts_with/1','For Proplist, return the subset of the proplist th'],['fun','cuttlefish','cuttlefish_util:fuzzy_variable_match/1','could this fixed Key be a match for the variable k'],['fun','cuttlefish','cuttlefish_util:matches_for_variable_def/1','given a KeyDef "a.b.$c.d", what are the possible v'],['fun','cuttlefish','cuttlefish_util:numerify/1','turn a string into a number in a way I am happy wi'],['fun','cuttlefish','cuttlefish_util:replace_proplist_value/1','replace the element in a proplist.'],['fun','cuttlefish','cuttlefish_util:split_variable_on_match/1','split a key definition into:  * Prefix: Things be'],['fun','cuttlefish','cuttlefish_util:tokenize_variable_key/1','like string:tokens(Key, "."), but if the dot was e'],['fun','cuttlefish','cuttlefish_util:variable_match_replace/1','replaces the $var in Key with Sub.'],['fun','cuttlefish','cuttlefish_util:variable_starts_with/2',[]],['fun','cuttlefish','cuttlefish_validator:description/1',[]],['fun','cuttlefish','cuttlefish_validator:func/1',[]],['fun','cuttlefish','cuttlefish_validator:is_validator/1',[]],['fun','cuttlefish','cuttlefish_validator:name/1',[]],['fun','cuttlefish','cuttlefish_validator:parse/2',[]],['fun','cuttlefish','cuttlefish_validator:remove_duplicates/1',[]],['fun','cuttlefish','cuttlefish_validator:replace/1',[]],['fun','cuttlefish','cuttlefish_vmargs:stringify/1','turns a proplist into a list of strings suitable f']];