var index = [['app','trie','trie','[application]'],['mod','trie','proper_srv','   Test the dict API functions on an ordered coll'],['mod','trie','trie','   A trie data structure implementation.   The t'],['mod','trie','trie_proper',[]],['fun','trie','proper_srv:append/2',[]],['fun','trie','proper_srv:append_list/2',[]],['fun','trie','proper_srv:code_change/3',[]],['fun','trie','proper_srv:erase/1',[]],['fun','trie','proper_srv:fetch_keys/0',[]],['fun','trie','proper_srv:filter/1',[]],['fun','trie','proper_srv:find/1',[]],['fun','trie','proper_srv:fold/2',[]],['fun','trie','proper_srv:handle_call/3',[]],['fun','trie','proper_srv:handle_cast/2',[]],['fun','trie','proper_srv:handle_info/2',[]],['fun','trie','proper_srv:init/1',[]],['fun','trie','proper_srv:is_key/1',[]],['fun','trie','proper_srv:map/1',[]],['fun','trie','proper_srv:size/0',[]],['fun','trie','proper_srv:start_link/1',[]],['fun','trie','proper_srv:stop/0',[]],['fun','trie','proper_srv:store/2',[]],['fun','trie','proper_srv:terminate/2',[]],['fun','trie','proper_srv:update/3',[]],['fun','trie','trie:append/1',[]],['fun','trie','trie:append_list/1',[]],['fun','trie','trie:erase/1',[]],['fun','trie','trie:fetch/1',[]],['fun','trie','trie:fetch_keys/1',[]],['fun','trie','trie:fetch_keys_similar/1',[]],['fun','trie','trie:filter/1',[]],['fun','trie','trie:find/1',[]],['fun','trie','trie:find_match/1','  Find a match with patterns held within a trie.'],['fun','trie','trie:find_prefix/1','  Find a value in a trie by prefix.  The atom p'],['fun','trie','trie:find_prefix_longest/1','  Find the longest key in a trie that is a prefix'],['fun','trie','trie:find_similar/1','  Find the first key/value pair in a trie where t'],['fun','trie','trie:fold/1',[]],['fun','trie','trie:fold_match/1','  Fold a function over the keys within a trie tha'],['fun','trie','trie:fold_similar/1',[]],['fun','trie','trie:foldl/1',[]],['fun','trie','trie:foldl_similar/1',[]],['fun','trie','trie:foldr/1',[]],['fun','trie','trie:foldr_similar/1',[]],['fun','trie','trie:foreach/1',[]],['fun','trie','trie:from_list/1',[]],['fun','trie','trie:is_key/1',[]],['fun','trie','trie:is_pattern/1','  Test to determine if a string is a pattern.  "'],['fun','trie','trie:is_prefix/1','  Determine if the prefix provided has existed wi'],['fun','trie','trie:is_prefixed/1','  Determine if the provided string has an accepta'],['fun','trie','trie:is_prefixed/1','  Determine if the provided string has a prefix w'],['fun','trie','trie:iter/1','  Iterate over a trie.  Traverses in alphabetica'],['fun','trie','trie:itera/1','  Iterate over a trie with an accumulator.  Trav'],['fun','trie','trie:map/1',[]],['fun','trie','trie:merge/1',[]],['fun','trie','trie:new/0',[]],['fun','trie','trie:new/1',[]],['fun','trie','trie:pattern_parse/1','  Parse a string based on the supplied wildcard p'],['fun','trie','trie:pattern_parse/1','  Parse a string based on the supplied wildcard p'],['fun','trie','trie:prefix/1',[]],['fun','trie','trie:size/1',[]],['fun','trie','trie:store/1',[]],['fun','trie','trie:store/1',[]],['fun','trie','trie:to_list/1',[]],['fun','trie','trie:update/1',[]],['fun','trie','trie:update/1',[]],['fun','trie','trie:update_counter/1',[]]];