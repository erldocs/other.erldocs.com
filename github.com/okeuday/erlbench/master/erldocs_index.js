var index = [['app','erlbench','erlbench','[application]'],['mod','erlbench','aadict',[]],['mod','erlbench','binary_key',[]],['mod','erlbench','btree7','   Binary tree data structure.   A binary tree d'],['mod','erlbench','ejson',[]],['mod','erlbench','ejson_decode',[]],['mod','erlbench','ejson_encode',[]],['mod','erlbench','hamt',[]],['mod','erlbench','hashdict',[]],['mod','erlbench','hasht','   Simple Hash Table Implementation..'],['mod','erlbench','hashtl','   Hash Table Layered Implementation.   Simple s'],['mod','erlbench','hashtl2','   Hash Table Layered Implementation..'],['mod','erlbench','hashtl3','   Hash Table Layered Implementation..'],['mod','erlbench','hashtl4','   Hash Table Layered Implementation..'],['mod','erlbench','htrie',[]],['mod','erlbench','integer_key',[]],['mod','erlbench','json_decode',[]],['mod','erlbench','json_encode',[]],['mod','erlbench','jsx_config',[]],['mod','erlbench','jsx_decoder',[]],['mod','erlbench','jsx_encoder',[]],['mod','erlbench','jsx_parser',[]],['mod','erlbench','jsx_to_json',[]],['mod','erlbench','jsx_to_term',[]],['mod','erlbench','jsx_verify',[]],['mod','erlbench','list_match',[]],['mod','erlbench','list_traversal',[]],['mod','erlbench','lqueue','   List Queue.   A queue implemented as a single'],['mod','erlbench','mochijson2','Yet another JSON (RFC 4627) library for Erlang.'],['mod','erlbench','mochinum','Useful numeric algorithms for floats that cover so'],['mod','erlbench','nicefloats',[]],['mod','erlbench','ntree','   N-tree data structure.   Attempting to exploi'],['mod','erlbench','pqueue','   Static Priority Queue.   This priority queue '],['mod','erlbench','pqueue2','   Skew Heap Priority Queue.   Ulf Wiger suggest'],['mod','erlbench','pqueue3','   A Large Priority Queue.   This priority queue'],['mod','erlbench','pqueue4','   Static Priority Queue.   This priority queue '],['mod','erlbench','pqueue_priorities2',[]],['mod','erlbench','pqueue_priorities41',[]],['mod','erlbench','pqueue_priorities64',[]],['mod','erlbench','pqueue_priority0',[]],['mod','erlbench','priority_queue',[]],['mod','erlbench','pseudo_randomness',[]],['mod','erlbench','queue_in_out',[]],['mod','erlbench','random_wh06_int',[]],['mod','erlbench','rbdict',[]],['mod','erlbench','run',[]],['mod','erlbench','shuffle',[]],['mod','erlbench','string_key',[]],['mod','erlbench','trie','   A trie data structure implementation.   The t'],['mod','erlbench','trie_prefix',[]],['mod','erlbench','uuid_creation',[]],['fun','erlbench','aadict:all/1',[]],['fun','erlbench','aadict:any/1',[]],['fun','erlbench','aadict:append/1',[]],['fun','erlbench','aadict:append_list/1',[]],['fun','erlbench','aadict:dict_to_list/1',[]],['fun','erlbench','aadict:erase/1',[]],['fun','erlbench','aadict:fetch/1',[]],['fun','erlbench','aadict:fetch_keys/1',[]],['fun','erlbench','aadict:filter/1',[]],['fun','erlbench','aadict:find/1',[]],['fun','erlbench','aadict:fold/1',[]],['fun','erlbench','aadict:foreach/1',[]],['fun','erlbench','aadict:from_list/1',[]],['fun','erlbench','aadict:is_key/1',[]],['fun','erlbench','aadict:iter/1',[]],['fun','erlbench','aadict:itera/1',[]],['fun','erlbench','aadict:list_to_dict/1',[]],['fun','erlbench','aadict:map/1',[]],['fun','erlbench','aadict:merge/1',[]],['fun','erlbench','aadict:new/0',[]],['fun','erlbench','aadict:size/1',[]],['fun','erlbench','aadict:store/1',[]],['fun','erlbench','aadict:to_list/1',[]],['fun','erlbench','aadict:update/1',[]],['fun','erlbench','aadict:update/1',[]],['fun','erlbench','aadict:update_counter/1',[]],['fun','erlbench','aadict:update_val/1',[]],['fun','erlbench','binary_key:get/3',[]],['fun','erlbench','binary_key:get_concurrent/2',[]],['fun','erlbench','binary_key:set/3',[]],['fun','erlbench','binary_key:test/0',[]],['fun','erlbench','binary_key:test/1',[]],['fun','erlbench','btree7:find/2','  Find a value..'],['fun','erlbench','btree7:new/0','  Create a new instance..'],['fun','erlbench','btree7:store/3','  Store a key-value pair..'],['fun','erlbench','btree7:test/0','  Internal test..'],['fun','erlbench','ejson:decode/1',[]],['fun','erlbench','ejson:encode/1',[]],['fun','erlbench','ejson_decode:value/1',[]],['fun','erlbench','ejson_encode:value/1',[]],['fun','erlbench','hamt:get/2',[]],['fun','erlbench','hamt:go/1',[]],['fun','erlbench','hamt:new/0',[]],['fun','erlbench','hamt:popcount/1',[]],['fun','erlbench','hamt:put/3',[]],['fun','erlbench','hashdict:append/1',[]],['fun','erlbench','hashdict:append_list/1',[]],['fun','erlbench','hashdict:erase/1',[]],['fun','erlbench','hashdict:fetch/1',[]],['fun','erlbench','hashdict:fetch_keys/1',[]],['fun','erlbench','hashdict:filter/1',[]],['fun','erlbench','hashdict:find/1',[]],['fun','erlbench','hashdict:fold/1',[]],['fun','erlbench','hashdict:from_list/1',[]],['fun','erlbench','hashdict:is_key/1',[]],['fun','erlbench','hashdict:map/1',[]],['fun','erlbench','hashdict:merge/1',[]],['fun','erlbench','hashdict:new/0',[]],['fun','erlbench','hashdict:size/1',[]],['fun','erlbench','hashdict:store/1',[]],['fun','erlbench','hashdict:take/1','Returns {Key, Value, Dict2} if Key exists in Dict.'],['fun','erlbench','hashdict:to_list/1',[]],['fun','erlbench','hashdict:update/1',[]],['fun','erlbench','hashdict:update/1',[]],['fun','erlbench','hashdict:update_counter/1',[]],['fun','erlbench','hasht:fetch/2',[]],['fun','erlbench','hasht:find/2',[]],['fun','erlbench','hasht:new/0',[]],['fun','erlbench','hasht:new/1',[]],['fun','erlbench','hasht:store/3',[]],['fun','erlbench','hashtl2:fetch/2',[]],['fun','erlbench','hashtl2:find/2',[]],['fun','erlbench','hashtl2:new/0',[]],['fun','erlbench','hashtl2:new/1',[]],['fun','erlbench','hashtl2:store/3',[]],['fun','erlbench','hashtl3:fetch/2',[]],['fun','erlbench','hashtl3:find/2',[]],['fun','erlbench','hashtl3:new/0',[]],['fun','erlbench','hashtl3:new/1',[]],['fun','erlbench','hashtl3:store/3',[]],['fun','erlbench','hashtl4:fetch/2',[]],['fun','erlbench','hashtl4:find/2',[]],['fun','erlbench','hashtl4:new/0',[]],['fun','erlbench','hashtl4:new/1',[]],['fun','erlbench','hashtl4:store/3',[]],['fun','erlbench','hashtl:delete/2',[]],['fun','erlbench','hashtl:fetch/2',[]],['fun','erlbench','hashtl:find/2',[]],['fun','erlbench','hashtl:new/0',[]],['fun','erlbench','hashtl:new/1',[]],['fun','erlbench','hashtl:store/3',[]],['fun','erlbench','htrie:fullness/1',[]],['fun','erlbench','htrie:get/2',[]],['fun','erlbench','htrie:new/0',[]],['fun','erlbench','htrie:put/3',[]],['fun','erlbench','htrie:update/3',[]],['fun','erlbench','htrie:update/4',[]],['fun','erlbench','integer_key:get/3',[]],['fun','erlbench','integer_key:get_concurrent/2',[]],['fun','erlbench','integer_key:set/3',[]],['fun','erlbench','integer_key:test/0',[]],['fun','erlbench','integer_key:test/1',[]],['fun','erlbench','json_decode:run/3',[]],['fun','erlbench','json_decode:test/1',[]],['fun','erlbench','json_encode:run/3',[]],['fun','erlbench','json_encode:test/1',[]],['fun','erlbench','jsx_config:config_to_list/1',[]],['fun','erlbench','jsx_config:extract_config/1',[]],['fun','erlbench','jsx_config:parse_config/1',[]],['fun','erlbench','jsx_config:valid_flags/0',[]],['fun','erlbench','jsx_decoder:decoder/1',[]],['fun','erlbench','jsx_decoder:resume/1',[]],['fun','erlbench','jsx_encoder:encode/1',[]],['fun','erlbench','jsx_encoder:encode/1',[]],['fun','erlbench','jsx_encoder:encoder/1',[]],['fun','erlbench','jsx_encoder:unzip/1',[]],['fun','erlbench','jsx_parser:handle_event/1',[]],['fun','erlbench','jsx_parser:init/1',[]],['fun','erlbench','jsx_parser:parser/1',[]],['fun','erlbench','jsx_parser:resume/1',[]],['fun','erlbench','jsx_to_json:finish/1',[]],['fun','erlbench','jsx_to_json:format/1',[]],['fun','erlbench','jsx_to_json:get_key/1',[]],['fun','erlbench','jsx_to_json:get_value/1',[]],['fun','erlbench','jsx_to_json:handle_event/1',[]],['fun','erlbench','jsx_to_json:init/1',[]],['fun','erlbench','jsx_to_json:insert/2',[]],['fun','erlbench','jsx_to_json:start_array/1',[]],['fun','erlbench','jsx_to_json:start_json/0',[]],['fun','erlbench','jsx_to_json:start_json/1',[]],['fun','erlbench','jsx_to_json:start_object/1',[]],['fun','erlbench','jsx_to_json:to_json/1',[]],['fun','erlbench','jsx_to_term:finish/1',[]],['fun','erlbench','jsx_to_term:get_key/1',[]],['fun','erlbench','jsx_to_term:get_value/1',[]],['fun','erlbench','jsx_to_term:handle_event/1',[]],['fun','erlbench','jsx_to_term:init/1',[]],['fun','erlbench','jsx_to_term:insert/2',[]],['fun','erlbench','jsx_to_term:insert/3',[]],['fun','erlbench','jsx_to_term:start_array/1',[]],['fun','erlbench','jsx_to_term:start_object/1',[]],['fun','erlbench','jsx_to_term:start_term/0',[]],['fun','erlbench','jsx_to_term:start_term/1',[]],['fun','erlbench','jsx_to_term:to_term/1',[]],['fun','erlbench','jsx_verify:handle_event/1',[]],['fun','erlbench','jsx_verify:init/1',[]],['fun','erlbench','jsx_verify:is_json/1',[]],['fun','erlbench','jsx_verify:is_term/1',[]],['fun','erlbench','list_match:match_characters/1',[]],['fun','erlbench','list_match:match_list/1',[]],['fun','erlbench','list_match:test/0',[]],['fun','erlbench','list_match:test/1',[]],['fun','erlbench','list_traversal:test/0',[]],['fun','erlbench','list_traversal:test/1',[]],['fun','erlbench','list_traversal:traverse_append/1',[]],['fun','erlbench','list_traversal:traverse_as_queue/1',[]],['fun','erlbench','list_traversal:traverse_comprehension/1',[]],['fun','erlbench','list_traversal:traverse_foldr/1',[]],['fun','erlbench','list_traversal:traverse_map/1',[]],['fun','erlbench','list_traversal:traverse_queue/1',[]],['fun','erlbench','list_traversal:traverse_reverse/1',[]],['fun','erlbench','lqueue:dropwhile/2',[]],['fun','erlbench','lqueue:filter/2',[]],['fun','erlbench','lqueue:from_list/1',[]],['fun','erlbench','lqueue:in/2',[]],['fun','erlbench','lqueue:in_r/2',[]],['fun','erlbench','lqueue:is_empty/1',[]],['fun','erlbench','lqueue:isnt_empty/1',[]],['fun','erlbench','lqueue:len/1',[]],['fun','erlbench','lqueue:new/0',[]],['fun','erlbench','lqueue:out/1',[]],['fun','erlbench','lqueue:out_r/1',[]],['fun','erlbench','lqueue:reverse/1',[]],['fun','erlbench','lqueue:to_list/1',[]],['fun','erlbench','mochijson2:decode/1','Decode the given iolist to Erlang terms.'],['fun','erlbench','mochijson2:decoder/1','Create a decoder/1 with the given options.'],['fun','erlbench','mochijson2:encode/1','Encode the given as JSON to an iolist.'],['fun','erlbench','mochijson2:encoder/1','Create an encoder/1 with the given options.'],['fun','erlbench','mochijson2:test/0',[]],['fun','erlbench','mochinum:digits/1',' Returns a string that accurately represents the g'],['fun','erlbench','mochinum:frexp/1',' Return the fractional and exponent part of an IEE'],['fun','erlbench','mochinum:int_ceil/1',' Return the ceiling of F as an integer.'],['fun','erlbench','mochinum:int_pow/1',' Moderately efficient way to exponentiate integers'],['fun','erlbench','nicefloats:format/1',[]],['fun','erlbench','nicefloats:format/1',[]],['fun','erlbench','ntree:find/2','  Find a value..'],['fun','erlbench','ntree:new/0','  Create a new instance.  tree:  {N, L_length, '],['fun','erlbench','ntree:new/1',[]],['fun','erlbench','ntree:store/3','  Store a key-value pair..'],['fun','erlbench','ntree:test/0','  Internal test..'],['fun','erlbench','pqueue2:in/1','  Append an item to the tail of a specific priori'],['fun','erlbench','pqueue2:in/1','  Append an item to the tail of the 0 priority qu'],['fun','erlbench','pqueue2:is_empty/1','  Check if the priority queue is empty..'],['fun','erlbench','pqueue2:is_queue/1','  Check if the priority queue type is as expected'],['fun','erlbench','pqueue2:len/1','  Determine the length of a priority queue..'],['fun','erlbench','pqueue2:new/0','  Create a new priority queue..'],['fun','erlbench','pqueue2:out/1','  Take an item of a specific priority from the he'],['fun','erlbench','pqueue2:out/1','  Take an item from the head of the priority queu'],['fun','erlbench','pqueue2:pout/1','  Take an item from the head of the priority queu'],['fun','erlbench','pqueue2:test/0','  Regression test..'],['fun','erlbench','pqueue2:to_list/1','  Convert the priority queue to a list..'],['fun','erlbench','pqueue3:in/1','  Append an item to the tail of a specific priori'],['fun','erlbench','pqueue3:in/1','  Append an item to the tail of the 0 priority qu'],['fun','erlbench','pqueue3:is_empty/1','  Check if the priority queue is empty.  O(1).'],['fun','erlbench','pqueue3:is_queue/1','  Check if the priority queue type is as expected'],['fun','erlbench','pqueue3:len/1','  Determine the length of a priority queue.  O(N'],['fun','erlbench','pqueue3:new/0','  Create a new priority queue.  O(1).'],['fun','erlbench','pqueue3:new/1','  Create a new priority queue with customization '],['fun','erlbench','pqueue3:out/1','  Take an item of a specific priority from the he'],['fun','erlbench','pqueue3:out/1','  Take an item from the head of the priority queu'],['fun','erlbench','pqueue3:pout/1','  Take an item from the head of the priority queu'],['fun','erlbench','pqueue3:to_list/1','  Convert the priority queue to a list.  O(N).'],['fun','erlbench','pqueue4:filter/1','  Filter a specific priority within the priority '],['fun','erlbench','pqueue4:filter/1','  Filter the priority queue.  O(N).'],['fun','erlbench','pqueue4:in/1','  Append an item to the tail of a specific priori'],['fun','erlbench','pqueue4:in/1','  Append an item to the tail of the 0 priority qu'],['fun','erlbench','pqueue4:is_empty/1','  Check if the priority queue is empty.  O(1).'],['fun','erlbench','pqueue4:is_queue/1','  Check if the priority queue type is as expected'],['fun','erlbench','pqueue4:len/1','  Determine the length of a priority queue.  O(1'],['fun','erlbench','pqueue4:new/0','  Create a new priority queue.  O(1).'],['fun','erlbench','pqueue4:out/1','  Take an item of a specific priority from the he'],['fun','erlbench','pqueue4:out/1','  Take an item from the head of the priority queu'],['fun','erlbench','pqueue4:pout/1','  Take an item from the head of the priority queu'],['fun','erlbench','pqueue4:remove_unique/1','  Remove a unique value in a specific priority wi'],['fun','erlbench','pqueue4:remove_unique/1','  Remove a unique value from the priority queue w'],['fun','erlbench','pqueue4:to_list/1','  Convert the priority queue to a list.  O(N).'],['fun','erlbench','pqueue4:to_plist/1','  Convert the priority queue to a list with prior'],['fun','erlbench','pqueue:in/1','  Append an item to the tail of a specific priori'],['fun','erlbench','pqueue:in/1','  Append an item to the tail of the 0 priority qu'],['fun','erlbench','pqueue:is_empty/1','  Check if the priority queue is empty.  O(1).'],['fun','erlbench','pqueue:is_queue/1','  Check if the priority queue type is as expected'],['fun','erlbench','pqueue:join/1','  Join two priority queues.  O(N).'],['fun','erlbench','pqueue:len/1','  Determine the length of a priority queue.  O(N'],['fun','erlbench','pqueue:new/0','  Create a new priority queue.  O(1).'],['fun','erlbench','pqueue:out/1','  Take an item of a specific priority from the he'],['fun','erlbench','pqueue:out/1','  Take an item from the head of the priority queu'],['fun','erlbench','pqueue:pout/1','  Take an item from the head of the priority queu'],['fun','erlbench','pqueue:test/0','  Regression test..'],['fun','erlbench','pqueue:to_list/1','  Convert the priority queue to a list.  O(N).'],['fun','erlbench','pqueue_priorities2:get/3',[]],['fun','erlbench','pqueue_priorities2:set/3',[]],['fun','erlbench','pqueue_priorities2:test/0',[]],['fun','erlbench','pqueue_priorities2:test/1',[]],['fun','erlbench','pqueue_priorities41:get/3',[]],['fun','erlbench','pqueue_priorities41:set/3',[]],['fun','erlbench','pqueue_priorities41:test/0',[]],['fun','erlbench','pqueue_priorities41:test/1',[]],['fun','erlbench','pqueue_priorities64:get/3',[]],['fun','erlbench','pqueue_priorities64:set/3',[]],['fun','erlbench','pqueue_priorities64:test/0',[]],['fun','erlbench','pqueue_priorities64:test/1',[]],['fun','erlbench','pqueue_priority0:get/3',[]],['fun','erlbench','pqueue_priority0:set/3',[]],['fun','erlbench','pqueue_priority0:test/0',[]],['fun','erlbench','pqueue_priority0:test/1',[]],['fun','erlbench','priority_queue:in/2',[]],['fun','erlbench','priority_queue:in/3',[]],['fun','erlbench','priority_queue:is_empty/1',[]],['fun','erlbench','priority_queue:is_queue/1',[]],['fun','erlbench','priority_queue:join/2',[]],['fun','erlbench','priority_queue:len/1',[]],['fun','erlbench','priority_queue:new/0',[]],['fun','erlbench','priority_queue:out/1',[]],['fun','erlbench','priority_queue:out/2',[]],['fun','erlbench','priority_queue:pout/1',[]],['fun','erlbench','priority_queue:to_list/1',[]],['fun','erlbench','pseudo_randomness:run/2',[]],['fun','erlbench','pseudo_randomness:test/1',[]],['fun','erlbench','queue_in_out:get/3',[]],['fun','erlbench','queue_in_out:set/3',[]],['fun','erlbench','queue_in_out:test/0',[]],['fun','erlbench','queue_in_out:test/1',[]],['fun','erlbench','random_wh06_int:next_sequence/1',[]],['fun','erlbench','random_wh06_int:seed/0',[]],['fun','erlbench','random_wh06_int:seed/1',[]],['fun','erlbench','random_wh06_int:seed/1',[]],['fun','erlbench','random_wh06_int:seed0/0',[]],['fun','erlbench','random_wh06_int:uniform/0',[]],['fun','erlbench','random_wh06_int:uniform/1',[]],['fun','erlbench','random_wh06_int:uniform_s/1',[]],['fun','erlbench','random_wh06_int:uniform_s/1',[]],['fun','erlbench','rbdict:all/1',[]],['fun','erlbench','rbdict:any/1',[]],['fun','erlbench','rbdict:append/1',[]],['fun','erlbench','rbdict:append_list/1',[]],['fun','erlbench','rbdict:dict_to_list/1',[]],['fun','erlbench','rbdict:erase/1',[]],['fun','erlbench','rbdict:fetch/1',[]],['fun','erlbench','rbdict:fetch_keys/1',[]],['fun','erlbench','rbdict:filter/1',[]],['fun','erlbench','rbdict:find/1',[]],['fun','erlbench','rbdict:fold/1',[]],['fun','erlbench','rbdict:foreach/1',[]],['fun','erlbench','rbdict:from_list/1',[]],['fun','erlbench','rbdict:is_key/1',[]],['fun','erlbench','rbdict:iter/1',[]],['fun','erlbench','rbdict:itera/1',[]],['fun','erlbench','rbdict:list_to_dict/1',[]],['fun','erlbench','rbdict:map/1',[]],['fun','erlbench','rbdict:merge/1',[]],['fun','erlbench','rbdict:new/0',[]],['fun','erlbench','rbdict:size/1',[]],['fun','erlbench','rbdict:store/1',[]],['fun','erlbench','rbdict:to_list/1',[]],['fun','erlbench','rbdict:update/1',[]],['fun','erlbench','rbdict:update/1',[]],['fun','erlbench','rbdict:update_counter/1',[]],['fun','erlbench','rbdict:update_val/1',[]],['fun','erlbench','run:test/0',[]],['fun','erlbench','shuffle:shuffle/1',[]],['fun','erlbench','string_key:get/3',[]],['fun','erlbench','string_key:get_concurrent/2',[]],['fun','erlbench','string_key:set/3',[]],['fun','erlbench','string_key:test/0',[]],['fun','erlbench','string_key:test/1',[]],['fun','erlbench','trie:append/1',[]],['fun','erlbench','trie:append_list/1',[]],['fun','erlbench','trie:erase/1',[]],['fun','erlbench','trie:erase_similar/1',[]],['fun','erlbench','trie:fetch/1',[]],['fun','erlbench','trie:fetch_keys/1',[]],['fun','erlbench','trie:fetch_keys_similar/1',[]],['fun','erlbench','trie:filter/1',[]],['fun','erlbench','trie:find/1',[]],['fun','erlbench','trie:find_match/1','  Find a match with patterns held within a trie.'],['fun','erlbench','trie:find_prefix/1',[]],['fun','erlbench','trie:find_prefix_longest/1',[]],['fun','erlbench','trie:find_prefixes/1',[]],['fun','erlbench','trie:find_similar/1','  Find the first key/value pair in a trie where t'],['fun','erlbench','trie:fold/1',[]],['fun','erlbench','trie:fold_match/1','  Fold a function over the keys within a trie tha'],['fun','erlbench','trie:fold_similar/1',[]],['fun','erlbench','trie:foldl/1',[]],['fun','erlbench','trie:foldl_similar/1',[]],['fun','erlbench','trie:foldr/1',[]],['fun','erlbench','trie:foldr_similar/1',[]],['fun','erlbench','trie:foreach/1',[]],['fun','erlbench','trie:from_list/1',[]],['fun','erlbench','trie:is_key/1',[]],['fun','erlbench','trie:is_pattern/1','  Test to determine if a string is a pattern.  "'],['fun','erlbench','trie:is_prefix/1','  Determine if the prefix provided has existed wi'],['fun','erlbench','trie:is_prefixed/1','  Determine if the provided string has an accepta'],['fun','erlbench','trie:is_prefixed/1','  Determine if the provided string has a prefix w'],['fun','erlbench','trie:iter/1','  Iterate over a trie.  Traverses in alphabetica'],['fun','erlbench','trie:itera/1','  Iterate over a trie with an accumulator.  Trav'],['fun','erlbench','trie:map/1',[]],['fun','erlbench','trie:merge/1',[]],['fun','erlbench','trie:new/0',[]],['fun','erlbench','trie:new/1',[]],['fun','erlbench','trie:pattern_parse/1','  Parse a string based on the supplied wildcard p'],['fun','erlbench','trie:pattern_parse/1','  Parse a string based on the supplied wildcard p'],['fun','erlbench','trie:prefix/1',[]],['fun','erlbench','trie:size/1',[]],['fun','erlbench','trie:store/1',[]],['fun','erlbench','trie:store/1',[]],['fun','erlbench','trie:to_list/1',[]],['fun','erlbench','trie:to_list_similar/1',[]],['fun','erlbench','trie:update/1',[]],['fun','erlbench','trie:update/1',[]],['fun','erlbench','trie:update_counter/1',[]],['fun','erlbench','trie_prefix:get/3',[]],['fun','erlbench','trie_prefix:set/3',[]],['fun','erlbench','trie_prefix:test/0',[]],['fun','erlbench','trie_prefix:test/1',[]],['fun','erlbench','uuid_creation:run/2',[]],['fun','erlbench','uuid_creation:run/3',[]],['fun','erlbench','uuid_creation:test/1',[]]];