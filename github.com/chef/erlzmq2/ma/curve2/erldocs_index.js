var index = [['app','erlzmq2','erlzmq2','[application]'],['mod','erlzmq2','erlzmq',[]],['fun','erlzmq2','erlzmq:bind/1','Accept connections on a socket.'],['fun','erlzmq2','erlzmq:close/1','Close the given socket.'],['fun','erlzmq2','erlzmq:close/1','Equivalent to close(Socket, infinity).'],['fun','erlzmq2','erlzmq:connect/1','Connect a socket.'],['fun','erlzmq2','erlzmq:context/0','Equivalent to context(1, []).'],['fun','erlzmq2','erlzmq:context/1','Create a new erlzmq context with the specified num'],['fun','erlzmq2','erlzmq:context/1','Equivalent to context(Threads, []) or context(1, O'],['fun','erlzmq2','erlzmq:ctx_get/1','Get an option associated with a context.'],['fun','erlzmq2','erlzmq:ctx_set/1','Set an option associated with an option.'],['fun','erlzmq2','erlzmq:curve_keypair/0','Generate a Curve keypair.'],['fun','erlzmq2','erlzmq:getsockopt/1','Get an option associated with a socket.'],['fun','erlzmq2','erlzmq:recv/1','Receive a message from a socket.'],['fun','erlzmq2','erlzmq:recv/1','Equivalent to recv(Socket, 0).'],['fun','erlzmq2','erlzmq:recvmsg/1','This function exists for zeromq api compatibility '],['fun','erlzmq2','erlzmq:recvmsg/1','This function exists for zeromq api compatibility '],['fun','erlzmq2','erlzmq:send/1','Send a message on a socket.'],['fun','erlzmq2','erlzmq:send/1','Equivalent to send(Socket, Msg, []).'],['fun','erlzmq2','erlzmq:sendmsg/1','This function exists for zeromq api compatibility '],['fun','erlzmq2','erlzmq:sendmsg/1','This function exists for zeromq api compatibility '],['fun','erlzmq2','erlzmq:setsockopt/1','Set an option associated with a socket.'],['fun','erlzmq2','erlzmq:socket/1','Create a socket.'],['fun','erlzmq2','erlzmq:term/1','Terminate the given context waiting up to Timeout '],['fun','erlzmq2','erlzmq:term/1','Equivalent to term(Context, infinity).'],['fun','erlzmq2','erlzmq:version/0','Returns the 0MQ library version.'],['fun','erlzmq2','erlzmq:z85_decode/1','Decode a Z85-encode binary.']];