var index = [['app','leo_rpc','leo_rpc','[application]'],['mod','leo_rpc','leo_rpc','leo_rpc is an original RPC library       whose in'],['mod','leo_rpc','leo_rpc_app',[]],['mod','leo_rpc','leo_rpc_client_conn','leo_rpc_client_conn is a rpc-client.'],['mod','leo_rpc','leo_rpc_protocol','leo_rpc_protocol handles requested data with the p'],['mod','leo_rpc','leo_rpc_server','leo_rpc_server is a rpc-server.'],['mod','leo_rpc','leo_rpc_server_listener','leo_rpc_server_listener is a rpc-servers listener'],['mod','leo_rpc','leo_rpc_sup',[]],['fun','leo_rpc','leo_rpc:async_call/4','Implements call streams with promises, a type of R'],['fun','leo_rpc','leo_rpc:call/4','Evaluates apply(Module, Function, Args) on the nod'],['fun','leo_rpc','leo_rpc:call/5','Evaluates apply(Module, Function, Args) on the nod'],['fun','leo_rpc','leo_rpc:call/6','Evaluates apply(Module, Function, Args) on the nod'],['fun','leo_rpc','leo_rpc:cast/4','No response is delivered and the calling process i'],['fun','leo_rpc','leo_rpc:multicall/4','A multicall is an RPC which is sent concurrently f'],['fun','leo_rpc','leo_rpc:multicall/5','A multicall is an RPC which is sent concurrently f'],['fun','leo_rpc','leo_rpc:nb_yield/1','This is able to call non-blocking.'],['fun','leo_rpc','leo_rpc:nb_yield/2','This is able to call non-blocking.'],['fun','leo_rpc','leo_rpc:node/0','Returns the name of the local node.'],['fun','leo_rpc','leo_rpc:nodes/0','Returns a list of all connected nodes in the syste'],['fun','leo_rpc','leo_rpc:ping/1','Tries to set up a connection to Node.'],['fun','leo_rpc','leo_rpc:port/0','Returns the port number of the local node.'],['fun','leo_rpc','leo_rpc:start/0','Launch leo-rpc.'],['fun','leo_rpc','leo_rpc:status/0','Retrieve status of active connections.'],['fun','leo_rpc','leo_rpc_app:prep_stop/1',[]],['fun','leo_rpc','leo_rpc_app:profile_output/0',[]],['fun','leo_rpc','leo_rpc_app:start/2',[]],['fun','leo_rpc','leo_rpc_app:stop/1',[]],['fun','leo_rpc','leo_rpc_client_conn:request/3',[]],['fun','leo_rpc','leo_rpc_protocol:handle_call/3','Receive data from client(s)         after that co'],['fun','leo_rpc','leo_rpc_protocol:init/1','Initialize the protocol.'],['fun','leo_rpc','leo_rpc_protocol:param_to_binary/3','Convert from param to binary.'],['fun','leo_rpc','leo_rpc_protocol:result_to_binary/1','Convert from result-value to binary.'],['fun','leo_rpc','leo_rpc_protocol:start_link/0','Start leo_rpcs server.'],['fun','leo_rpc','leo_rpc_protocol:start_link/1','Start leo_rpcs server.'],['fun','leo_rpc','leo_rpc_protocol:stop/0','Stop leo_rpcs server.'],['fun','leo_rpc','leo_rpc_server:start_link/3','Start tcp-listener of the rpc-server.'],['fun','leo_rpc','leo_rpc_server:stop/0','Stop tcp-listener(s).'],['fun','leo_rpc','leo_rpc_server_listener:accept/5','Callback - Accept the communication.'],['fun','leo_rpc','leo_rpc_server_listener:init/5','Callback - Initialize the server.'],['fun','leo_rpc','leo_rpc_server_listener:start_link/5','Start a rpc-servers listener.'],['fun','leo_rpc','leo_rpc_sup:init/1',[]],['fun','leo_rpc','leo_rpc_sup:start_link/0',[]],['fun','leo_rpc','leo_rpc_sup:stop/0',[]]];