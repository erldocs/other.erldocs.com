var index = [['app','fannerl','fannerl','[application]'],['mod','fannerl','fannerl','.'],['fun','fannerl','fannerl:copy/1','Equivalent to copy_on(fannerl, Network).'],['fun','fannerl','fannerl:copy_on/2','Creates a copy of a fann structure.'],['fun','fannerl','fannerl:create/1','Equivalent to create_on(fannerl, Layers, Options).'],['fun','fannerl','fannerl:create/1','Equivalent to create_on(fannerl, Layers, default_o'],['fun','fannerl','fannerl:create_from_file/1','Creates an artificial neural network from a previo'],['fun','fannerl','fannerl:create_from_file/1','Equivalent to create_from_file(fannerl, FileName).'],['fun','fannerl','fannerl:create_on/1','Creates an artificial neural network with any numb'],['fun','fannerl','fannerl:create_on/1','Equivalent to create_on(Instance, Layers, default_'],['fun','fannerl','fannerl:destroy/1','Equivalent to destroy_on(fannerl, Network).'],['fun','fannerl','fannerl:destroy_on/1','This will destroy all references to the neural net'],['fun','fannerl','fannerl:get_params/1','Equivalent to get_params_on(fannerl, Network).'],['fun','fannerl','fannerl:get_params_on/1','Fetch all the parameters associated with the neura'],['fun','fannerl','fannerl:read_train_from_file/1','Equivalent to read_train_from_file_on(fannerl, Fil'],['fun','fannerl','fannerl:read_train_from_file_on/1','Reads a file that stores training data.'],['fun','fannerl','fannerl:run/1','Equivalent to run_on(fannerl, Network, Input).'],['fun','fannerl','fannerl:run_on/1','Will run input through the neural network, returni'],['fun','fannerl','fannerl:save/1','Equivalent to save_on(fannerl, FileName).'],['fun','fannerl','fannerl:save_on/1','Save the entire network to a configuration file.'],['fun','fannerl','fannerl:shuffle_train/1','Equivalent to shuffle_train_on(fannerl, Train).'],['fun','fannerl','fannerl:shuffle_train_on/1','Shuffles training data, randomizing the order.'],['fun','fannerl','fannerl:start/0','Start an instance of the port driver that can be u'],['fun','fannerl','fannerl:start_instance/0','Start an instance of the port driver that can be u'],['fun','fannerl','fannerl:stop/0','This will stop the process interfacing the FANN li'],['fun','fannerl','fannerl:stop_instance/1','This will stop this instances process interfacing'],['fun','fannerl','fannerl:subset_train_data/1','Equivalent to subset_train_data_on(fannerl, Train,'],['fun','fannerl','fannerl:subset_train_data_on/1','Returns an copy of a subset of the struct fann_tra'],['fun','fannerl','fannerl:test/1','Equivalent to test_on(fannerl, Network, Input, Des'],['fun','fannerl','fannerl:test_data/1','Equivalent to test_data(fannerl, Network, Train).'],['fun','fannerl','fannerl:test_data_on/1','Test a set of training data and calculates the MSE'],['fun','fannerl','fannerl:test_on/1','Test with a set of inputs, and a set of desired ou'],['fun','fannerl','fannerl:train/1','Equivalent to train_on(fannerl, Network, Input, De'],['fun','fannerl','fannerl:train_epoch/1','Equivalent to train_epoch_on(fannerl, Network, Tra'],['fun','fannerl','fannerl:train_epoch_on/2','This will train your neural network for one epoch '],['fun','fannerl','fannerl:train_on/1','Train one iteration with a set of inputs, and a se'],['fun','fannerl','fannerl:train_on_data/1','Equivalent to train_on_data_on(fannerl, Network, T'],['fun','fannerl','fannerl:train_on_data_on/1','Trains on an entire dataset, for a chosen period o'],['fun','fannerl','fannerl:train_on_file/1','Equivalent to train_on_file_on(fannerl, Network, F'],['fun','fannerl','fannerl:train_on_file_on/1','Does the same as train_on_data_on/5, but reads the']];