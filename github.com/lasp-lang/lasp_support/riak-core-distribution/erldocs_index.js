var index = [['app','lasp_support','lasp_support','[application]'],['mod','lasp_support','app_helper',[]],['mod','lasp_support','dvvset','  An Erlang implementation of *compact* Dotted Ve'],['mod','lasp_support','hashtree_tree','This module implements a specialized hash tree tha'],['fun','lasp_support','app_helper:get_env/1','The official way to get a value from this applicat'],['fun','lasp_support','app_helper:get_env/1','The official way to get a value from the apps env'],['fun','lasp_support','app_helper:get_env/1','Retrieve all Key/Value pairs in the env for the sp'],['fun','lasp_support','app_helper:get_prop_or_env/1','Return the value for Key in Properties if it exist'],['fun','lasp_support','app_helper:get_prop_or_env/1','Retrieve value for Key from Properties if it exist'],['fun','lasp_support','app_helper:try_envs/1',[]],['fun','lasp_support','app_helper:try_envs/1','Like get_env but try multiple {App, Key} combos be'],['fun','lasp_support','dvvset:equal/1','Compares the equality of both clocks, regarding  '],['fun','lasp_support','dvvset:ids/1','Returns all the ids used in this clock set.'],['fun','lasp_support','dvvset:join/1','Return a version vector that represents the causal'],['fun','lasp_support','dvvset:last/1','Returns the latest value in the clock set,  accor'],['fun','lasp_support','dvvset:less/1','Returns True if the first clock is causally older '],['fun','lasp_support','dvvset:lww/1','Return a clock with the same causal history, but w'],['fun','lasp_support','dvvset:map/1','Maps (applies) a function on all values in this cl'],['fun','lasp_support','dvvset:new/1','Constructs a new clock set with the causal history'],['fun','lasp_support','dvvset:new/1','Constructs a new clock set without causal history,'],['fun','lasp_support','dvvset:reconcile/1','Return a clock with the same causal history, but w'],['fun','lasp_support','dvvset:size/1','Returns the total number of values in this clock s'],['fun','lasp_support','dvvset:sync/1','Synchronizes a list of clocks using sync/2.'],['fun','lasp_support','dvvset:update/1','Advances the causal history of the  first clock w'],['fun','lasp_support','dvvset:update/1','Advances the causal history with the given id.'],['fun','lasp_support','dvvset:values/1','Returns all the values used in this clock set,  i'],['fun','lasp_support','hashtree_tree:compare/1','Compare a local and remote tree.'],['fun','lasp_support','hashtree_tree:destroy/1','Destroys the tree cleaning up any used resources.'],['fun','lasp_support','hashtree_tree:get_bucket/1','Returns the hashtree buckets for a given node in t'],['fun','lasp_support','hashtree_tree:insert/1','Insert a hash into the tree.'],['fun','lasp_support','hashtree_tree:insert/1','an alias for insert(Prefixes, Key, Hash, [], Tree)'],['fun','lasp_support','hashtree_tree:key_hashes/1','Returns the hashtree segment hashes for a given no'],['fun','lasp_support','hashtree_tree:local_compare/1','Compare two local trees.'],['fun','lasp_support','hashtree_tree:new/1','Creates a new hashtree.'],['fun','lasp_support','hashtree_tree:prefix_hash/1','Returns the top-hash of the node corresponding to '],['fun','lasp_support','hashtree_tree:top_hash/1','Returns the top-hash of the tree.'],['fun','lasp_support','hashtree_tree:update_perform/1','Update the tree with a snapshot obtained by update'],['fun','lasp_support','hashtree_tree:update_snapshot/1','Snapshot the tree for updating.']];