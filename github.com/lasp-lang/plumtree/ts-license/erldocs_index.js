var index = [['app','plumtree','plumtree','[application]'],['mod','plumtree','app_helper',[]],['mod','plumtree','dvvset','  An Erlang implementation of *compact* Dotted Ve'],['mod','plumtree','hashtree_tree','This module implements a specialized hash tree tha'],['mod','plumtree','plumtree',[]],['mod','plumtree','plumtree_app',[]],['mod','plumtree','plumtree_broadcast',[]],['mod','plumtree','plumtree_broadcast_handler',[]],['mod','plumtree','plumtree_metadata',[]],['mod','plumtree','plumtree_metadata_exchange_fsm',[]],['mod','plumtree','plumtree_metadata_hashtree',[]],['mod','plumtree','plumtree_metadata_manager',[]],['mod','plumtree','plumtree_metadata_object',[]],['mod','plumtree','plumtree_peer_service',[]],['mod','plumtree','plumtree_peer_service_events',[]],['mod','plumtree','plumtree_peer_service_gossip',[]],['mod','plumtree','plumtree_peer_service_manager',[]],['mod','plumtree','plumtree_sup',[]],['mod','plumtree','plumtree_util',[]],['fun','plumtree','app_helper:get_env/1','The official way to get a value from this applicat'],['fun','plumtree','app_helper:get_env/1','The official way to get a value from the apps env'],['fun','plumtree','app_helper:get_env/1','Retrieve all Key/Value pairs in the env for the sp'],['fun','plumtree','app_helper:get_prop_or_env/1','Return the value for Key in Properties if it exist'],['fun','plumtree','app_helper:get_prop_or_env/1','Retrieve value for Key from Properties if it exist'],['fun','plumtree','app_helper:try_envs/1',[]],['fun','plumtree','app_helper:try_envs/1','Like get_env but try multiple {App, Key} combos be'],['fun','plumtree','dvvset:equal/1','Compares the equality of both clocks, regarding  '],['fun','plumtree','dvvset:ids/1','Returns all the ids used in this clock set.'],['fun','plumtree','dvvset:join/1','Return a version vector that represents the causal'],['fun','plumtree','dvvset:last/1','Returns the latest value in the clock set,  accor'],['fun','plumtree','dvvset:less/1','Returns True if the first clock is causally older '],['fun','plumtree','dvvset:lww/1','Return a clock with the same causal history, but w'],['fun','plumtree','dvvset:map/1','Maps (applies) a function on all values in this cl'],['fun','plumtree','dvvset:new/1','Constructs a new clock set with the causal history'],['fun','plumtree','dvvset:new/1','Constructs a new clock set without causal history,'],['fun','plumtree','dvvset:reconcile/1','Return a clock with the same causal history, but w'],['fun','plumtree','dvvset:size/1','Returns the total number of values in this clock s'],['fun','plumtree','dvvset:sync/1','Synchronizes a list of clocks using sync/2.'],['fun','plumtree','dvvset:update/1','Advances the causal history of the  first clock w'],['fun','plumtree','dvvset:update/1','Advances the causal history with the given id.'],['fun','plumtree','dvvset:values/1','Returns all the values used in this clock set,  i'],['fun','plumtree','hashtree_tree:compare/1','Compare a local and remote tree.'],['fun','plumtree','hashtree_tree:destroy/1','Destroys the tree cleaning up any used resources.'],['fun','plumtree','hashtree_tree:get_bucket/1','Returns the hashtree buckets for a given node in t'],['fun','plumtree','hashtree_tree:insert/1','Insert a hash into the tree.'],['fun','plumtree','hashtree_tree:insert/1','an alias for insert(Prefixes, Key, Hash, [], Tree)'],['fun','plumtree','hashtree_tree:key_hashes/1','Returns the hashtree segment hashes for a given no'],['fun','plumtree','hashtree_tree:local_compare/1','Compare two local trees.'],['fun','plumtree','hashtree_tree:new/1','Creates a new hashtree.'],['fun','plumtree','hashtree_tree:prefix_hash/1','Returns the top-hash of the node corresponding to '],['fun','plumtree','hashtree_tree:top_hash/1','Returns the top-hash of the tree.'],['fun','plumtree','hashtree_tree:update_perform/1','Update the tree with a snapshot obtained by update'],['fun','plumtree','hashtree_tree:update_snapshot/1','Snapshot the tree for updating.'],['fun','plumtree','plumtree:start/0',[]],['fun','plumtree','plumtree:stop/0',[]],['fun','plumtree','plumtree_app:start/2',[]],['fun','plumtree','plumtree_app:stop/1',[]],['fun','plumtree','plumtree_broadcast:broadcast/1','Broadcasts a message originating from this node.'],['fun','plumtree','plumtree_broadcast:broadcast_members/0','Returns the broadcast servers view of full cluster'],['fun','plumtree','plumtree_broadcast:broadcast_members/1','Returns the broadcast servers view of full cluster'],['fun','plumtree','plumtree_broadcast:cancel_exchanges/2','cancel exchanges started by this node.'],['fun','plumtree','plumtree_broadcast:debug_get_peers/1','return the peers for Node for the tree rooted at R'],['fun','plumtree','plumtree_broadcast:debug_get_peers/1','return the peers for Node for the tree rooted at R'],['fun','plumtree','plumtree_broadcast:debug_get_tree/1','return peers for all Nodes for tree rooted at Root'],['fun','plumtree','plumtree_broadcast:exchanges/0','return a list of exchanges, started by broadcast o'],['fun','plumtree','plumtree_broadcast:exchanges/1','returns a list of exchanges, started by broadcast '],['fun','plumtree','plumtree_broadcast:start_link/0','Starts the broadcast server on this node.'],['fun','plumtree','plumtree_broadcast:start_link/1','Starts the broadcast server on this node.'],['fun','plumtree','plumtree_broadcast:update/1','Notifies broadcast server of membership update.'],['fun','plumtree','plumtree_metadata:delete/1','Removes the value associated with the given prefix'],['fun','plumtree','plumtree_metadata:delete/1','same as delete(FullPrefix, Key, []).'],['fun','plumtree','plumtree_metadata:fold/1','Fold over all keys and values stored under a given'],['fun','plumtree','plumtree_metadata:fold/1','same as fold(Fun, Acc0, FullPrefix, []).'],['fun','plumtree','plumtree_metadata:get/1','Retrieves the local value stored at the given pref'],['fun','plumtree','plumtree_metadata:get/1','same as get(FullPrefix, Key, []).'],['fun','plumtree','plumtree_metadata:iterator/1','Return an iterator pointing to the first key store'],['fun','plumtree','plumtree_metadata:iterator/1','same as iterator(FullPrefix, []).'],['fun','plumtree','plumtree_metadata:itr_close/1','Closes the iterator.'],['fun','plumtree','plumtree_metadata:itr_default/1','Returns the value returned when an iterator points'],['fun','plumtree','plumtree_metadata:itr_done/1','Returns true if there is nothing more to iterate o'],['fun','plumtree','plumtree_metadata:itr_key/1','Return the key pointed at by the iterator.'],['fun','plumtree','plumtree_metadata:itr_key_values/1','Return the key and value(s) pointed at by the iter'],['fun','plumtree','plumtree_metadata:itr_next/1','Advances the iterator.'],['fun','plumtree','plumtree_metadata:itr_value/1','Return a single value pointed at by the iterator.'],['fun','plumtree','plumtree_metadata:itr_values/1','Return all sibling values pointed at by the iterat'],['fun','plumtree','plumtree_metadata:prefix_hash/1','Return the local hash associated with a full-prefi'],['fun','plumtree','plumtree_metadata:put/1','Stores or updates the value at the given prefix an'],['fun','plumtree','plumtree_metadata:put/1','same as put(FullPrefix, Key, Value, []).'],['fun','plumtree','plumtree_metadata:to_list/1','Return a list of all keys and values stored under '],['fun','plumtree','plumtree_metadata:to_list/1','same as to_list(FullPrefix, []).'],['fun','plumtree','plumtree_metadata_exchange_fsm:code_change/4',[]],['fun','plumtree','plumtree_metadata_exchange_fsm:exchange/2',[]],['fun','plumtree','plumtree_metadata_exchange_fsm:exchange/3',[]],['fun','plumtree','plumtree_metadata_exchange_fsm:handle_event/3',[]],['fun','plumtree','plumtree_metadata_exchange_fsm:handle_info/3',[]],['fun','plumtree','plumtree_metadata_exchange_fsm:handle_sync_event/4',[]],['fun','plumtree','plumtree_metadata_exchange_fsm:init/1',[]],['fun','plumtree','plumtree_metadata_exchange_fsm:prepare/2',[]],['fun','plumtree','plumtree_metadata_exchange_fsm:prepare/3',[]],['fun','plumtree','plumtree_metadata_exchange_fsm:start/1','Start an exchange of Cluster Metadata hashtrees be'],['fun','plumtree','plumtree_metadata_exchange_fsm:terminate/3',[]],['fun','plumtree','plumtree_metadata_exchange_fsm:update/2',[]],['fun','plumtree','plumtree_metadata_exchange_fsm:update/3',[]],['fun','plumtree','plumtree_metadata_hashtree:code_change/3',[]],['fun','plumtree','plumtree_metadata_hashtree:compare/1','Compare the local tree managed by this process wit'],['fun','plumtree','plumtree_metadata_hashtree:get_bucket/1','Return the bucket for a node in the tree managed b'],['fun','plumtree','plumtree_metadata_hashtree:handle_call/3',[]],['fun','plumtree','plumtree_metadata_hashtree:handle_cast/2',[]],['fun','plumtree','plumtree_metadata_hashtree:handle_info/2',[]],['fun','plumtree','plumtree_metadata_hashtree:init/1',[]],['fun','plumtree','plumtree_metadata_hashtree:insert/1','Insert a hash for a full-prefix and key into the t'],['fun','plumtree','plumtree_metadata_hashtree:insert/1','Same as insert(PKey, Hash, false).'],['fun','plumtree','plumtree_metadata_hashtree:key_hashes/1','Return the key hashes for a node in the tree manag'],['fun','plumtree','plumtree_metadata_hashtree:lock/0','Locks the tree on this node for updating on behalf'],['fun','plumtree','plumtree_metadata_hashtree:lock/1','Lock the tree for updating.'],['fun','plumtree','plumtree_metadata_hashtree:lock/1','Locks the tree on Node for updating on behalf of t'],['fun','plumtree','plumtree_metadata_hashtree:prefix_hash/1','Return the hash for the given prefix or full-prefi'],['fun','plumtree','plumtree_metadata_hashtree:start_link/0','Starts the process using start_link/1, passing in '],['fun','plumtree','plumtree_metadata_hashtree:start_link/1','Starts a registered process that manages a hashtre'],['fun','plumtree','plumtree_metadata_hashtree:terminate/2',[]],['fun','plumtree','plumtree_metadata_hashtree:update/0','Updates the tree on this node.'],['fun','plumtree','plumtree_metadata_hashtree:update/1','Updates the tree on Node.'],['fun','plumtree','plumtree_metadata_manager:broadcast_data/1','Deconstructs are broadcast that is sent using plum'],['fun','plumtree','plumtree_metadata_manager:exchange/1','Trigger an exchange.'],['fun','plumtree','plumtree_metadata_manager:get/1','Same as get/1 but reads the value from Node'],['fun','plumtree','plumtree_metadata_manager:get/1','Reads the value for a prefixed key.'],['fun','plumtree','plumtree_metadata_manager:graft/1','returns the object associated with the given key a'],['fun','plumtree','plumtree_metadata_manager:is_stale/1','Returns false if the update (or a causally newer u'],['fun','plumtree','plumtree_metadata_manager:iterate/1','advance the iterator by one key, full-prefix or su'],['fun','plumtree','plumtree_metadata_manager:iterator/0','Returns a full-prefix iterator: an iterator for al'],['fun','plumtree','plumtree_metadata_manager:iterator/1','Return an iterator for keys stored under a prefix.'],['fun','plumtree','plumtree_metadata_manager:iterator/1','Returns a sub-prefix iterator for a given prefix.'],['fun','plumtree','plumtree_metadata_manager:iterator_close/1','Closes the iterator.'],['fun','plumtree','plumtree_metadata_manager:iterator_done/1','returns true if there are no more keys or prefixes'],['fun','plumtree','plumtree_metadata_manager:iterator_prefix/1','return the full-prefix or prefix being iterated by'],['fun','plumtree','plumtree_metadata_manager:iterator_value/1','return the key and object or the prefix pointed to'],['fun','plumtree','plumtree_metadata_manager:merge/1','Merges a remote copy of a metadata record sent via'],['fun','plumtree','plumtree_metadata_manager:merge/1','same as merge/2 but merges the object on Node'],['fun','plumtree','plumtree_metadata_manager:put/1','Sets the value of a prefixed key.'],['fun','plumtree','plumtree_metadata_manager:remote_iterator/1','Create an iterator on Node.'],['fun','plumtree','plumtree_metadata_manager:remote_iterator/1','Create an iterator on Node.'],['fun','plumtree','plumtree_metadata_manager:start_link/0','Same as start_link([]).'],['fun','plumtree','plumtree_metadata_manager:start_link/1','Start plumtree_metadadata_manager and link to call'],['fun','plumtree','plumtree_metadata_object:context/1','returns the context (opaque causal history) for th'],['fun','plumtree','plumtree_metadata_object:empty_context/0','returns the representation for an empty context (o'],['fun','plumtree','plumtree_metadata_object:equal_context/1','Returns true if the given context and the context '],['fun','plumtree','plumtree_metadata_object:hash/1','returns a hash representing the metadata objects c'],['fun','plumtree','plumtree_metadata_object:is_stale/1','Determines if the given context (version vector) i'],['fun','plumtree','plumtree_metadata_object:modify/1','modifies a potentially existing object, setting it'],['fun','plumtree','plumtree_metadata_object:reconcile/1','Reconciles a remote object received during replica'],['fun','plumtree','plumtree_metadata_object:resolve/1','Resolves siblings using either last-write-wins or '],['fun','plumtree','plumtree_metadata_object:value/1','returns a single value.'],['fun','plumtree','plumtree_metadata_object:value_count/1','returns the number of siblings in the given object'],['fun','plumtree','plumtree_metadata_object:values/1','returns a list of values held in the object.'],['fun','plumtree','plumtree_peer_service:attempt_join/1',[]],['fun','plumtree','plumtree_peer_service:attempt_join/2',[]],['fun','plumtree','plumtree_peer_service:join/1','prepare node to join a cluster.'],['fun','plumtree','plumtree_peer_service:join/2','Convert nodename to atom.'],['fun','plumtree','plumtree_peer_service:join/3','Initiate join.'],['fun','plumtree','plumtree_peer_service:leave/0',[]],['fun','plumtree','plumtree_peer_service:stop/0',[]],['fun','plumtree','plumtree_peer_service:stop/1',[]],['fun','plumtree','plumtree_peer_service_events:add_callback/1',[]],['fun','plumtree','plumtree_peer_service_events:add_handler/2',[]],['fun','plumtree','plumtree_peer_service_events:add_sup_callback/1',[]],['fun','plumtree','plumtree_peer_service_events:add_sup_handler/2',[]],['fun','plumtree','plumtree_peer_service_events:code_change/3',[]],['fun','plumtree','plumtree_peer_service_events:handle_call/2',[]],['fun','plumtree','plumtree_peer_service_events:handle_event/2',[]],['fun','plumtree','plumtree_peer_service_events:handle_info/2',[]],['fun','plumtree','plumtree_peer_service_events:init/1',[]],['fun','plumtree','plumtree_peer_service_events:start_link/0',[]],['fun','plumtree','plumtree_peer_service_events:terminate/2',[]],['fun','plumtree','plumtree_peer_service_events:update/1',[]],['fun','plumtree','plumtree_peer_service_gossip:code_change/3',[]],['fun','plumtree','plumtree_peer_service_gossip:handle_call/3',[]],['fun','plumtree','plumtree_peer_service_gossip:handle_cast/2',[]],['fun','plumtree','plumtree_peer_service_gossip:handle_info/2',[]],['fun','plumtree','plumtree_peer_service_gossip:init/1',[]],['fun','plumtree','plumtree_peer_service_gossip:receive_state/1',[]],['fun','plumtree','plumtree_peer_service_gossip:start_link/0',[]],['fun','plumtree','plumtree_peer_service_gossip:stop/0',[]],['fun','plumtree','plumtree_peer_service_gossip:terminate/2',[]],['fun','plumtree','plumtree_peer_service_manager:get_actor/0','return local nodes current actor.'],['fun','plumtree','plumtree_peer_service_manager:get_local_state/0','return local nodes view of cluster membership.'],['fun','plumtree','plumtree_peer_service_manager:init/0',[]],['fun','plumtree','plumtree_peer_service_manager:reset_state/0',[]],['fun','plumtree','plumtree_peer_service_manager:update_state/1','update cluster_state.'],['fun','plumtree','plumtree_sup:init/1',[]],['fun','plumtree','plumtree_sup:start_link/0',[]],['fun','plumtree','plumtree_util:build_tree/1','Convert a list of elements into an N-ary tree.']];