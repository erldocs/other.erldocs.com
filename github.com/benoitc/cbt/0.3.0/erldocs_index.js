var index = [['app','cbt','cbt','[application]'],['mod','cbt','cbt_btree',[]],['mod','cbt','cbt_compress',[]],['mod','cbt','cbt_file',[]],['mod','cbt','cbt_stream','module to store a large binary (stream) in the dat'],['mod','cbt','cbt_util',[]],['fun','cbt','cbt_btree:add/1','insert a list of key/values in the btree.'],['fun','cbt','cbt_btree:add_remove/1','insert and remove a list of key/values in the btre'],['fun','cbt','cbt_btree:final_reduce/1','apply the reduce function on last reductions.'],['fun','cbt','cbt_btree:fold/1',[]],['fun','cbt','cbt_btree:fold/1','fold key/values in the btree.'],['fun','cbt','cbt_btree:fold_reduce/1','fold reduce values.'],['fun','cbt','cbt_btree:full_reduce/1','return the full reduceed value from the btree.'],['fun','cbt','cbt_btree:get_state/1','return the latest btree root that will be stored i'],['fun','cbt','cbt_btree:less/3',[]],['fun','cbt','cbt_btree:lookup/1','lookup for a list of keys in the btree  Results a'],['fun','cbt','cbt_btree:new/1','create a new btree.'],['fun','cbt','cbt_btree:open/1','open a btree from the file.'],['fun','cbt','cbt_btree:open/1','open a btree from the file.'],['fun','cbt','cbt_btree:query_modify/1','insert and remove a list of key/values and retriev'],['fun','cbt','cbt_btree:set_options/1','set btreee options.'],['fun','cbt','cbt_btree:size/1','return the size in bytes of a btree.'],['fun','cbt','cbt_compress:compress/1','compress an encoded binary with the following type'],['fun','cbt','cbt_compress:decompress/1','decompress a binary to an erlang decoded term.'],['fun','cbt','cbt_compress:is_compressed/1','check if the binary has been compressed.'],['fun','cbt','cbt_file:append_binary/1','append an Erlang binary to the end of the file.'],['fun','cbt','cbt_file:append_binary_crc32/1','append an Erlang binary to the end of the file and'],['fun','cbt','cbt_file:append_raw_chunk/1','like append_binary but wihout manipulating the bin'],['fun','cbt','cbt_file:append_term/1',[]],['fun','cbt','cbt_file:append_term/1','append an Erlang term to the end of the file.'],['fun','cbt','cbt_file:append_term_crc32/1',[]],['fun','cbt','cbt_file:append_term_crc32/1','append an Erlang term to the end of the file and s'],['fun','cbt','cbt_file:assemble_file_chunk/1',[]],['fun','cbt','cbt_file:assemble_file_chunk/2',[]],['fun','cbt','cbt_file:bytes/1','get he length of a file, in bytes.'],['fun','cbt','cbt_file:close/1','Close the file.'],['fun','cbt','cbt_file:code_change/3',[]],['fun','cbt','cbt_file:delete/1','delete a file asynchronously or not.'],['fun','cbt','cbt_file:delete/1','delete a file synchronously.'],['fun','cbt','cbt_file:handle_call/3',[]],['fun','cbt','cbt_file:handle_cast/2',[]],['fun','cbt','cbt_file:handle_info/2',[]],['fun','cbt','cbt_file:init/1',[]],['fun','cbt','cbt_file:init_delete_dir/1','utility function to init the deletion directory wh'],['fun','cbt','cbt_file:nuke_dir/1','utility function to remove completely the content '],['fun','cbt','cbt_file:open/1',[]],['fun','cbt','cbt_file:open/1','open a file in a gen_server that will be used to h'],['fun','cbt','cbt_file:pread_binary/1',' Reads a binrary from a file that was written with'],['fun','cbt','cbt_file:pread_iolist/2',[]],['fun','cbt','cbt_file:pread_term/1','Reads a term from a file that was written with app'],['fun','cbt','cbt_file:read_header/1','read the database header from the database file.'],['fun','cbt','cbt_file:sync/1','Ensure all bytes written to the file are flushed t'],['fun','cbt','cbt_file:terminate/2',[]],['fun','cbt','cbt_file:truncate/1','Truncate a file to the number of bytes.'],['fun','cbt','cbt_file:write_header/1','write the database header at the end of the the da'],['fun','cbt','cbt_stream:close/1','close the stream.'],['fun','cbt','cbt_stream:copy_to_new_stream/1','copy a stream from one file to another.'],['fun','cbt','cbt_stream:foldl/1','like fold/4 but check the signature.'],['fun','cbt','cbt_stream:foldl/1','retrieve all chunks from a list of their positions'],['fun','cbt','cbt_stream:foldl_decode/1','same as fold but decode the chunk if needed.'],['fun','cbt','cbt_stream:open/1','open a new stream.'],['fun','cbt','cbt_stream:open/1','open a new stream.'],['fun','cbt','cbt_stream:range_foldl/1','retrieve all chunks in a range.'],['fun','cbt','cbt_stream:write/1','write a chunk from the stream on the database file'],['fun','cbt','cbt_util:decodeBase64Url/1',[]],['fun','cbt','cbt_util:encodeBase64Url/1',[]],['fun','cbt','cbt_util:ensure_all_started/1',[]],['fun','cbt','cbt_util:ensure_all_started/2',[]],['fun','cbt','cbt_util:get_opt/2',[]],['fun','cbt','cbt_util:get_opt/3',[]],['fun','cbt','cbt_util:get_value/2',[]],['fun','cbt','cbt_util:get_value/3',[]],['fun','cbt','cbt_util:implode/2',[]],['fun','cbt','cbt_util:md5/1',[]],['fun','cbt','cbt_util:md5_final/1',[]],['fun','cbt','cbt_util:md5_init/0',[]],['fun','cbt','cbt_util:md5_update/1',[]],['fun','cbt','cbt_util:rand32/0',[]],['fun','cbt','cbt_util:reorder_results/2',[]],['fun','cbt','cbt_util:should_flush/0',[]],['fun','cbt','cbt_util:should_flush/1',[]],['fun','cbt','cbt_util:uniqid/0',[]]];