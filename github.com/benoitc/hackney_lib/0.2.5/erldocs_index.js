var index = [['app','hackney_lib','hackney_lib','[application]'],['mod','hackney_lib','hackney_bstr',[]],['mod','hackney_lib','hackney_cookie',[]],['mod','hackney_lib','hackney_date',[]],['mod','hackney_lib','hackney_headers','module to manipulate HTTP headers.'],['mod','hackney_lib','hackney_http','HTTP parser in pure Erlang   This parser is able '],['mod','hackney_lib','hackney_multipart','module to encode/decode multipart.'],['mod','hackney_lib','hackney_url','module to manage urls.'],['fun','hackney_lib','hackney_bstr:alpha/1','Parse a list of case-insensitive alpha characters.'],['fun','hackney_lib','hackney_bstr:char_to_lower/1','Convert [A-Z] characters to lowercase.'],['fun','hackney_lib','hackney_bstr:char_to_upper/1','Convert [a-z] characters to uppercase.'],['fun','hackney_lib','hackney_bstr:content_type/1',[]],['fun','hackney_lib','hackney_bstr:digits/1',[]],['fun','hackney_lib','hackney_bstr:digits/1',[]],['fun','hackney_lib','hackney_bstr:digits/1','Parse a list of digits as a non negative integer.'],['fun','hackney_lib','hackney_bstr:join/2',[]],['fun','hackney_lib','hackney_bstr:list/1','Parse a list of the given type.'],['fun','hackney_lib','hackney_bstr:nonempty_list/1','Parse a non-empty list of the given type.'],['fun','hackney_lib','hackney_bstr:parameterized_tokens/1','Parse a non empty list of tokens followed with opt'],['fun','hackney_lib','hackney_bstr:params/1','Parse a list of parameters (a=b;c=d).'],['fun','hackney_lib','hackney_bstr:quoted_string/1',[]],['fun','hackney_lib','hackney_bstr:to_binary/1',[]],['fun','hackney_lib','hackney_bstr:to_hex/1',[]],['fun','hackney_lib','hackney_bstr:to_lower/1','Convert a binary string to lowercase.'],['fun','hackney_lib','hackney_bstr:to_upper/1',[]],['fun','hackney_lib','hackney_bstr:token/1','Parse a token.'],['fun','hackney_lib','hackney_bstr:token_ci/1','Parse a case-insensitive token.'],['fun','hackney_lib','hackney_bstr:whitespace/1','Skip whitespace.'],['fun','hackney_lib','hackney_bstr:word/1','Parse either a token or a quoted string.'],['fun','hackney_lib','hackney_cookie:parse_cookie/1','Parse a cookie header string and return a list of '],['fun','hackney_lib','hackney_cookie:setcookie/1','Convert a cookie name, value and options to its io'],['fun','hackney_lib','hackney_date:asctime_to_date/1','Parse an asctime date.'],['fun','hackney_lib','hackney_date:date_to_rfc2109/1','Return the date formatted according to RFC2109.'],['fun','hackney_lib','hackney_date:parse_http_date/1','Parse an HTTP date (RFC1123, RFC850 or asctime dat'],['fun','hackney_lib','hackney_date:rfc1123_to_date/1','Parse an RFC1123 date.'],['fun','hackney_lib','hackney_date:rfc2109_to_date/1','Parse an RFC2109 date.'],['fun','hackney_lib','hackney_date:rfc850_to_date/1','Parse an RFC850 date.'],['fun','hackney_lib','hackney_headers:content_disposition/1','Parse a content disposition.'],['fun','hackney_lib','hackney_headers:content_type/1','Parse a content type.'],['fun','hackney_lib','hackney_headers:delete/2','Delete the header corresponding to key if it is pr'],['fun','hackney_lib','hackney_headers:fold/3','fold the list of headers.'],['fun','hackney_lib','hackney_headers:get_value/2','get the value of the header.'],['fun','hackney_lib','hackney_headers:get_value/3',[]],['fun','hackney_lib','hackney_headers:header_value/2','join value and params in a binary.'],['fun','hackney_lib','hackney_headers:insert/3','Insert the pair into the headers, merging with any'],['fun','hackney_lib','hackney_headers:insert/4','same as insert/3 but allows to add params to the h'],['fun','hackney_lib','hackney_headers:make_header/2','Create a binary header.'],['fun','hackney_lib','hackney_headers:make_header/3',[]],['fun','hackney_lib','hackney_headers:new/0','initialise an header dict.'],['fun','hackney_lib','hackney_headers:new/1',[]],['fun','hackney_lib','hackney_headers:parse/1','Semantically parse headers.'],['fun','hackney_lib','hackney_headers:store/3','store the pair into the headers, replacing any pre'],['fun','hackney_lib','hackney_headers:to_binary/1','return all the headers as a binary that can be sen'],['fun','hackney_lib','hackney_headers:to_list/1',[]],['fun','hackney_lib','hackney_headers:update/2','extend the headers with a new list of {Key, Value}'],['fun','hackney_lib','hackney_http:execute/1','Execute the parser with the current buffer.'],['fun','hackney_lib','hackney_http:execute/2','Execute the parser with the new buffer.'],['fun','hackney_lib','hackney_http:get/1','retrieve a parser property.'],['fun','hackney_lib','hackney_http:parse_response_version/2',[]],['fun','hackney_lib','hackney_http:parser/0','Create a new HTTP parser.'],['fun','hackney_lib','hackney_http:parser/1','create a new HTTP parser with options.'],['fun','hackney_lib','hackney_multipart:boundary/0',[]],['fun','hackney_lib','hackney_multipart:decode_form/1','decode a multipart form.'],['fun','hackney_lib','hackney_multipart:encode_form/1','encode a list of parts a multiart form.'],['fun','hackney_lib','hackney_multipart:encode_form/2',[]],['fun','hackney_lib','hackney_multipart:len_mp_stream/2','get the size of a mp stream.'],['fun','hackney_lib','hackney_multipart:mp_data_header/1','return the multipart header for a data.'],['fun','hackney_lib','hackney_multipart:mp_eof/1','return the boundary ennding a multipart.'],['fun','hackney_lib','hackney_multipart:mp_file_header/2','return the multipart header for a file that will b'],['fun','hackney_lib','hackney_multipart:mp_header/2','create a generic multipart header.'],['fun','hackney_lib','hackney_multipart:mp_mixed_header/1','return the mixed multipart header.'],['fun','hackney_lib','hackney_multipart:parser/1','Return a multipart parser for the given boundary.'],['fun','hackney_lib','hackney_multipart:part/3','create a part.'],['fun','hackney_lib','hackney_url:fix_path/1',[]],['fun','hackney_lib','hackney_url:make_url/1',' construct an url from a base url, a path and a li'],['fun','hackney_lib','hackney_url:parse_qs/1',[]],['fun','hackney_lib','hackney_url:parse_url/1','Parse an url and return a #hackney_url record.'],['fun','hackney_lib','hackney_url:pathencode/1','encode a URL path.'],['fun','hackney_lib','hackney_url:qs/1','encode query properties to binary.'],['fun','hackney_lib','hackney_url:transport_scheme/1',[]],['fun','hackney_lib','hackney_url:unparse_url/1',[]],['fun','hackney_lib','hackney_url:urldecode/1','Decode a URL encoded binary.'],['fun','hackney_lib','hackney_url:urldecode/1','Decode a URL encoded binary.'],['fun','hackney_lib','hackney_url:urlencode/1','URL encode a string binary.'],['fun','hackney_lib','hackney_url:urlencode/1','URL encode a string binary.']];