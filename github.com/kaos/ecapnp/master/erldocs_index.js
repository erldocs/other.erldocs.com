var index = [['app','ecapnp','ecapnp','[application]'],['mod','ecapnp','c++_capnp',[]],['mod','ecapnp','ecapnp','The highlevel Capn Proto API.'],['mod','ecapnp','ecapnp_capability','Capability support.'],['mod','ecapnp','ecapnp_capability_sup','.'],['mod','ecapnp','ecapnp_compiler','The Erlang Capn Proto Compiler.'],['mod','ecapnp','ecapnp_data','Data server module.'],['mod','ecapnp','ecapnp_get','Read support.'],['mod','ecapnp','ecapnp_message','Message framing.'],['mod','ecapnp','ecapnp_obj','Everything object.'],['mod','ecapnp','ecapnp_promise_sup','.'],['mod','ecapnp','ecapnp_ref','Read/Write/Allocate references.'],['mod','ecapnp','ecapnp_rpc','Everything rpc.'],['mod','ecapnp','ecapnp_schema','Schema functions.'],['mod','ecapnp','ecapnp_serialize','Serialize messages.'],['mod','ecapnp','ecapnp_set','Write support.'],['mod','ecapnp','ecapnp_val','Capn Proto value support.'],['mod','ecapnp','ecapnp_vat','VAT server module.'],['mod','ecapnp','ecapnpc','The Erlang Capn Proto Compiler plugin.'],['mod','ecapnp','rpc-twoparty_capnp',[]],['mod','ecapnp','rpc_capnp',[]],['mod','ecapnp','schema_capnp',[]],['fun','ecapnp','c++_capnp:13386661402618388268/0',[]],['fun','ecapnp','c++_capnp:13688829037717245569/0',[]],['fun','ecapnp','c++_capnp:namespace/0',[]],['fun','ecapnp','c++_capnp:namespace/1',[]],['fun','ecapnp','c++_capnp:root/0',[]],['fun','ecapnp','c++_capnp:root/1',[]],['fun','ecapnp','c++_capnp:schema/1',[]],['fun','ecapnp','ecapnp:const/1','Get const value from schema.'],['fun','ecapnp','ecapnp:dump/1',[]],['fun','ecapnp','ecapnp:get/1','Read the field value of object.'],['fun','ecapnp','ecapnp:get/1','Read the unnamed union value of object.'],['fun','ecapnp','ecapnp:get_root/1','Get the root object for a message.'],['fun','ecapnp','ecapnp:get_root/2',[]],['fun','ecapnp','ecapnp:import_capability/3',[]],['fun','ecapnp','ecapnp:init/2',[]],['fun','ecapnp','ecapnp:init/3',[]],['fun','ecapnp','ecapnp:request/2',[]],['fun','ecapnp','ecapnp:send/1',[]],['fun','ecapnp','ecapnp:set/1','Write value to a field of object.'],['fun','ecapnp','ecapnp:set/1','Write union value to the unnamed union of object.'],['fun','ecapnp','ecapnp:set_root/1',[]],['fun','ecapnp','ecapnp:set_root/1','Set the root object for a new message.'],['fun','ecapnp','ecapnp:wait/1',[]],['fun','ecapnp','ecapnp:wait/2',[]],['fun','ecapnp','ecapnp_capability:send/2',[]],['fun','ecapnp','ecapnp_capability:start/1','  Starts server for a capability described by the'],['fun','ecapnp','ecapnp_capability:start_link/1',[]],['fun','ecapnp','ecapnp_capability:stop/1',[]],['fun','ecapnp','ecapnp_capability_sup:start_capability/2',[]],['fun','ecapnp','ecapnp_capability_sup:start_capability/3',[]],['fun','ecapnp','ecapnp_capability_sup:start_link/0','  Starts the supervisor.'],['fun','ecapnp','ecapnp_compiler:compile/1','Compile a CodeGeneratorRequest message.'],['fun','ecapnp','ecapnp_data:add_ref/2',[]],['fun','ecapnp','ecapnp_data:alloc/1','Allocate data.'],['fun','ecapnp','ecapnp_data:code_change/3',[]],['fun','ecapnp','ecapnp_data:discard_ref/2',[]],['fun','ecapnp','ecapnp_data:get_cap/2',[]],['fun','ecapnp','ecapnp_data:get_cap_idx/2',[]],['fun','ecapnp','ecapnp_data:get_cap_table/1',[]],['fun','ecapnp','ecapnp_data:get_segment/1','Read data from segment.'],['fun','ecapnp','ecapnp_data:get_segment_size/1','Get size of segment, in words (8 bytes).'],['fun','ecapnp','ecapnp_data:get_segments/1','Get all allocated data from all segments.'],['fun','ecapnp','ecapnp_data:handle_call/3',[]],['fun','ecapnp','ecapnp_data:handle_cast/2',[]],['fun','ecapnp','ecapnp_data:handle_info/2',[]],['fun','ecapnp','ecapnp_data:init/1',[]],['fun','ecapnp','ecapnp_data:set_cap_table/2',[]],['fun','ecapnp','ecapnp_data:start/1',[]],['fun','ecapnp','ecapnp_data:start_link/1',[]],['fun','ecapnp','ecapnp_data:stop/1',[]],['fun','ecapnp','ecapnp_data:terminate/2',[]],['fun','ecapnp','ecapnp_data:update_segment/1','Write data to segment.'],['fun','ecapnp','ecapnp_get:field/1','Read the field value of object.'],['fun','ecapnp','ecapnp_get:ref_data/2','internal function not intended for client code.'],['fun','ecapnp','ecapnp_get:ref_data/3','Read data of object reference as type.'],['fun','ecapnp','ecapnp_get:root/1',[]],['fun','ecapnp','ecapnp_get:root/1','Get the root object for a message.'],['fun','ecapnp','ecapnp_get:union/1','Read the unnamed union value of object.'],['fun','ecapnp','ecapnp_message:read/1',[]],['fun','ecapnp','ecapnp_message:read/1','Parse segment table in the (unpacked, but otherwis'],['fun','ecapnp','ecapnp_message:read_file/1','Read binary message from file.'],['fun','ecapnp','ecapnp_message:write/1','Write segment table for message and return it alon'],['fun','ecapnp','ecapnp_obj:add_ref/2',[]],['fun','ecapnp','ecapnp_obj:alloc/1','Allocate data for a new object.'],['fun','ecapnp','ecapnp_obj:copy/1','Copy object recursively.'],['fun','ecapnp','ecapnp_obj:discard_ref/2',[]],['fun','ecapnp','ecapnp_obj:dump/1',[]],['fun','ecapnp','ecapnp_obj:field/1','Lookup field definition by name for object.'],['fun','ecapnp','ecapnp_obj:from_data/1','Get object (or list) from data.'],['fun','ecapnp','ecapnp_obj:from_data/2',[]],['fun','ecapnp','ecapnp_obj:from_ref/1','Get object (or list) from reference.'],['fun','ecapnp','ecapnp_obj:get_cap_table/1',[]],['fun','ecapnp','ecapnp_obj:init/1',[]],['fun','ecapnp','ecapnp_obj:init/2',[]],['fun','ecapnp','ecapnp_obj:refresh/1','Reread object reference.'],['fun','ecapnp','ecapnp_obj:set_cap_table/2',[]],['fun','ecapnp','ecapnp_obj:to_data/1','Type cast object to binary data.'],['fun','ecapnp','ecapnp_obj:to_list/1','Type cast object to list of type.'],['fun','ecapnp','ecapnp_obj:to_struct/1','Type cast object to another type of object.'],['fun','ecapnp','ecapnp_obj:to_text/1','Type cast object to text.'],['fun','ecapnp','ecapnp_promise_sup:start_link/0','  Starts the supervisor.'],['fun','ecapnp','ecapnp_promise_sup:start_promise/0',[]],['fun','ecapnp','ecapnp_promise_sup:start_promise/1',[]],['fun','ecapnp','ecapnp_ref:alloc/1','Allocate data for a reference of a specific kind.'],['fun','ecapnp','ecapnp_ref:alloc/1','Allocate data for a reference.'],['fun','ecapnp','ecapnp_ref:alloc_data/1','Allocate data for reference.'],['fun','ecapnp','ecapnp_ref:alloc_data/1','Allocate data for reference.'],['fun','ecapnp','ecapnp_ref:alloc_list/1','Allocate data for list.'],['fun','ecapnp','ecapnp_ref:copy/1','Make a deep copy of a reference.'],['fun','ecapnp','ecapnp_ref:create_ptr/2',[]],['fun','ecapnp','ecapnp_ref:follow_far/1','Resolve a far pointer.'],['fun','ecapnp','ecapnp_ref:get/1','Get reference from segment data.'],['fun','ecapnp','ecapnp_ref:get/1','Get reference from segment data.'],['fun','ecapnp','ecapnp_ref:null_ref/1','Get a null pointer.'],['fun','ecapnp','ecapnp_ref:paste/1','Allocate space and write data for reference.'],['fun','ecapnp','ecapnp_ref:ptr/1','Get indexed reference (unintialized).'],['fun','ecapnp','ecapnp_ref:read_data/1','Read data.'],['fun','ecapnp','ecapnp_ref:read_data/1','Read data.'],['fun','ecapnp','ecapnp_ref:read_list/1','Read elements from a list ref.'],['fun','ecapnp','ecapnp_ref:read_list/1','Read elements from a list ref.'],['fun','ecapnp','ecapnp_ref:read_list_refs/3','Read elements from a list ref, forcing the result '],['fun','ecapnp','ecapnp_ref:read_struct_data/1','Read from data section of a struct ref.'],['fun','ecapnp','ecapnp_ref:read_struct_data/1','Read from data section of a struct ref.'],['fun','ecapnp','ecapnp_ref:read_struct_ptr/1','Read a refeference from the pointer section of str'],['fun','ecapnp','ecapnp_ref:read_struct_ptr/1','Read a refeference from the pointer section of str'],['fun','ecapnp','ecapnp_ref:read_text/1','Read text.'],['fun','ecapnp','ecapnp_ref:read_text/1','Read text.'],['fun','ecapnp','ecapnp_ref:refresh/1','Reread reference from message.'],['fun','ecapnp','ecapnp_ref:set/2','Set reference kind.'],['fun','ecapnp','ecapnp_ref:write_data/1','Write data.'],['fun','ecapnp','ecapnp_ref:write_list/1','Write list element.'],['fun','ecapnp','ecapnp_ref:write_struct_data/1','Write to struct data section.'],['fun','ecapnp','ecapnp_ref:write_struct_ptr/1','Write pointer reference.'],['fun','ecapnp','ecapnp_ref:write_text/1','Write text.'],['fun','ecapnp','ecapnp_rpc:dump/1',[]],['fun','ecapnp','ecapnp_rpc:get_target/1',[]],['fun','ecapnp','ecapnp_rpc:import_capability/3',[]],['fun','ecapnp','ecapnp_rpc:request/2',[]],['fun','ecapnp','ecapnp_rpc:send/1',[]],['fun','ecapnp','ecapnp_rpc:wait/2',[]],['fun','ecapnp','ecapnp_rpc:wait/3',[]],['fun','ecapnp','ecapnp_schema:data_size/1','Get data size of a struct type.'],['fun','ecapnp','ecapnp_schema:dump/1',[]],['fun','ecapnp','ecapnp_schema:find_field/2','Find struct field from schema definition by name o'],['fun','ecapnp','ecapnp_schema:find_method_by_name/2','Find Interface and Method.'],['fun','ecapnp','ecapnp_schema:get/2',[]],['fun','ecapnp','ecapnp_schema:get_ref_kind/1',[]],['fun','ecapnp','ecapnp_schema:get_ref_kind/2',[]],['fun','ecapnp','ecapnp_schema:lookup/1','Find schema node for type.'],['fun','ecapnp','ecapnp_schema:lookup/3',[]],['fun','ecapnp','ecapnp_schema:ptrs_size/1','Get pointer count for a struct type.'],['fun','ecapnp','ecapnp_schema:set_ref_to/1','Set reference kind.'],['fun','ecapnp','ecapnp_schema:size_of/1','Query size of a struct type.'],['fun','ecapnp','ecapnp_schema:size_of/1','Lookup struct type and query its size.'],['fun','ecapnp','ecapnp_schema:type_of/1','Get type of object.'],['fun','ecapnp','ecapnp_serialize:pack/1','Pack message data.'],['fun','ecapnp','ecapnp_serialize:unpack/1','Unpack message data.'],['fun','ecapnp','ecapnp_set:field/1','Write field value to object.'],['fun','ecapnp','ecapnp_set:field/2',[]],['fun','ecapnp','ecapnp_set:fields/2',[]],['fun','ecapnp','ecapnp_set:root/1','Get root object for a new message.'],['fun','ecapnp','ecapnp_set:root/1','Get root object for a new message.'],['fun','ecapnp','ecapnp_set:union/1','Write unnamed union value in object.'],['fun','ecapnp','ecapnp_val:get/1','Decode data from Capn Proto format.'],['fun','ecapnp','ecapnp_val:get/1','Decode data from Capn Proto format.'],['fun','ecapnp','ecapnp_val:set/1','Encode value to Capn Proto format.'],['fun','ecapnp','ecapnp_val:set/1','Encode value to Capn Proto format.'],['fun','ecapnp','ecapnp_val:size/1','Get number of bits for ValueType.'],['fun','ecapnp','ecapnp_vat:code_change/3',[]],['fun','ecapnp','ecapnp_vat:handle_call/3',[]],['fun','ecapnp','ecapnp_vat:handle_cast/2',[]],['fun','ecapnp','ecapnp_vat:handle_info/2',[]],['fun','ecapnp','ecapnp_vat:import_capability/2',[]],['fun','ecapnp','ecapnp_vat:init/1',[]],['fun','ecapnp','ecapnp_vat:send/2',[]],['fun','ecapnp','ecapnp_vat:start/0',[]],['fun','ecapnp','ecapnp_vat:start_link/0',[]],['fun','ecapnp','ecapnp_vat:start_link/1',[]],['fun','ecapnp','ecapnp_vat:start_link/2',[]],['fun','ecapnp','ecapnp_vat:stop/1',[]],['fun','ecapnp','ecapnp_vat:terminate/2',[]],['fun','ecapnp','ecapnpc:compile_data/1','Compile the CodeGeneratorRequest message (unpacked'],['fun','ecapnp','ecapnpc:compile_file/1','Read a CodeGeneratorRequest message (unpacked) fro'],['fun','ecapnp','ecapnpc:compile_message/1','Compile the CodeGeneratorRequest message.'],['fun','ecapnp','rpc-twoparty_capnp:10786842769591618179/0',[]],['fun','ecapnp','rpc-twoparty_capnp:11323802317489695726/0',[]],['fun','ecapnp','rpc-twoparty_capnp:11517567629614739868/0',[]],['fun','ecapnp','rpc-twoparty_capnp:11638646725519536801/0',[]],['fun','ecapnp','rpc-twoparty_capnp:13006195034640135581/0',[]],['fun','ecapnp','rpc-twoparty_capnp:13298295899470141463/0',[]],['fun','ecapnp','rpc-twoparty_capnp:16579407680674948360/0',[]],['fun','ecapnp','rpc-twoparty_capnp:9940440221562733249/0',[]],['fun','ecapnp','rpc-twoparty_capnp:JoinKeyPart/0',[]],['fun','ecapnp','rpc-twoparty_capnp:JoinKeyPart/1',[]],['fun','ecapnp','rpc-twoparty_capnp:JoinResult/0',[]],['fun','ecapnp','rpc-twoparty_capnp:JoinResult/1',[]],['fun','ecapnp','rpc-twoparty_capnp:ProvisionId/0',[]],['fun','ecapnp','rpc-twoparty_capnp:ProvisionId/1',[]],['fun','ecapnp','rpc-twoparty_capnp:RecipientId/0',[]],['fun','ecapnp','rpc-twoparty_capnp:RecipientId/1',[]],['fun','ecapnp','rpc-twoparty_capnp:root/0',[]],['fun','ecapnp','rpc-twoparty_capnp:root/1',[]],['fun','ecapnp','rpc-twoparty_capnp:schema/1',[]],['fun','ecapnp','rpc-twoparty_capnp:Side/0',[]],['fun','ecapnp','rpc-twoparty_capnp:Side/1',[]],['fun','ecapnp','rpc-twoparty_capnp:SturdyRefHostId/0',[]],['fun','ecapnp','rpc-twoparty_capnp:SturdyRefHostId/1',[]],['fun','ecapnp','rpc-twoparty_capnp:ThirdPartyCapId/0',[]],['fun','ecapnp','rpc-twoparty_capnp:ThirdPartyCapId/1',[]],['fun','ecapnp','rpc_capnp:10500036013887172658/0',[]],['fun','ecapnp','rpc_capnp:10789521159760378817/0',[]],['fun','ecapnp','rpc_capnp:11100916931204903995/0',[]],['fun','ecapnp','rpc_capnp:11270825879279873114/0',[]],['fun','ecapnp','rpc_capnp:11392333052105676602/0',[]],['fun','ecapnp','rpc_capnp:12473400923157197975/0',[]],['fun','ecapnp','rpc_capnp:12903543124727603792/0',[]],['fun','ecapnp','rpc_capnp:13523986587913222488/0',[]],['fun','ecapnp','rpc_capnp:13529541526594062446/0',[]],['fun','ecapnp','rpc_capnp:14883405629196290303/0',[]],['fun','ecapnp','rpc_capnp:15235686326393111165/0',[]],['fun','ecapnp','rpc_capnp:15239388059401719395/0',[]],['fun','ecapnp','rpc_capnp:15332985841292492822/0',[]],['fun','ecapnp','rpc_capnp:15376050949367520589/0',[]],['fun','ecapnp','rpc_capnp:15430940935639230746/0',[]],['fun','ecapnp','rpc_capnp:15564635848320162976/0',[]],['fun','ecapnp','rpc_capnp:15774052265921044377/0',[]],['fun','ecapnp','rpc_capnp:16433336749162137644/0',[]],['fun','ecapnp','rpc_capnp:17009130564474155176/0',[]],['fun','ecapnp','rpc_capnp:17516350820840804481/0',[]],['fun','ecapnp','rpc_capnp:17970548384007534353/0',[]],['fun','ecapnp','rpc_capnp:18149955118657700271/0',[]],['fun','ecapnp','rpc_capnp:9469473312751832276/0',[]],['fun','ecapnp','rpc_capnp:9593755465305995440/0',[]],['fun','ecapnp','rpc_capnp:9666541409743531671/0',[]],['fun','ecapnp','rpc_capnp:Accept/0',[]],['fun','ecapnp','rpc_capnp:Accept/1',[]],['fun','ecapnp','rpc_capnp:Call/0',[]],['fun','ecapnp','rpc_capnp:Call/1',[]],['fun','ecapnp','rpc_capnp:CapDescriptor/0',[]],['fun','ecapnp','rpc_capnp:CapDescriptor/1',[]],['fun','ecapnp','rpc_capnp:Delete/0',[]],['fun','ecapnp','rpc_capnp:Delete/1',[]],['fun','ecapnp','rpc_capnp:Disembargo/0',[]],['fun','ecapnp','rpc_capnp:Disembargo/1',[]],['fun','ecapnp','rpc_capnp:Exception/0',[]],['fun','ecapnp','rpc_capnp:Exception/1',[]],['fun','ecapnp','rpc_capnp:Finish/0',[]],['fun','ecapnp','rpc_capnp:Finish/1',[]],['fun','ecapnp','rpc_capnp:Join/0',[]],['fun','ecapnp','rpc_capnp:Join/1',[]],['fun','ecapnp','rpc_capnp:Message/0',[]],['fun','ecapnp','rpc_capnp:Message/1',[]],['fun','ecapnp','rpc_capnp:MessageTarget/0',[]],['fun','ecapnp','rpc_capnp:MessageTarget/1',[]],['fun','ecapnp','rpc_capnp:Payload/0',[]],['fun','ecapnp','rpc_capnp:Payload/1',[]],['fun','ecapnp','rpc_capnp:PromisedAnswer/0',[]],['fun','ecapnp','rpc_capnp:PromisedAnswer/1',[]],['fun','ecapnp','rpc_capnp:Provide/0',[]],['fun','ecapnp','rpc_capnp:Provide/1',[]],['fun','ecapnp','rpc_capnp:Release/0',[]],['fun','ecapnp','rpc_capnp:Release/1',[]],['fun','ecapnp','rpc_capnp:Resolve/0',[]],['fun','ecapnp','rpc_capnp:Resolve/1',[]],['fun','ecapnp','rpc_capnp:Restore/0',[]],['fun','ecapnp','rpc_capnp:Restore/1',[]],['fun','ecapnp','rpc_capnp:Return/0',[]],['fun','ecapnp','rpc_capnp:Return/1',[]],['fun','ecapnp','rpc_capnp:root/0',[]],['fun','ecapnp','rpc_capnp:root/1',[]],['fun','ecapnp','rpc_capnp:Save/0',[]],['fun','ecapnp','rpc_capnp:Save/1',[]],['fun','ecapnp','rpc_capnp:schema/1',[]],['fun','ecapnp','rpc_capnp:SturdyRef/0',[]],['fun','ecapnp','rpc_capnp:SturdyRef/1',[]],['fun','ecapnp','rpc_capnp:ThirdPartyCapDescriptor/0',[]],['fun','ecapnp','rpc_capnp:ThirdPartyCapDescriptor/1',[]],['fun','ecapnp','schema_capnp:10736806783679155584/0',[]],['fun','ecapnp','schema_capnp:10919677598968879693/0',[]],['fun','ecapnp','schema_capnp:10930602151629473554/0',[]],['fun','ecapnp','schema_capnp:11145653318641710175/0',[]],['fun','ecapnp','schema_capnp:11389172934837766057/0',[]],['fun','ecapnp','schema_capnp:11430331134483579957/0',[]],['fun','ecapnp','schema_capnp:12195682960037147353/0',[]],['fun','ecapnp','schema_capnp:12410354185295152851/0',[]],['fun','ecapnp','schema_capnp:12560611460656617445/0',[]],['fun','ecapnp','schema_capnp:12793219851699983392/0',[]],['fun','ecapnp','schema_capnp:13063450714778629528/0',[]],['fun','ecapnp','schema_capnp:13515537513213004774/0',[]],['fun','ecapnp','schema_capnp:13818529054586492878/0',[]],['fun','ecapnp','schema_capnp:14133145859926553711/0',[]],['fun','ecapnp','schema_capnp:14626792032033250577/0',[]],['fun','ecapnp','schema_capnp:14853958794117909659/0',[]],['fun','ecapnp','schema_capnp:14981803260258615394/0',[]],['fun','ecapnp','schema_capnp:15020482145304562784/0',[]],['fun','ecapnp','schema_capnp:15102134695616452902/0',[]],['fun','ecapnp','schema_capnp:16050641862814319170/0',[]],['fun','ecapnp','schema_capnp:16610026722781537303/0',[]],['fun','ecapnp','schema_capnp:16728431493453586831/0',[]],['fun','ecapnp','schema_capnp:17011813041836786320/0',[]],['fun','ecapnp','schema_capnp:17116997365232503999/0',[]],['fun','ecapnp','schema_capnp:17422339044421236034/0',[]],['fun','ecapnp','schema_capnp:9792858745991129751/0',[]],['fun','ecapnp','schema_capnp:Annotation/0',[]],['fun','ecapnp','schema_capnp:Annotation/1',[]],['fun','ecapnp','schema_capnp:CodeGeneratorRequest/0',[]],['fun','ecapnp','schema_capnp:CodeGeneratorRequest/1',[]],['fun','ecapnp','schema_capnp:ElementSize/0',[]],['fun','ecapnp','schema_capnp:ElementSize/1',[]],['fun','ecapnp','schema_capnp:Enumerant/0',[]],['fun','ecapnp','schema_capnp:Enumerant/1',[]],['fun','ecapnp','schema_capnp:Field/0',[]],['fun','ecapnp','schema_capnp:Field/1',[]],['fun','ecapnp','schema_capnp:Method/0',[]],['fun','ecapnp','schema_capnp:Method/1',[]],['fun','ecapnp','schema_capnp:Node/0',[]],['fun','ecapnp','schema_capnp:Node/1',[]],['fun','ecapnp','schema_capnp:root/0',[]],['fun','ecapnp','schema_capnp:root/1',[]],['fun','ecapnp','schema_capnp:schema/1',[]],['fun','ecapnp','schema_capnp:Type/0',[]],['fun','ecapnp','schema_capnp:Type/1',[]],['fun','ecapnp','schema_capnp:Value/0',[]],['fun','ecapnp','schema_capnp:Value/1',[]]];