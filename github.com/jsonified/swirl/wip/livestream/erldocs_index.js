var index = [['app','swirl','swirl','[application]'],['mod','swirl','convert','conversion library.'],['mod','swirl','peer_store','This module implements storage API for merkle tree'],['mod','swirl','peer_sup',[]],['mod','swirl','peer_worker',[]],['mod','swirl','swarm_sup',[]],['mod','swirl','swarm_worker',[]],['mod','swirl','swirl','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','swirl_app',[]],['mod','swirl','swirl_sup',[]],['fun','swirl','convert:bin_to_hex/1',[]],['fun','swirl','convert:bin_to_string/1',[]],['fun','swirl','convert:hex_string_to_padded_binary/1',[]],['fun','swirl','convert:int_to_hex/1',[]],['fun','swirl','peer_store:delete/1','Deletes peer from table.'],['fun','swirl','peer_store:file_to_table/1','Loads the ets table from the given file.'],['fun','swirl','peer_store:init/1','Initialize a new ETS table.'],['fun','swirl','peer_store:insert/1','Inserts the peer and its state into the table.'],['fun','swirl','peer_store:insert_new/1','Insert the tuple {bin number, hash, chunk} if the '],['fun','swirl','peer_store:is_member/1','searches for a given peer in the table.'],['fun','swirl','peer_store:lookup/1','searches for a given peer in the table and returns'],['fun','swirl','peer_store:table_to_file/1','Write the ets table to the disk and deletes the ta'],['fun','swirl','peer_sup:init/1',[]],['fun','swirl','peer_sup:start_child/1',[]],['fun','swirl','peer_sup:start_link/0',[]],['fun','swirl','peer_worker:code_change/1',[]],['fun','swirl','peer_worker:handle_call/1',[]],['fun','swirl','peer_worker:handle_cast/1',[]],['fun','swirl','peer_worker:handle_info/1',[]],['fun','swirl','peer_worker:init/1',[]],['fun','swirl','peer_worker:start_link/1','start the server with a port number, and ppspp opt'],['fun','swirl','peer_worker:stop/1','Stops the server.'],['fun','swirl','peer_worker:terminate/1',[]],['fun','swirl','swarm_sup:init/1',[]],['fun','swirl','swarm_sup:start_child/1',[]],['fun','swirl','swarm_sup:start_link/0',[]],['fun','swirl','swarm_worker:code_change/1',[]],['fun','swirl','swarm_worker:get_swarm_options/1','Looks up the swarm options for a given swarm id, e'],['fun','swirl','swarm_worker:handle_call/1',[]],['fun','swirl','swarm_worker:handle_cast/1',[]],['fun','swirl','swarm_worker:handle_info/1',[]],['fun','swirl','swarm_worker:init/1',[]],['fun','swirl','swarm_worker:start_link/1','start the server with a given set of options which'],['fun','swirl','swarm_worker:stop/1','Stops the server.'],['fun','swirl','swarm_worker:terminate/1',[]],['fun','swirl','swarm_worker:where_is/1','Looks up the pid for a given swarm id.'],['fun','swirl','swirl:help/0','help for console users  Provides a summary of ava'],['fun','swirl','swirl:main/1',[]],['fun','swirl','swirl:quit/0','Stop the swirl application, all dependent swarms a'],['fun','swirl','swirl:start/0','Start the swirl application in a stand-alone fashi'],['fun','swirl','swirl:start_peer/0','start a PPSPP listener (peer) on a given port, or '],['fun','swirl','swirl:start_peer/1',[]],['fun','swirl','swirl:start_peer/1',[]],['fun','swirl','swirl:start_pool/1','start multiple PPSPP listeners (peers) quickly on '],['fun','swirl','swirl:start_swarm/1','start a PPSPP swarm, using the supplied hash and P'],['fun','swirl','swirl:stop/0','Stop the swirl application and all dependent swarm'],['fun','swirl','swirl:stop_peer/0','stop a PPSPP peer on a given port, or the default '],['fun','swirl','swirl:stop_peer/1',[]],['fun','swirl','swirl:stop_pool/1','stop multiple PPSPP peers on a given range of port'],['fun','swirl','swirl:stop_swarm/1','stop a PPSPP swarm for a given root_hash or swarm_'],['fun','swirl','swirl_app:start/1',[]],['fun','swirl','swirl_app:stop/1',[]],['fun','swirl','swirl_app:version/0',[]],['fun','swirl','swirl_sup:init/1',[]],['fun','swirl','swirl_sup:start_link/0',[]]];