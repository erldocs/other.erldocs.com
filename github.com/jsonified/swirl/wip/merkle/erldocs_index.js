var index = [['app','swirl','swirl','[application]'],['mod','swirl','convert','conversion library.'],['mod','swirl','merkle','title goes here.'],['mod','swirl','mtree','This library module implements merkle tree API fun'],['mod','swirl','mtree_core','This module contatins helpers function for the mer'],['mod','swirl','mtree_store','This module implements storage API for merkle tree'],['mod','swirl','peer_sup',[]],['mod','swirl','peer_worker',[]],['mod','swirl','swarm_sup',[]],['mod','swirl','swirl','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','swirl_app',[]],['mod','swirl','swirl_sup',[]],['fun','swirl','convert:bin_to_hex/1',[]],['fun','swirl','convert:bin_to_string/1',[]],['fun','swirl','convert:channel_to_string/1',[]],['fun','swirl','convert:endpoint_to_string/2',[]],['fun','swirl','convert:hex_string_to_padded_binary/1',[]],['fun','swirl','convert:port_to_atom/1',[]],['fun','swirl','merkle:new/1',[]],['fun','swirl','mtree:build_tree/1','Takes input the start and end Bin of the leaf node'],['fun','swirl','mtree:dump_tree/1','load_tree/1 loads merkle hash tree from a file wit'],['fun','swirl','mtree:get_all_munro_uncles/1','get_all_munro_uncles/2 returns the all munro hashe'],['fun','swirl','mtree:get_all_uncle_hashes/1','get_uncle_hashes/2 returns list of uncle hashes re'],['fun','swirl','mtree:get_data_range/1','get_data_range/1 returns the start and end of the '],['fun','swirl','mtree:get_hash_by_index/1','get_hash_by_index/2 returns a hash or list of hash'],['fun','swirl','mtree:get_latest_munro/1','This function is helpful during SECURE TUNE IN in '],['fun','swirl','mtree:get_munro_uncles/1','get_munro_uncles/2 returns the uncle hashes requir'],['fun','swirl','mtree:get_peak_hash/1','get_peak_hash/1 returns the peak hashes of the giv'],['fun','swirl','mtree:get_subtree_hash/1',[]],['fun','swirl','mtree:get_uncle_hashes/1','get_uncle_hashes/2 returns list of uncle hashes re'],['fun','swirl','mtree:insert/1','insert/2 adds {Bin, Hash, Data} into the ETS table'],['fun','swirl','mtree:load_tree/1','dump_tree/2 write the merkle hash tree into a file'],['fun','swirl','mtree:new/1','Initialize a new merkle hash tree.'],['fun','swirl','mtree:peaks_to_size/1','determines the APPROXIMATE size of the given data.'],['fun','swirl','mtree:prune_bin_range/1','remove/3 removes a given hash from tree and re-cal'],['fun','swirl','mtree:root_hash/1','root_hash/1 get the root hash of the tree.'],['fun','swirl','mtree:root_hash1/1',[]],['fun','swirl','mtree:verify/1','verify/2 for a given bin bumber and its hash it re'],['fun','swirl','mtree:verify_munro_hash/1','verify_munro_hash/2 returns true if the calculated'],['fun','swirl','mtree:verify_peak_hash/1','verify_peak_hash/1 takes a peak hash list and veri'],['fun','swirl','mtree:verify_uncle_hash/1','Given a Hash_List of the type [{Bin1,Hash1}, {Bin2'],['fun','swirl','mtree_core:bin_to_range/1','Return [Start, End] range of leaf nodes for a give'],['fun','swirl','mtree_core:compare_hash/1','returns hash of Hash_List.'],['fun','swirl','mtree_core:get_layer_num/1','Return the layer number to which a particular bin '],['fun','swirl','mtree_core:get_munro_root/1','gets the transient root bin of the current tree.'],['fun','swirl','mtree_core:get_next_munro_root/1','gets the transient root bin of the current tree.'],['fun','swirl','mtree_core:get_parent/1','returns the sibling bin number for a bin number be'],['fun','swirl','mtree_core:get_sibling/1','returns the sibling bin number for a bin number be'],['fun','swirl','mtree_core:hash/1','returns hash of Hash_List.'],['fun','swirl','mtree_core:is_complete/1','check if tree has 2^N leaf nodes i.e.'],['fun','swirl','mtree_core:lies_in/1','lies_in/2 : return true if the bin lies in the giv'],['fun','swirl','mtree_core:nearest_power_2/1','Get the next nearest power of 2.'],['fun','swirl','mtree_core:next_bin/1','generate the next bin number where the hash has to'],['fun','swirl','mtree_core:pad_tree/1','Pad tree with empty leaf hashes.'],['fun','swirl','mtree_core:root_bin/1','gets the expected root bin of the current tree.'],['fun','swirl','mtree_core:tree_length/1','get highest Bin of the leaf node, which indicates '],['fun','swirl','mtree_store:delete/1','Deletes an object with the given Bin from the tabl'],['fun','swirl','mtree_store:file_to_table/1','Loads the ets table from the given file.'],['fun','swirl','mtree_store:get_first/1','gets the first bin from the tree.'],['fun','swirl','mtree_store:highest_bin/1','returns the highest bin number in the ets table, w'],['fun','swirl','mtree_store:init/1','Initialize a new ETS table.'],['fun','swirl','mtree_store:insert/1','Insert the tuple {bin number, hash, chunk} into th'],['fun','swirl','mtree_store:insert_new/1','Insert the tuple {bin number, hash, chunk} if the '],['fun','swirl','mtree_store:is_member/1','searches for a given Bin in the table.'],['fun','swirl','mtree_store:lookup/1','searches for a given Bin in the table.'],['fun','swirl','mtree_store:table_to_file/1','Write the ets table to the disk and deletes the ta'],['fun','swirl','peer_sup:init/1',[]],['fun','swirl','peer_sup:start_child/1',[]],['fun','swirl','peer_sup:start_link/0',[]],['fun','swirl','peer_worker:code_change/1',[]],['fun','swirl','peer_worker:handle_call/1',[]],['fun','swirl','peer_worker:handle_cast/1',[]],['fun','swirl','peer_worker:handle_info/1',[]],['fun','swirl','peer_worker:init/1',[]],['fun','swirl','peer_worker:start_link/1',[]],['fun','swirl','peer_worker:start_link/1','start the server.'],['fun','swirl','peer_worker:stop/1','Stops the server.'],['fun','swirl','peer_worker:terminate/1',[]],['fun','swirl','swarm_sup:init/1',[]],['fun','swirl','swarm_sup:start_link/0',[]],['fun','swirl','swirl:help/0','help for console users  Provides a summary of ava'],['fun','swirl','swirl:main/1',[]],['fun','swirl','swirl:quit/0','Stop the swirl application, all dependent swarms a'],['fun','swirl','swirl:start/0','Start the swirl application in a stand-alone fashi'],['fun','swirl','swirl:start_peer/0','start a PPSPP listener (peer) on a given port, or '],['fun','swirl','swirl:start_peer/1',[]],['fun','swirl','swirl:start_peers/1','start multiple PPSPP listeners (peers) quickly on '],['fun','swirl','swirl:stop/0','Stop the swirl application and all dependent swarm'],['fun','swirl','swirl:stop_peer/0','stop a PPSPP peer on a given port, or the default '],['fun','swirl','swirl:stop_peer/1',[]],['fun','swirl','swirl:stop_peers/1','stop multiple PPSPP peers on a given range of port'],['fun','swirl','swirl_app:start/1',[]],['fun','swirl','swirl_app:stop/1',[]],['fun','swirl','swirl_app:version/0',[]],['fun','swirl','swirl_sup:init/1',[]],['fun','swirl','swirl_sup:start_link/0',[]]];