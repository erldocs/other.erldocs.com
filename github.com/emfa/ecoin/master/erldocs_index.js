var index = [['app','ecoin','ecoin','[application]'],['mod','ecoin','ecoin',[]],['mod','ecoin','ecoin_alert',[]],['mod','ecoin','ecoin_app',[]],['mod','ecoin','ecoin_block',[]],['mod','ecoin','ecoin_blockchain',[]],['mod','ecoin','ecoin_bloom','Implementation of the Bloom filter data structure.'],['mod','ecoin','ecoin_config',[]],['mod','ecoin','ecoin_crypto',[]],['mod','ecoin','ecoin_filteradd',[]],['mod','ecoin','ecoin_filterload',[]],['mod','ecoin','ecoin_getblocks',[]],['mod','ecoin','ecoin_getdata',[]],['mod','ecoin','ecoin_getheaders',[]],['mod','ecoin','ecoin_hdw','Implements hierarchial deterministic wallets (BIPS'],['mod','ecoin','ecoin_headers',[]],['mod','ecoin','ecoin_locator',[]],['mod','ecoin','ecoin_merkleblock',[]],['mod','ecoin','ecoin_notfound',[]],['mod','ecoin','ecoin_peer_ctl','Controlling peer process       This is processes '],['mod','ecoin','ecoin_peer_man','The peer manager       This modules manages all c'],['mod','ecoin','ecoin_peer_recv','Reciving process       This process just keep rec'],['mod','ecoin','ecoin_peer_send','Sending process       This process takes care of '],['mod','ecoin','ecoin_peer_sup','This module is the top-level supervisor for      '],['mod','ecoin','ecoin_reject',[]],['mod','ecoin','ecoin_stats',[]],['mod','ecoin','ecoin_sup',[]],['mod','ecoin','ecoin_util',[]],['mod','ecoin','stack',[]],['fun','ecoin','ecoin:start/0',[]],['fun','ecoin','ecoin_alert:decode/1','Decode an alert message, verifying the signature a'],['fun','ecoin','ecoin_app:start/2',[]],['fun','ecoin','ecoin_app:stop/1',[]],['fun','ecoin','ecoin_block:build_merkle_root/1',[]],['fun','ecoin','ecoin_block:decode/1','Decode a block message.'],['fun','ecoin','ecoin_block:encode/1','Encode a block message.'],['fun','ecoin','ecoin_block:genesis/0','Construct the genesis block in the current network'],['fun','ecoin','ecoin_block:genesis/1','Construct the genesis block in the given network.'],['fun','ecoin','ecoin_block:hash/1','Hash the block header to determine the block hash.'],['fun','ecoin','ecoin_block:new/1','Construct a new block.'],['fun','ecoin','ecoin_block:pp/1','Pretty print a block.'],['fun','ecoin','ecoin_blockchain:code_change/3',[]],['fun','ecoin','ecoin_blockchain:get/1',[]],['fun','ecoin','ecoin_blockchain:handle_call/3',[]],['fun','ecoin','ecoin_blockchain:handle_cast/2',[]],['fun','ecoin','ecoin_blockchain:handle_info/2',[]],['fun','ecoin','ecoin_blockchain:init/1',[]],['fun','ecoin','ecoin_blockchain:initialize/0',[]],['fun','ecoin','ecoin_blockchain:last_block/0',[]],['fun','ecoin','ecoin_blockchain:start_link/0',[]],['fun','ecoin','ecoin_blockchain:store/1',[]],['fun','ecoin','ecoin_blockchain:terminate/2',[]],['fun','ecoin','ecoin_bloom:add_element/1','Adds the key to the filter.'],['fun','ecoin','ecoin_bloom:is_element/1','Determines if the key is (probably) an element of '],['fun','ecoin','ecoin_bloom:new/1','Create a bloom filter from a given bitmap and hash'],['fun','ecoin','ecoin_bloom:new/1','Creates a new Bloom filter, given a maximum number'],['fun','ecoin','ecoin_bloom:new/1','Create a bloom filter of capacity N with 0.001 fal'],['fun','ecoin','ecoin_config:connection_timeout/0',[]],['fun','ecoin','ecoin_config:default_port/0',[]],['fun','ecoin','ecoin_config:default_port/1',[]],['fun','ecoin','ecoin_config:dns/0',[]],['fun','ecoin','ecoin_config:dns_limit/0',[]],['fun','ecoin','ecoin_config:ip/0',[]],['fun','ecoin','ecoin_config:network/0',[]],['fun','ecoin','ecoin_config:outgoing_limit/0',[]],['fun','ecoin','ecoin_config:port/0',[]],['fun','ecoin','ecoin_config:predefined_peers/0',[]],['fun','ecoin','ecoin_config:protocol_version/0',[]],['fun','ecoin','ecoin_config:relay/0',[]],['fun','ecoin','ecoin_config:services/0',[]],['fun','ecoin','ecoin_config:set_ip/1',[]],['fun','ecoin','ecoin_config:user_agent/0',[]],['fun','ecoin','ecoin_crypto:hash160/1',[]],['fun','ecoin','ecoin_crypto:hash256/1',[]],['fun','ecoin','ecoin_filteradd:decode/1','Decode a filteradd message.'],['fun','ecoin','ecoin_filteradd:encode/1','Encode a filteradd message.'],['fun','ecoin','ecoin_filterload:decode/1','Decode a filterload message.'],['fun','ecoin','ecoin_filterload:encode/1','Encode a filterload message.'],['fun','ecoin','ecoin_getblocks:decode/1','Decode a getblocks message.'],['fun','ecoin','ecoin_getblocks:encode/1','Encode a getblocks message.'],['fun','ecoin','ecoin_getdata:decode/1','Decode a getdata message.'],['fun','ecoin','ecoin_getdata:encode/1','Encode a getdata message.'],['fun','ecoin','ecoin_getheaders:decode/1','Decode a getheaders message.'],['fun','ecoin','ecoin_getheaders:encode/1','Encode a getheaders message.'],['fun','ecoin','ecoin_hdw:ckd_priv/2','Private parent key -&gt; private child key.'],['fun','ecoin','ecoin_hdw:ckd_pub/2','Public parent key -&gt; public child key.'],['fun','ecoin','ecoin_hdw:generate_master_key/1',[]],['fun','ecoin','ecoin_hdw:n/1','Private parent key -&gt; Extended public key.'],['fun','ecoin','ecoin_hdw:pack_extended_key/1',[]],['fun','ecoin','ecoin_hdw:unpack_extended_key/1',[]],['fun','ecoin','ecoin_headers:decode/1','Decode a headers message.'],['fun','ecoin','ecoin_headers:encode/1','Encode a headers message.'],['fun','ecoin','ecoin_locator:decode/1','Decode a locator message.'],['fun','ecoin','ecoin_locator:encode/1','Encode a locator message.'],['fun','ecoin','ecoin_merkleblock:decode/1','Decode a merkleblock message.'],['fun','ecoin','ecoin_merkleblock:encode/1','Encode a merkleblock message.'],['fun','ecoin','ecoin_notfound:decode/1','Decode a notfound message.'],['fun','ecoin','ecoin_notfound:encode/1','Encode a notfound message.'],['fun','ecoin','ecoin_peer_ctl:code_change/3',[]],['fun','ecoin','ecoin_peer_ctl:handle_call/3',[]],['fun','ecoin','ecoin_peer_ctl:handle_cast/2',[]],['fun','ecoin','ecoin_peer_ctl:handle_info/2',[]],['fun','ecoin','ecoin_peer_ctl:init/1',[]],['fun','ecoin','ecoin_peer_ctl:send/1','Send an arbitrary message to a peer.'],['fun','ecoin','ecoin_peer_ctl:start_link/1','Start a new outgoing peer process.'],['fun','ecoin','ecoin_peer_ctl:terminate/2',[]],['fun','ecoin','ecoin_peer_man:active_peers/0','Return a list of all active (connected) peers.'],['fun','ecoin','ecoin_peer_man:code_change/3',[]],['fun','ecoin','ecoin_peer_man:connected/1','Let a peer process tell the manager that it has fi'],['fun','ecoin','ecoin_peer_man:handle_call/3',[]],['fun','ecoin','ecoin_peer_man:handle_cast/2',[]],['fun','ecoin','ecoin_peer_man:handle_info/2',[]],['fun','ecoin','ecoin_peer_man:inactive_peers/0','Return a list of all inactive (not connected) peer'],['fun','ecoin','ecoin_peer_man:init/1',[]],['fun','ecoin','ecoin_peer_man:new_peers/1',[]],['fun','ecoin','ecoin_peer_man:start_link/0','Start the peer manager.'],['fun','ecoin','ecoin_peer_man:terminate/2',[]],['fun','ecoin','ecoin_peer_recv:code_change/3',[]],['fun','ecoin','ecoin_peer_recv:handle_call/3',[]],['fun','ecoin','ecoin_peer_recv:handle_cast/2',[]],['fun','ecoin','ecoin_peer_recv:handle_info/2',[]],['fun','ecoin','ecoin_peer_recv:init/1',[]],['fun','ecoin','ecoin_peer_recv:start_link/1','Start the receiving peer process.'],['fun','ecoin','ecoin_peer_recv:terminate/2',[]],['fun','ecoin','ecoin_peer_send:code_change/3',[]],['fun','ecoin','ecoin_peer_send:handle_call/3',[]],['fun','ecoin','ecoin_peer_send:handle_cast/2',[]],['fun','ecoin','ecoin_peer_send:handle_info/2',[]],['fun','ecoin','ecoin_peer_send:init/1',[]],['fun','ecoin','ecoin_peer_send:send/2','Send a message to a peer.'],['fun','ecoin','ecoin_peer_send:start_link/1','Start the send process.'],['fun','ecoin','ecoin_peer_send:terminate/2',[]],['fun','ecoin','ecoin_peer_sup:init/1',[]],['fun','ecoin','ecoin_peer_sup:new_peer/1','Start a new process that tries to connect to a rem'],['fun','ecoin','ecoin_peer_sup:start_link/0','Start the supervisor.'],['fun','ecoin','ecoin_reject:decode/1','Decode a reject message.'],['fun','ecoin','ecoin_reject:encode/1','Encode a reject message.'],['fun','ecoin','ecoin_stats:create/1','Create all statistics entries we want for a new pe'],['fun','ecoin','ecoin_stats:received/1','Log received messages type and size.'],['fun','ecoin','ecoin_stats:sent/1','Log sent messages type and size.'],['fun','ecoin','ecoin_sup:init/1',[]],['fun','ecoin','ecoin_sup:start_link/0',[]],['fun','ecoin','ecoin_util:bin_to_hexstr/1','Turn a binary into a hexadecimal string.'],['fun','ecoin','ecoin_util:dns_peers/0','Retrive bootstrapping peers from dns server(s)   '],['fun','ecoin','ecoin_util:dns_peers/1','Same as above but with explicit parameters.'],['fun','ecoin','ecoin_util:get_external_ip/0','Get the external ip of this computer.'],['fun','ecoin','ecoin_util:hexstr_to_bin/1','Turn a hexadecimal string into a binary.'],['fun','ecoin','ecoin_util:in_mask/1','Check if an integer is in a mask.'],['fun','ecoin','ecoin_util:int_to_ts/1','Convert a single big integer timestamp into an erl'],['fun','ecoin','ecoin_util:nounce/1','Get a random nounce of given maximum length in byt'],['fun','ecoin','ecoin_util:ts_to_bin/1',[]],['fun','ecoin','ecoin_util:ts_to_int/1','Convert a timestamp into a single big integer.'],['fun','ecoin','stack:from_list/1',[]],['fun','ecoin','stack:new/0',[]],['fun','ecoin','stack:peek/1',[]],['fun','ecoin','stack:peek_ix/1',[]],['fun','ecoin','stack:peek_n/1',[]],['fun','ecoin','stack:peek_part/1',[]],['fun','ecoin','stack:pop/1',[]],['fun','ecoin','stack:pop_ix/2',[]],['fun','ecoin','stack:pop_n/1',[]],['fun','ecoin','stack:pop_part/1',[]],['fun','ecoin','stack:push/1',[]],['fun','ecoin','stack:push_n/1',[]],['fun','ecoin','stack:sz/1',[]],['fun','ecoin','stack:to_list/1',[]]];