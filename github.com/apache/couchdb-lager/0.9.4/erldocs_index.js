var index = [['app','couchdb-lager','couchdb-lager','[application]'],['mod','couchdb-lager','lager','The lager logging framework.'],['mod','couchdb-lager','lager_console_backend','Console backend for lager.'],['mod','couchdb-lager','lager_crash_log','Lager crash log writer.'],['mod','couchdb-lager','lager_file_backend','File backend for lager, with multiple file support'],['mod','couchdb-lager','lager_mochiglobal','Abuse module constant pools as a "read-only shared'],['mod','couchdb-lager','lager_stdlib','Functions from Erlang OTP distribution that are re'],['mod','couchdb-lager','lager_transform','The parse transform used for lager messages.'],['mod','couchdb-lager','lager_trunc_io','Module to print out terms for logging.'],['mod','couchdb-lager','lager_util',[]],['fun','couchdb-lager','lager:get_loglevel/1','Get the loglevel for a particular backend.'],['fun','couchdb-lager','lager:log/1','Manually log a message into lager without using th'],['fun','couchdb-lager','lager:log/1','Manually log a message into lager without using th'],['fun','couchdb-lager','lager:posix_error/1','Try to convert an atom to a posix error, but fall '],['fun','couchdb-lager','lager:safe_format/3','Print the format string Fmt with Args safely with '],['fun','couchdb-lager','lager:set_loglevel/2','Set the loglevel for a particular backend.'],['fun','couchdb-lager','lager:set_loglevel/3','Set the loglevel for a particular backend that has'],['fun','couchdb-lager','lager:start/0','Start the application.'],['fun','couchdb-lager','lager_mochiglobal:delete/1','Delete term stored at K, no-op if non-existent.'],['fun','couchdb-lager','lager_mochiglobal:get/1','Get the term for K or return Default.'],['fun','couchdb-lager','lager_mochiglobal:get/1','Equivalent to get(K, undefined).'],['fun','couchdb-lager','lager_mochiglobal:put/1','Store term V at K, replaces an existing term if pr'],['fun','couchdb-lager','lager_stdlib:is_my_error_report/1',[]],['fun','couchdb-lager','lager_stdlib:is_my_info_report/1',[]],['fun','couchdb-lager','lager_stdlib:maybe_utc/1',[]],['fun','couchdb-lager','lager_stdlib:proc_lib_format/1',[]],['fun','couchdb-lager','lager_stdlib:string_p/1',[]],['fun','couchdb-lager','lager_stdlib:sup_get/1',[]],['fun','couchdb-lager','lager_stdlib:write_time/2',[]],['fun','couchdb-lager','lager_trunc_io:format/3',[]],['fun','couchdb-lager','lager_trunc_io:fprint/1','Returns an flattened list containing the ASCII rep'],['fun','couchdb-lager','lager_trunc_io:print/1','Returns {List, Length}.'],['fun','couchdb-lager','lager_trunc_io:safe/1','Same as print, but never crashes.'],['fun','couchdb-lager','lager_util:calculate_next_rotation/1',[]],['fun','couchdb-lager','lager_util:ensure_logfile/4',[]],['fun','couchdb-lager','lager_util:format_time/0',[]],['fun','couchdb-lager','lager_util:format_time/1',[]],['fun','couchdb-lager','lager_util:level_to_num/1',[]],['fun','couchdb-lager','lager_util:levels/0',[]],['fun','couchdb-lager','lager_util:localtime_ms/0',[]],['fun','couchdb-lager','lager_util:maybe_utc/1',[]],['fun','couchdb-lager','lager_util:num_to_level/1',[]],['fun','couchdb-lager','lager_util:open_logfile/2',[]],['fun','couchdb-lager','lager_util:parse_rotation_date_spec/1',[]],['fun','couchdb-lager','lager_util:rotate_logfile/2',[]]];