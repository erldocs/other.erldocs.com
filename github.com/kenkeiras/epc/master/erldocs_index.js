var index = [['app','epc','epc','[application]'],['mod','epc','epc_dba',[]],['mod','epc','epc_slave',[]],['mod','epc','httpd_search',[]],['mod','epc','httpd_stats',[]],['mod','epc','indexer','   Downloads, processes and indexes the given ima'],['mod','epc','master',[]],['mod','epc','mochiutf8','Algorithm to convert any binary to a valid UTF-8 s'],['mod','epc','mochiweb_charref','Converts HTML 5 charrefs and entities to codepoint'],['mod','epc','mochiweb_html','Loosely tokenizes and generates parse trees for HT'],['mod','epc','phash','   pHash port interface.'],['mod','epc','tests',[]],['mod','epc','web',[]],['fun','epc','epc_dba:checkURL/1',[]],['fun','epc','epc_dba:clear/0',[]],['fun','epc','epc_dba:get_by_hash/1',[]],['fun','epc','epc_dba:get_by_simhash/1',[]],['fun','epc','epc_dba:get_crawled_url_count/0','Return the number of crawled urls.'],['fun','epc','epc_dba:get_im/1',[]],['fun','epc','epc_dba:get_indexed_image_count/0','Return the number of images in the table.'],['fun','epc','epc_dba:hammingDistance/2',[]],['fun','epc','epc_dba:install/1',[]],['fun','epc','epc_dba:put_im/2',[]],['fun','epc','epc_dba:start/1',[]],['fun','epc','epc_dba:stop/1',[]],['fun','epc','epc_dba:storeCrawledURL/1',[]],['fun','epc','epc_dba:test/0',[]],['fun','epc','epc_dba:uninstall/1',[]],['fun','epc','epc_slave:init/1',[]],['fun','epc','httpd_search:search/3','Manage search petition from the HTTP daemon.'],['fun','epc','httpd_stats:stats/3','Manage search petition from the HTTP daemon.'],['fun','epc','indexer:indexer/0',[]],['fun','epc','indexer:indexImage/1',[]],['fun','epc','indexer:start/0',[]],['fun','epc','indexer:stop/0',[]],['fun','epc','master:getImages/1',[]],['fun','epc','master:init/0',[]],['fun','epc','master:loop/3',[]],['fun','epc','master:printList/1',[]],['fun','epc','master:printPendingURLs/0',[]],['fun','epc','master:removeDuplicatedURLs/2',[]],['fun','epc','mochiutf8:bytes_foldl/1',[]],['fun','epc','mochiutf8:bytes_to_codepoints/1',[]],['fun','epc','mochiutf8:codepoint_foldl/1',[]],['fun','epc','mochiutf8:codepoint_to_bytes/1','Convert a unicode codepoint to UTF-8 bytes.'],['fun','epc','mochiutf8:codepoints_to_bytes/1','Convert a list of codepoints to a UTF-8 binary.'],['fun','epc','mochiutf8:len/1',[]],['fun','epc','mochiutf8:read_codepoint/1',[]],['fun','epc','mochiutf8:valid_utf8_bytes/1','Return only the bytes in B that represent valid UT'],['fun','epc','mochiweb_charref:charref/1','Convert a decimal charref, hex charref, or html en'],['fun','epc','mochiweb_html:escape/1','Escape a string such that its safe for HTML (amp;'],['fun','epc','mochiweb_html:escape_attr/1','Escape a string such that its safe for HTML attrs'],['fun','epc','mochiweb_html:parse/1','tokenize and then transform the token stream into '],['fun','epc','mochiweb_html:parse_tokens/1','Transform the output of tokens(Doc) into a HTML tr'],['fun','epc','mochiweb_html:to_html/1','Convert a list of html_token() to a HTML document.'],['fun','epc','mochiweb_html:to_tokens/1','Convert a html_node() tree to a list of tokens.'],['fun','epc','mochiweb_html:tokens/1','Transform the input UTF-8 HTML into a token stream'],['fun','epc','phash:hash/1',[]],['fun','epc','phash:pHash/0',[]],['fun','epc','phash:start/0',[]],['fun','epc','phash:stop/0',[]],['fun','epc','tests:test/0',[]],['fun','epc','web:init/0',[]]];