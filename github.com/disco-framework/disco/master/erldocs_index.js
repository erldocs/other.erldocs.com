var index = [['app','disco','disco','[application]'],['mod','disco','barkeeper','Generates the concrete input strings for the worke'],['mod','disco','barkeeper_sup',[]],['mod','disco','changer','Changes the problem state.'],['mod','disco','changer_sup',[]],['mod','disco','config','Validates the configuration.'],['mod','disco','cover_utils',[]],['mod','disco','disco_app','Starts up the framework.'],['mod','disco','dj','Defines the central process of the framework.'],['mod','disco','dj_sup',[]],['mod','disco','gui','Handles interaction with the GUI(s).'],['mod','disco','gui_port','Handles a single external GUI.'],['mod','disco','gui_port_sup',[]],['mod','disco','json','Utilities for JSON handling.'],['mod','disco','lagerd','Provides a proxy process for logging.'],['mod','disco','lagerd_sup',[]],['mod','disco','port_utils','Utilities for working with Erlang ports.'],['mod','disco','savegames','Utility functions for saving and loading the game '],['mod','disco','utils','General utility functions for the DisCo Framework.'],['mod','disco','validator','Handles interaction with the validator component.'],['mod','disco','validator_port','Handles the external validator component/executabl'],['mod','disco','validator_port_sup',[]],['mod','disco','validator_queue','Provides a process to queue incoming propositions.'],['mod','disco','validator_sup',[]],['fun','disco','barkeeper:ask/1','Ask the barkeeper to generate a worker input.'],['fun','disco','barkeeper:init/1',[]],['fun','disco','barkeeper:start_link/1','Start the barkeeper process and open the port, sta'],['fun','disco','barkeeper_sup:init/1',[]],['fun','disco','barkeeper_sup:start_link/1',[]],['fun','disco','changer:change_state/2','Ask the external executable to generate a new prob'],['fun','disco','changer:init/1',[]],['fun','disco','changer:start_link/1','Start the changer process and open the port, start'],['fun','disco','changer_sup:init/1',[]],['fun','disco','changer_sup:start_link/1',[]],['fun','disco','config:check/0','Check the configuration values in the application '],['fun','disco','config:check_verbose/0','Check the configuration values in the application '],['fun','disco','config:valid_score_mode/1',[]],['fun','disco','cover_utils:analyze/0',[]],['fun','disco','cover_utils:init/0',[]],['fun','disco','disco_app:start/0',[]],['fun','disco','disco_app:start/2',[]],['fun','disco','disco_app:stop/1',[]],['fun','disco','dj:add_scores/0','Accumulate current scores per worker.'],['fun','disco','dj:apply_proposition/1','Change the problem state according to the last pro'],['fun','disco','dj:block_worker/1',[]],['fun','disco','dj:choose_problem/1',[]],['fun','disco','dj:code_change/4','Only really necessary for hot code loading, but ha'],['fun','disco','dj:gui_wants_all_data/0',[]],['fun','disco','dj:handle_event/3',[]],['fun','disco','dj:handle_info/3',[]],['fun','disco','dj:handle_sync_event/4',[]],['fun','disco','dj:init/1',[]],['fun','disco','dj:kill_all_workers/0','Send a kill message to all workers.'],['fun','disco','dj:load_game_state/1',[]],['fun','disco','dj:quit_program/0',[]],['fun','disco','dj:ready/2',[]],['fun','disco','dj:ready/3',[]],['fun','disco','dj:running/2',[]],['fun','disco','dj:running/3',[]],['fun','disco','dj:save_game_state/1',[]],['fun','disco','dj:start_link/0',[]],['fun','disco','dj:start_round/0',[]],['fun','disco','dj:submit_proposition/1',[]],['fun','disco','dj:submit_validated_proposition/1',[]],['fun','disco','dj:terminate/3',[]],['fun','disco','dj:unblock_worker/1',[]],['fun','disco','dj:validator_queue_empty/0',[]],['fun','disco','dj:waiting_for_validator/2',[]],['fun','disco','dj:waiting_for_validator/3',[]],['fun','disco','dj:worker_stopped/1',[]],['fun','disco','dj_sup:init/1',[]],['fun','disco','dj_sup:start_link/0',[]],['fun','disco','gui:ack_load_game_state/1','Notify GUIs of success/failure of a "load game" op'],['fun','disco','gui:ack_save_game_state/1','Notify GUIs of success/failure of a "save game" op'],['fun','disco','gui:all_data/1','Send all the data that the GUIs are allowed to kno'],['fun','disco','gui:get_all_data/0','Passthrough function to request all data from dj.'],['fun','disco','gui:handle_json/1','Dispatch handlers according to contents of the rec'],['fun','disco','gui:problem_chosen/1','Notify GUIs: A new problem is selected.'],['fun','disco','gui:problem_state_changed/1','Notify GUIs: The state of the current problem has '],['fun','disco','gui:round_ended/1','Notify GUIs: The round has ended.'],['fun','disco','gui:round_started/1','Notify GUIs: A round has been started.'],['fun','disco','gui:start_link/1','Start the gui port supervisor and all the GUIs.'],['fun','disco','gui:worker_input_changed/1','Notify GUIs: The worker input for the next round h'],['fun','disco','gui:worker_updated/1','Notify GUIs: A worker has changed.'],['fun','disco','gui_port:code_change/3',[]],['fun','disco','gui_port:handle_call/3',[]],['fun','disco','gui_port:handle_cast/2',[]],['fun','disco','gui_port:handle_info/2',[]],['fun','disco','gui_port:init/1',[]],['fun','disco','gui_port:send/1',[]],['fun','disco','gui_port:start_link/2',[]],['fun','disco','gui_port:stop/1',[]],['fun','disco','gui_port:terminate/2',[]],['fun','disco','gui_port_sup:init/1',[]],['fun','disco','gui_port_sup:start_link/1',[]],['fun','disco','json:default_decoder/0','Construct an empty decoder with sane defaults.'],['fun','disco','json:handle/1','Try to handle the JSON term with the given handler'],['fun','disco','json:process/1','Try to process an incoming string into valid JSON.'],['fun','disco','json:process_attrs/1','Check wether all the specified attributes are cont'],['fun','disco','json:to_json_msg/1','Construct a port message as defined by our protoco'],['fun','disco','lagerd:alert/1',[]],['fun','disco','lagerd:alert/2',[]],['fun','disco','lagerd:critical/1',[]],['fun','disco','lagerd:critical/2',[]],['fun','disco','lagerd:debug/1',[]],['fun','disco','lagerd:debug/2',[]],['fun','disco','lagerd:emergency/1',[]],['fun','disco','lagerd:emergency/2',[]],['fun','disco','lagerd:error/1',[]],['fun','disco','lagerd:error/2',[]],['fun','disco','lagerd:info/1',[]],['fun','disco','lagerd:info/2',[]],['fun','disco','lagerd:notice/1',[]],['fun','disco','lagerd:notice/2',[]],['fun','disco','lagerd:start_link/0',[]],['fun','disco','lagerd:terminate/0',[]],['fun','disco','lagerd:warning/1',[]],['fun','disco','lagerd:warning/2',[]],['fun','disco','lagerd_sup:init/1',[]],['fun','disco','lagerd_sup:start_link/0',[]],['fun','disco','port_utils:easy_open_killer_port/1','Opens a port with special arrangements to safely k'],['fun','disco','port_utils:easy_open_killer_port/1','Opens a port with special arrangements to safely k'],['fun','disco','port_utils:open_killer_port/1','Opens a port with special arrangements to safely k'],['fun','disco','port_utils:port_command/1','we need this proxy function for mocking  because '],['fun','disco','port_utils:spawn_port/1','we need this proxy function for mocking  because '],['fun','disco','port_utils:try_open/1','Tries opening an external executable via a port.'],['fun','disco','savegames:apply/1','Applies a savegame to the current game state.'],['fun','disco','savegames:autosave/1','Creates a new savegame file with an auto-generated'],['fun','disco','savegames:save_state/1','Creates a new savegame file at the specified locat'],['fun','disco','savegames:validate/1','Validates the contents of a savegame file against '],['fun','disco','utils:atom_to_binary/1','Converts an atom into a binary, assuming utf8 enco'],['fun','disco','utils:binary_to_atom/1','Converts a binary into an utf8 encoded atom.'],['fun','disco','utils:get_argument/1','we need this proxy function for mocking  because '],['fun','disco','utils:get_gui_reg_name/1','Translates a GUI index into the name the interface'],['fun','disco','utils:get_worker_reg_name/1','Translates a worker ID into the name the interface'],['fun','disco','utils:intersperse/2','Inserts the separator between all elements of the '],['fun','disco','utils:join/1','Joins a list of strings into one, separated by the'],['fun','disco','utils:pmap/1','Parallel Map function.'],['fun','disco','utils:slice/1','Slices a list into a list of lists of the size N.'],['fun','disco','utils:wait/1','Lets the current process wait for some millisecond'],['fun','disco','validator:all_workers_stopped/0','Informs the validator that all workers are stopped'],['fun','disco','validator:round_started/0','Informs the validator that the workers are working'],['fun','disco','validator:start_link/1','Starts the whole validator infrastructure, includi'],['fun','disco','validator:validate/1','Submits a single proposition from a worker to the '],['fun','disco','validator_port:start_link/1',[]],['fun','disco','validator_port_sup:init/1',[]],['fun','disco','validator_port_sup:start_link/1',[]],['fun','disco','validator_queue:all_workers_stopped/0',[]],['fun','disco','validator_queue:code_change/4',[]],['fun','disco','validator_queue:empty/2',[]],['fun','disco','validator_queue:empty/3',[]],['fun','disco','validator_queue:get_proposition/0','Fetches a proposition, blocking the calling thread'],['fun','disco','validator_queue:get_queue_content/0','For debugging: Returns the content of the queue.'],['fun','disco','validator_queue:handle_event/3',[]],['fun','disco','validator_queue:handle_info/3',[]],['fun','disco','validator_queue:handle_sync_event/4',[]],['fun','disco','validator_queue:init/1',[]],['fun','disco','validator_queue:insert_proposition/1',[]],['fun','disco','validator_queue:non_empty/2',[]],['fun','disco','validator_queue:non_empty/3',[]],['fun','disco','validator_queue:put_score/1','Returns a validation result.'],['fun','disco','validator_queue:round_started/0',[]],['fun','disco','validator_queue:start_link/0',[]],['fun','disco','validator_queue:terminate/3',[]],['fun','disco','validator_sup:init/1',[]],['fun','disco','validator_sup:start_link/1',[]],['app','worker','worker','[application]'],['mod','worker','worker_app',[]],['mod','worker','worker_port_owner',[]],['mod','worker','worker_server',[]],['mod','worker','worker_sup',[]],['fun','worker','worker_app:block_worker/1',[]],['fun','worker','worker_app:get_worker_name/1',[]],['fun','worker','worker_app:give_worker_challenge/1',[]],['fun','worker','worker_app:kill_worker/1',[]],['fun','worker','worker_app:start/0',[]],['fun','worker','worker_app:start/2',[]],['fun','worker','worker_app:stop/1',[]],['fun','worker','worker_app:submit_proposition/1',[]],['fun','worker','worker_app:worker_stopped/1',[]],['fun','worker','worker_port_owner:start_link/3',[]],['fun','worker','worker_server:close_port/1',[]],['fun','worker','worker_server:code_change/3',[]],['fun','worker','worker_server:get_name/1',[]],['fun','worker','worker_server:give_challenge/1',[]],['fun','worker','worker_server:handle_call/3',[]],['fun','worker','worker_server:handle_cast/2',[]],['fun','worker','worker_server:handle_info/2',[]],['fun','worker','worker_server:init/1',[]],['fun','worker','worker_server:kill/1',[]],['fun','worker','worker_server:set_port_ref/2',[]],['fun','worker','worker_server:start_link/4',[]],['fun','worker','worker_server:terminate/2',[]],['fun','worker','worker_sup:init/1',[]],['fun','worker','worker_sup:start_link/1',[]]];