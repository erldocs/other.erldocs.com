var index = [['app','cowboyold','cowboyold','[application]'],['mod','cowboyold','cowboy','Cowboy API to start and stop listeners.'],['mod','cowboyold','cowboy_bstr','Binary string manipulation.'],['mod','cowboyold','cowboy_clock','Date and time related functions.'],['mod','cowboyold','cowboy_cookies','HTTP Cookie parsing and generating (RFC 2965).'],['mod','cowboyold','cowboy_dispatcher','Dispatch requests according to a hostname and path'],['mod','cowboyold','cowboy_http','Core HTTP parsing API.'],['mod','cowboyold','cowboy_http_handler','Handler for HTTP requests.'],['mod','cowboyold','cowboy_http_protocol','HTTP protocol handler.'],['mod','cowboyold','cowboy_http_req','HTTP request manipulation API.'],['mod','cowboyold','cowboy_http_rest','Experimental REST protocol implementation.'],['mod','cowboyold','cowboy_http_static','Static resource handler.'],['mod','cowboyold','cowboy_http_websocket','WebSocket protocol implementation.'],['mod','cowboyold','cowboy_http_websocket_handler','Handler for HTTP WebSocket requests.'],['mod','cowboyold','cowboy_listener','Public API for managing listeners.'],['mod','cowboyold','cowboy_multipart','Multipart parser.'],['mod','cowboyold','cowboy_protocol','Cowboy protocol.'],['mod','cowboyold','cowboy_ssl_transport','SSL transport API.'],['mod','cowboyold','cowboy_tcp_transport','TCP transport API.'],['fun','cowboyold','cowboy:accept_ack/1','Acknowledge the accepted connection.'],['fun','cowboyold','cowboy:child_spec/1','Return a child spec suitable for embedding.'],['fun','cowboyold','cowboy:get_protocol_options/1','Return the current protocol options for the given '],['fun','cowboyold','cowboy:set_protocol_options/1','Upgrade the protocol options for the given listene'],['fun','cowboyold','cowboy:start_listener/1','Start a listener for the given transport and proto'],['fun','cowboyold','cowboy:stop_listener/1','Stop a listener identified by Ref.'],['fun','cowboyold','cowboy_bstr:char_to_lower/1','Convert [A-Z] characters to lowercase.'],['fun','cowboyold','cowboy_bstr:char_to_upper/1','Convert [a-z] characters to uppercase.'],['fun','cowboyold','cowboy_bstr:to_lower/1','Convert a binary string to lowercase.'],['fun','cowboyold','cowboy_clock:rfc1123/0','Return the current date and time formatted accordi'],['fun','cowboyold','cowboy_clock:rfc2109/1','Return the current date and time formatted accordi'],['fun','cowboyold','cowboy_cookies:cookie/1','Generate a Set-Cookie header field tuple.'],['fun','cowboyold','cowboy_cookies:cookie/1','Equivalent to cookie(Key, Value, []).'],['fun','cowboyold','cowboy_cookies:parse_cookie/1','Parse the contents of a Cookie header field, ignor'],['fun','cowboyold','cowboy_dispatcher:match/1','Match hostname tokens and path tokens against disp'],['fun','cowboyold','cowboy_dispatcher:split_host/1','Split a hostname into a list of tokens.'],['fun','cowboyold','cowboy_dispatcher:split_path/1','Split a path into a list of path segments.'],['fun','cowboyold','cowboy_http:asctime_date/1','Parse an asctime date.'],['fun','cowboyold','cowboy_http:ce_identity/1','Decode an identity content.'],['fun','cowboyold','cowboy_http:connection_to_atom/1','Walk through a tokens list and return whether  th'],['fun','cowboyold','cowboy_http:conneg/1','Parse a conneg header (Accept-Charset, Accept-Enco'],['fun','cowboyold','cowboy_http:content_type/1','Parse a content type.'],['fun','cowboyold','cowboy_http:digits/1','Parse a list of digits as a non negative integer.'],['fun','cowboyold','cowboy_http:entity_tag_match/1','Parse either a list of entity tags or a "*".'],['fun','cowboyold','cowboy_http:expectation/1','Parse an expectation.'],['fun','cowboyold','cowboy_http:http_date/1','Parse an HTTP date (RFC1123, RFC850 or asctime dat'],['fun','cowboyold','cowboy_http:language_range/1','Parse a language range, followed by an optional qu'],['fun','cowboyold','cowboy_http:list/1','Parse a list of the given type.'],['fun','cowboyold','cowboy_http:media_range/1','Parse a media range.'],['fun','cowboyold','cowboy_http:nonempty_list/1','Parse a non-empty list of the given type.'],['fun','cowboyold','cowboy_http:params/1','Parse a list of parameters (a=b;c=d).'],['fun','cowboyold','cowboy_http:quoted_string/1','Parse a quoted string.'],['fun','cowboyold','cowboy_http:rfc1123_date/1','Parse an RFC1123 date.'],['fun','cowboyold','cowboy_http:rfc850_date/1','Parse an RFC850 date.'],['fun','cowboyold','cowboy_http:te_chunked/1','Decode a stream of chunks.'],['fun','cowboyold','cowboy_http:te_identity/1','Decode an identity stream.'],['fun','cowboyold','cowboy_http:token/1','Parse a token.'],['fun','cowboyold','cowboy_http:token_ci/1','Parse a case-insensitive token.'],['fun','cowboyold','cowboy_http:urldecode/1','Decode a URL encoded binary.'],['fun','cowboyold','cowboy_http:urldecode/1','Decode a URL encoded binary.'],['fun','cowboyold','cowboy_http:urlencode/1','URL encode a string binary.'],['fun','cowboyold','cowboy_http:urlencode/1','URL encode a string binary.'],['fun','cowboyold','cowboy_http:version_to_binary/1','Convert an HTTP version tuple to its binary form.'],['fun','cowboyold','cowboy_http:whitespace/1','Skip whitespace.'],['fun','cowboyold','cowboy_http:x_www_form_urlencoded/1',[]],['fun','cowboyold','cowboy_http_protocol:handler_loop/1',[]],['fun','cowboyold','cowboy_http_protocol:start_link/1','Start an HTTP protocol process.'],['fun','cowboyold','cowboy_http_req:binding/1','Return the binding value for the given key obtaine'],['fun','cowboyold','cowboy_http_req:binding/1','Equivalent to binding(Name, Req, undefined).'],['fun','cowboyold','cowboy_http_req:bindings/1','Return the full list of binding values.'],['fun','cowboyold','cowboy_http_req:body/1','Return the full body sent with the request as long'],['fun','cowboyold','cowboy_http_req:body/1','Return the full body sent with the request.'],['fun','cowboyold','cowboy_http_req:body_length/1','Return the request message body length, if known.'],['fun','cowboyold','cowboy_http_req:body_qs/1','Return the full body sent with the reqest, parsed '],['fun','cowboyold','cowboy_http_req:chunk/1','Send a chunk of data.'],['fun','cowboyold','cowboy_http_req:chunked_reply/1','Initiate the sending of a chunked reply to the cli'],['fun','cowboyold','cowboy_http_req:chunked_reply/1','Equivalent to chunked_reply(Status, [], Req).'],['fun','cowboyold','cowboy_http_req:compact/1','Compact the request data by removing all non-syste'],['fun','cowboyold','cowboy_http_req:cookie/1','Return the cookie value for the given key, or a de'],['fun','cowboyold','cowboy_http_req:cookie/1','Equivalent to cookie(Name, Req, undefined).'],['fun','cowboyold','cowboy_http_req:cookies/1','Return the full list of cookie values.'],['fun','cowboyold','cowboy_http_req:has_body/1','Return whether the request message has a body.'],['fun','cowboyold','cowboy_http_req:has_resp_body/1','Return whether a body has been set for the respons'],['fun','cowboyold','cowboy_http_req:has_resp_header/1','Return whether the given header has been set for t'],['fun','cowboyold','cowboy_http_req:header/1','Return the header value for the given key, or a de'],['fun','cowboyold','cowboy_http_req:header/1','Equivalent to header(Name, Req, undefined).'],['fun','cowboyold','cowboy_http_req:headers/1','Return the full list of headers.'],['fun','cowboyold','cowboy_http_req:host/1','Return the tokens for the hostname requested.'],['fun','cowboyold','cowboy_http_req:host_info/1','Return the extra host information obtained from pa'],['fun','cowboyold','cowboy_http_req:init_stream/1','Initialize body streaming and set custom decoding '],['fun','cowboyold','cowboy_http_req:meta/1','Return metadata information about the request.'],['fun','cowboyold','cowboy_http_req:meta/1','Equivalent to meta(Name, Req, undefined).'],['fun','cowboyold','cowboy_http_req:method/1','Return the HTTP method of the request.'],['fun','cowboyold','cowboy_http_req:multipart_data/1','Return data from the multipart parser.'],['fun','cowboyold','cowboy_http_req:multipart_skip/1','Skip a part returned by the multipart parser.'],['fun','cowboyold','cowboy_http_req:parse_header/1','Semantically parse headers.'],['fun','cowboyold','cowboy_http_req:parse_header/1','Semantically parse headers.'],['fun','cowboyold','cowboy_http_req:path/1','Return the path segments for the path requested.'],['fun','cowboyold','cowboy_http_req:path_info/1','Return the extra path information obtained from pa'],['fun','cowboyold','cowboy_http_req:peer/1','Return the peer address and port number of the rem'],['fun','cowboyold','cowboy_http_req:peer_addr/1','Returns the peer address calculated from headers.'],['fun','cowboyold','cowboy_http_req:port/1','Return the port used for this request.'],['fun','cowboyold','cowboy_http_req:qs_val/1','Return the query string value for the given key, o'],['fun','cowboyold','cowboy_http_req:qs_val/1','Equivalent to qs_val(Name, Req, undefined).'],['fun','cowboyold','cowboy_http_req:qs_vals/1','Return the full list of query string values.'],['fun','cowboyold','cowboy_http_req:raw_host/1','Return the raw host directly taken from the reques'],['fun','cowboyold','cowboy_http_req:raw_path/1','Return the raw path directly taken from the reques'],['fun','cowboyold','cowboy_http_req:raw_qs/1','Return the raw query string directly taken from th'],['fun','cowboyold','cowboy_http_req:reply/1','Send a reply to the client.'],['fun','cowboyold','cowboy_http_req:reply/1','Equivalent to reply(Status, Headers, [], Req).'],['fun','cowboyold','cowboy_http_req:reply/1','Equivalent to reply(Status, [], [], Req).'],['fun','cowboyold','cowboy_http_req:set_resp_body/1','Add a body to the response.'],['fun','cowboyold','cowboy_http_req:set_resp_body_fun/1','Add a body function to the response.'],['fun','cowboyold','cowboy_http_req:set_resp_cookie/1','Add a cookie header to the response.'],['fun','cowboyold','cowboy_http_req:set_resp_header/1','Add a header to the response.'],['fun','cowboyold','cowboy_http_req:skip_body/1',[]],['fun','cowboyold','cowboy_http_req:stream_body/1','Stream the requests body.'],['fun','cowboyold','cowboy_http_req:transport/1','Return the transport module and socket associated '],['fun','cowboyold','cowboy_http_req:version/1','Return the HTTP version used for the request.'],['fun','cowboyold','cowboy_http_rest:upgrade/1','Upgrade a HTTP request to the REST protocol.'],['fun','cowboyold','cowboy_http_websocket:upgrade/1','Upgrade a HTTP request to the WebSocket protocol.'],['fun','cowboyold','cowboy_listener:add_connection/1','Add a connection to the given pool in the listener'],['fun','cowboyold','cowboy_listener:check_upgrades/1','Return whether a protocol upgrade is required.'],['fun','cowboyold','cowboy_listener:get_protocol_options/1','Return the current protocol options.'],['fun','cowboyold','cowboy_listener:move_connection/1','Move a connection from one pool to another.'],['fun','cowboyold','cowboy_listener:remove_connection/1','Remove the given connection from its pool.'],['fun','cowboyold','cowboy_listener:set_protocol_options/1','Upgrade the protocol options.'],['fun','cowboyold','cowboy_multipart:content_disposition/1','Parse a content disposition.'],['fun','cowboyold','cowboy_multipart:parser/1','Return a multipart parser for the given boundary.'],['fun','cowboyold','cowboy_ssl_transport:accept/1','Accept an incoming connection on a listen socket.'],['fun','cowboyold','cowboy_ssl_transport:close/1','Close a TCP socket.'],['fun','cowboyold','cowboy_ssl_transport:controlling_process/1','Assign a new controlling process Pid to Socket.'],['fun','cowboyold','cowboy_ssl_transport:listen/2','Setup a socket to listen on the given port on the '],['fun','cowboyold','cowboy_ssl_transport:messages/0','Atoms used in the process messages sent by this AP'],['fun','cowboyold','cowboy_ssl_transport:name/0','Name of this transport API, ssl.'],['fun','cowboyold','cowboy_ssl_transport:peername/1','Return the address and port for the other end of a'],['fun','cowboyold','cowboy_ssl_transport:recv/1','Receive a packet from a socket in passive mode.'],['fun','cowboyold','cowboy_ssl_transport:send/1','Send a packet on a socket.'],['fun','cowboyold','cowboy_ssl_transport:setopts/1','Set one or more options for a socket.'],['fun','cowboyold','cowboy_ssl_transport:sockname/1','Get the local address and port of a socket.'],['fun','cowboyold','cowboy_tcp_transport:accept/1','Accept an incoming connection on a listen socket.'],['fun','cowboyold','cowboy_tcp_transport:close/1','Close a TCP socket.'],['fun','cowboyold','cowboy_tcp_transport:controlling_process/1','Assign a new controlling process Pid to Socket.'],['fun','cowboyold','cowboy_tcp_transport:listen/2','Setup a socket to listen on the given port on the '],['fun','cowboyold','cowboy_tcp_transport:messages/0','Atoms used in the process messages sent by this AP'],['fun','cowboyold','cowboy_tcp_transport:name/0','Name of this transport API, tcp.'],['fun','cowboyold','cowboy_tcp_transport:peername/1','Return the address and port for the other end of a'],['fun','cowboyold','cowboy_tcp_transport:recv/1','Receive a packet from a socket in passive mode.'],['fun','cowboyold','cowboy_tcp_transport:send/1','Send a packet on a socket.'],['fun','cowboyold','cowboy_tcp_transport:setopts/1','Set one or more options for a socket.'],['fun','cowboyold','cowboy_tcp_transport:sockname/1','Get the local address and port of a socket.']];