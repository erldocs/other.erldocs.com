var index = [['app','ubf','ubf','[application]'],['mod','ubf','contract_driver','Generic protocol driver process for protocol sessi'],['mod','ubf','contract_manager','Contract manager server.'],['mod','ubf','contract_manager_tlog','Contract manager transaction logging.'],['mod','ubf','contract_parser','UBF(B) contract parser.'],['mod','ubf','contract_proto','Generic protocol encoder/decoder for protocol sess'],['mod','ubf','contracts','Contract implementation: compare a term against a '],['mod','ubf','contracts_abnf','Contract checking assistants for ABNF.'],['mod','ubf','ebf','Low-level functions for encoding and decoding the '],['mod','ubf','ebf_driver','Protocol driver process for EBF (Erlang Binary For'],['mod','ubf','proc_socket_server','Keeps track of a number of TCP sessions.'],['mod','ubf','proc_utils','Low-level utilities for proc_socket_server.'],['mod','ubf','ubf','Low-level functions for encoding and decoding the '],['mod','ubf','ubf_client','UBF client-side public API.'],['mod','ubf','ubf_driver','Protocol driver process for UBF(A) protocol sessio'],['mod','ubf','ubf_plugin_handler','Implement the plugin server, an intermediate proce'],['mod','ubf','ubf_plugin_meta_stateful','Implement the UBF(C) meta-protocol for UBF(B) "sta'],['mod','ubf','ubf_plugin_meta_stateless','Implement the UBF(C) meta-protocol for UBF(B) "sta'],['mod','ubf','ubf_plugin_stateful','Callbacks for stateful plugin implementations.'],['mod','ubf','ubf_plugin_stateless','Callbacks for stateless plugin implementations.'],['mod','ubf','ubf_server','UBF server-side public API.'],['mod','ubf','ubf_utils',[]],['fun','ubf','contract_driver:behaviour_info/1',[]],['fun','ubf','contract_driver:loop/4',[]],['fun','ubf','contract_driver:loop/5',[]],['fun','ubf','contract_driver:loop/6','Driver main loop.'],['fun','ubf','contract_driver:relay/3',[]],['fun','ubf','contract_driver:start/2',[]],['fun','ubf','contract_manager:do_eventIn/4',[]],['fun','ubf','contract_manager:do_eventOut/4',[]],['fun','ubf','contract_manager:do_lpcIn/4',[]],['fun','ubf','contract_manager:do_lpcOut/9',[]],['fun','ubf','contract_manager:do_lpcOutError/6',[]],['fun','ubf','contract_manager:do_rpcIn/4',[]],['fun','ubf','contract_manager:do_rpcOut/9',[]],['fun','ubf','contract_manager:do_rpcOutError/5',[]],['fun','ubf','contract_manager:do_rpcOutError/6',[]],['fun','ubf','contract_manager:start/1',[]],['fun','ubf','contract_manager:start/1',[]],['fun','ubf','contract_manager_tlog:eventIn/5',[]],['fun','ubf','contract_manager_tlog:eventOut/5',[]],['fun','ubf','contract_manager_tlog:lpcIn/4',[]],['fun','ubf','contract_manager_tlog:lpcOut/9',[]],['fun','ubf','contract_manager_tlog:lpcOutError/6',[]],['fun','ubf','contract_manager_tlog:rpcFinish/1',[]],['fun','ubf','contract_manager_tlog:rpcIn/4',[]],['fun','ubf','contract_manager_tlog:rpcOut/9',[]],['fun','ubf','contract_manager_tlog:rpcOutError/5',[]],['fun','ubf','contract_manager_tlog:rpcOutError/6',[]],['fun','ubf','contract_parser:make/0',[]],['fun','ubf','contract_parser:make_lex/0',[]],['fun','ubf','contract_parser:make_yecc/0',[]],['fun','ubf','contract_parser:parse_transform/2',[]],['fun','ubf','contract_parser:parse_transform_contract/2',[]],['fun','ubf','contract_parser:preDefinedTypes/0',[]],['fun','ubf','contract_parser:preDefinedTypesWithAttrs/0',[]],['fun','ubf','contract_parser:preDefinedTypesWithoutAttrs/0',[]],['fun','ubf','contract_parser:tags/1',[]],['fun','ubf','contract_parser:tags/2',[]],['fun','ubf','contract_proto:behaviour_info/1',[]],['fun','ubf','contracts:checkEventIn/3',[]],['fun','ubf','contracts:checkEventOut/3',[]],['fun','ubf','contracts:checkRPCIn/3',[]],['fun','ubf','contracts:checkRPCOut/4',[]],['fun','ubf','contracts:checkType/1','Given a contract type name, a term to check agains'],['fun','ubf','contracts:isType/3',[]],['fun','ubf','contracts:isTypeAttr/2',[]],['fun','ubf','contracts_abnf:check_binary/4','Parse (and validate) the given binary against abnf'],['fun','ubf','ebf:decode/1',[]],['fun','ubf','ebf:decode/2',[]],['fun','ubf','ebf:decode/3',[]],['fun','ubf','ebf:decode_init/0',[]],['fun','ubf','ebf:encode/1',[]],['fun','ubf','ebf:encode/2',[]],['fun','ubf','ebf:proto_driver/0',[]],['fun','ubf','ebf:proto_packet_type/0',[]],['fun','ubf','ebf:proto_vsn/0',[]],['fun','ubf','ebf_driver:decode/4',[]],['fun','ubf','ebf_driver:encode/2',[]],['fun','ubf','ebf_driver:init/1',[]],['fun','ubf','ebf_driver:start/1',[]],['fun','ubf','proc_socket_server:cold_start/7',[]],['fun','ubf','proc_socket_server:server_children/1',[]],['fun','ubf','proc_socket_server:server_children/2',[]],['fun','ubf','proc_socket_server:server_port/1',[]],['fun','ubf','proc_socket_server:server_port/2',[]],['fun','ubf','proc_socket_server:server_status/1',[]],['fun','ubf','proc_socket_server:server_status/2',[]],['fun','ubf','proc_socket_server:start_child/3',[]],['fun','ubf','proc_socket_server:start_raw_server/5',[]],['fun','ubf','proc_socket_server:start_raw_server/7',[]],['fun','ubf','proc_socket_server:start_server/3','Start a new UBF contract-using server.'],['fun','ubf','proc_socket_server:start_server/4',[]],['fun','ubf','proc_socket_server:stop_server/1',[]],['fun','ubf','proc_utils:debug/0',[]],['fun','ubf','proc_utils:debug/1',[]],['fun','ubf','proc_utils:spawn_link_debug/2',[]],['fun','ubf','proc_utils:spawn_link_opt_debug/3',[]],['fun','ubf','ubf:deabstract/1',[]],['fun','ubf','ubf:decode/1',[]],['fun','ubf','ubf:decode/2',[]],['fun','ubf','ubf:decode/3',[]],['fun','ubf','ubf:decode_init/0',[]],['fun','ubf','ubf:encode/1',[]],['fun','ubf','ubf:encode/2',[]],['fun','ubf','ubf:proto_driver/0',[]],['fun','ubf','ubf:proto_packet_type/0',[]],['fun','ubf','ubf:proto_vsn/0',[]],['fun','ubf','ubf_client:connect/1','Connect to a UBF server at address Host + TCP port'],['fun','ubf','ubf_client:connect/1','Connect to a UBF server at address Host + TCP port'],['fun','ubf','ubf_client:connect/1','Connect to a UBF server at address Host + TCP port'],['fun','ubf','ubf_client:install_default_handler/1','Install a default handler function (callback-style'],['fun','ubf','ubf_client:install_handler/1','Install a handler function (callback-style) for as'],['fun','ubf','ubf_client:lpc/1','Perform a synchronous LPC (local procedure) call w'],['fun','ubf','ubf_client:lpc/1','Perform a synchronous LPC (local procedure) call w'],['fun','ubf','ubf_client:lpc/4',[]],['fun','ubf','ubf_client:rpc/1','Perform a synchronous RPC call.'],['fun','ubf','ubf_client:rpc/1','Perform a synchronous RPC call.'],['fun','ubf','ubf_client:sendEvent/1','Send an asynchronous UBF message.'],['fun','ubf','ubf_client:stop/1','Stop a UBF client process.'],['fun','ubf','ubf_driver:decode/4',[]],['fun','ubf','ubf_driver:encode/2',[]],['fun','ubf','ubf_driver:init/1',[]],['fun','ubf','ubf_driver:start/1',[]],['fun','ubf','ubf_plugin_handler:ask_manager/2',[]],['fun','ubf','ubf_plugin_handler:install_default_handler/1','Install a default handler function (callback-style'],['fun','ubf','ubf_plugin_handler:install_handler/1','Install a handler function (callback-style) for as'],['fun','ubf','ubf_plugin_handler:manager/3',[]],['fun','ubf','ubf_plugin_handler:sendEvent/1','Send an asynchronous UBF message.'],['fun','ubf','ubf_plugin_handler:start_handler/5',[]],['fun','ubf','ubf_plugin_handler:start_manager/2',[]],['fun','ubf','ubf_plugin_meta_stateful:description/0','Emit a description string.'],['fun','ubf','ubf_plugin_meta_stateful:handlerRpc/1','Required UBF contract implementation callback: cal'],['fun','ubf','ubf_plugin_meta_stateful:handlerStart/1','Required UBF contract implementation callback: sta'],['fun','ubf','ubf_plugin_meta_stateful:handlerStop/1','Required UBF contract implementation callback: sto'],['fun','ubf','ubf_plugin_meta_stateful:info/0','Emit an info string.'],['fun','ubf','ubf_plugin_meta_stateful:managerRestart/1','Required UBF contract implementation callback: res'],['fun','ubf','ubf_plugin_meta_stateful:managerRpc/1','Required UBF contract implementation callback: cal'],['fun','ubf','ubf_plugin_meta_stateful:managerStart/1','Required UBF contract implementation callback: sta'],['fun','ubf','ubf_plugin_meta_stateless:description/0','Emit a description string.'],['fun','ubf','ubf_plugin_meta_stateless:handlerRpc/1','Required UBF contract implementation callback: cal'],['fun','ubf','ubf_plugin_meta_stateless:handlerStart/1','Required UBF contract implementation callback: sta'],['fun','ubf','ubf_plugin_meta_stateless:handlerStop/1','Required UBF contract implementation callback: sto'],['fun','ubf','ubf_plugin_meta_stateless:info/0','Emit an info string.'],['fun','ubf','ubf_plugin_meta_stateless:managerRestart/1','Required UBF contract implementation callback: res'],['fun','ubf','ubf_plugin_meta_stateless:managerRpc/1','Required UBF contract implementation callback: cal'],['fun','ubf','ubf_plugin_meta_stateless:managerStart/1','Required UBF contract implementation callback: sta'],['fun','ubf','ubf_plugin_stateful:behaviour_info/1',[]],['fun','ubf','ubf_plugin_stateless:behaviour_info/1',[]],['fun','ubf','ubf_server:init/5',[]],['fun','ubf','ubf_server:start/1','Start a registered server and a TCP listener on po'],['fun','ubf','ubf_server:start/1','Start a registered server and a TCP listener on po'],['fun','ubf','ubf_server:start/1','Start a server and a TCP listener on port Port and'],['fun','ubf','ubf_server:start_link/1','See start/4, but also link the server processs to '],['fun','ubf','ubf_server:start_link/1','See start/3, but also link the server processs to '],['fun','ubf','ubf_server:start_link/1','See start/2, but also link the server processs to '],['fun','ubf','ubf_server:start_term_listener/3',[]],['fun','ubf','ubf_utils:ubf_contract/1',[]],['fun','ubf','ubf_utils:ubf_contract/2',[]]];