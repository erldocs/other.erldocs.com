var index = [['app','ecrdt','ecrdt','[application]'],['mod','ecrdt','ecrdt',[]],['mod','ecrdt','mpncounter',[]],['mod','ecrdt','rot','   This is not a general purpose data structure, '],['mod','ecrdt','v2pset','   An implementation of a 2P sets, a add remove s'],['mod','ecrdt','vgcounter','   An implementation of the GCounter (grow only c'],['mod','ecrdt','vgcounter2','   An Implementation of the GCounter (grow only c'],['mod','ecrdt','vgset','   An Implementation of the GSset (grow only set)'],['mod','ecrdt','vlwwregister','   This implements a simple last write wins regis'],['mod','ecrdt','vorset','   An Implementation of the OR Set (Observe Remov'],['mod','ecrdt','vorset2','   An Implementation of the OR Set (Observe Remov'],['mod','ecrdt','vorsetg','   This is an extention of the standard OR Set im'],['mod','ecrdt','vpncounter','   This implements the NPCounter (negative positi'],['mod','ecrdt','vpncounter2','   This implements the NPCounter (negative positi'],['mod','ecrdt','vpnset','   An implementation of PN Sets based on a define'],['mod','ecrdt','vpnset2','   An implementation of PN Sets based on a undefi'],['fun','ecrdt','ecrdt:id/0',[]],['fun','ecrdt','ecrdt:merge/2',[]],['fun','ecrdt','ecrdt:now_us/0',[]],['fun','ecrdt','ecrdt:timestamp_us/0',[]],['fun','ecrdt','ecrdt:value/1',[]],['fun','ecrdt','mpncounter:dec/2',[]],['fun','ecrdt','mpncounter:downstream/2',[]],['fun','ecrdt','mpncounter:gc/1',[]],['fun','ecrdt','mpncounter:inc/2',[]],['fun','ecrdt','mpncounter:new/0',[]],['fun','ecrdt','mpncounter:replay/2',[]],['fun','ecrdt','mpncounter:value/1',[]],['fun','ecrdt','rot:add/1','  Adds a element to the ROT.'],['fun','ecrdt','rot:full/1','  Lists all full buckets with ID and content Hash'],['fun','ecrdt','rot:merge/2',[]],['fun','ecrdt','rot:new/0','  Creates a new ROT with a initial ID and default'],['fun','ecrdt','rot:new/1','  Creates a new ROT with a initial ID and a given'],['fun','ecrdt','rot:remove/1','  Deletes a bucket with a given Id and Hash.'],['fun','ecrdt','rot:value/1','  Gets the values stored in the rot.'],['fun','ecrdt','v2pset:add/1','  Adds an element to the 2p set, if this element '],['fun','ecrdt','v2pset:from_list/1','  Creates a 2p set from an existing list by addin'],['fun','ecrdt','v2pset:gc/1','  Garbace collects the 2p set by computing the va'],['fun','ecrdt','v2pset:merge/1','  Merges two 2p sets by creating the union of add'],['fun','ecrdt','v2pset:new/0','  Creates a new empty 2P set.'],['fun','ecrdt','v2pset:remove/1','  removes an element to the 2p set, this call is '],['fun','ecrdt','v2pset:value/1','  Gets teh value of the 2p set by taking substrac'],['fun','ecrdt','vgcounter2:inc/1','  Increments the counter for a given master, if t'],['fun','ecrdt','vgcounter2:merge/1','  Merges to GCounters, by keeping the maximum kno'],['fun','ecrdt','vgcounter2:new/0','  Creates a new empty vgcounter2.'],['fun','ecrdt','vgcounter2:value/1','  Compiles the value of the counter by summing up'],['fun','ecrdt','vgcounter:inc/1','  Increments the counter for a given master.'],['fun','ecrdt','vgcounter:merge/1','  Merges to GCounters, by keeping the maximum kno'],['fun','ecrdt','vgcounter:new/1','  Creates a new empty vgcounter with a given size'],['fun','ecrdt','vgcounter:value/1','  Compiles the value of the counter by summing up'],['fun','ecrdt','vgset:add/1','  Adds an element to the Vgset.'],['fun','ecrdt','vgset:from_list/1','  Creates a new Vgset with the elements from the '],['fun','ecrdt','vgset:merge/1','  Merges tow Vgsets.'],['fun','ecrdt','vgset:new/0','  Creates a new empty Vgset.'],['fun','ecrdt','vgset:value/1','  Gets the value of a Vgset.'],['fun','ecrdt','vlwwregister:assign/1','  Sets the value of a LWW register and updates th'],['fun','ecrdt','vlwwregister:merge/1','  Merges two LWW registers by discarding the olde'],['fun','ecrdt','vlwwregister:new/1','  Creates a new empty LWW register.'],['fun','ecrdt','vlwwregister:value/1','  Gets the value out of a LWW register.'],['fun','ecrdt','vorset2:add/1','  Values an element to the OR set with a given ma'],['fun','ecrdt','vorset2:add/1','  Values an element to the OR set using the defau'],['fun','ecrdt','vorset2:from_list/1','  Creates a new OR Set form a list by adding each'],['fun','ecrdt','vorset2:gc/1','  Garbage collects a OR set by removing all delte'],['fun','ecrdt','vorset2:merge/1','  Merges two OR Sets.'],['fun','ecrdt','vorset2:new/0','  Creates a new empty OR Set.'],['fun','ecrdt','vorset2:remove/1','  Removes a element from the OR set.'],['fun','ecrdt','vorset2:value/1','  Retrives the list of values from an OR Set.'],['fun','ecrdt','vorset:add/1','  Adds an element to the OR set using the default'],['fun','ecrdt','vorset:add/1','  Adds an element to the OR set with a given mast'],['fun','ecrdt','vorset:from_list/1','  Creates a new OR Set form a list by adding each'],['fun','ecrdt','vorset:gc/1','  Garbage collects a OR set by storing the curren'],['fun','ecrdt','vorset:merge/1','  Merges two OR Sets by taking the union of adds '],['fun','ecrdt','vorset:new/0','  Creates a new empty OR Set.'],['fun','ecrdt','vorset:remove/1','  Removes a element from the OR set by finding al'],['fun','ecrdt','vorset:value/1','  Retrives the list of values from an OR Set by t'],['fun','ecrdt','vorsetg:add/1','  Adds an element to the OR set using the default'],['fun','ecrdt','vorsetg:add/1','  Adds an element to the OR set with a given mast'],['fun','ecrdt','vorsetg:gc/1','  Garbage collects a hash bucket from the OR set '],['fun','ecrdt','vorsetg:gcable/1',[]],['fun','ecrdt','vorsetg:merge/1','  Merges two OR Sets by taking the union of adds '],['fun','ecrdt','vorsetg:new/0','  Creates a new empty OR Set.'],['fun','ecrdt','vorsetg:new/1','  Creates a new empty OR Set with a given bucket '],['fun','ecrdt','vorsetg:remove/1',[]],['fun','ecrdt','vorsetg:remove/1','  Removes a element from the OR set by finding al'],['fun','ecrdt','vorsetg:value/1','  Retrives the list of values from an OR Set by t'],['fun','ecrdt','vpncounter2:dec/1','  Decrements the counter for a given master, if t'],['fun','ecrdt','vpncounter2:inc/1','  Increments the counter for a given master, if t'],['fun','ecrdt','vpncounter2:merge/1','  Merges to PNCounters, by keeping the maximum kn'],['fun','ecrdt','vpncounter2:new/0','  Creates a new empty vnpcounter2.'],['fun','ecrdt','vpncounter2:value/1','  Compiles the value of the counter by summing up'],['fun','ecrdt','vpncounter:dec/1','  Increments the counter for a given master.'],['fun','ecrdt','vpncounter:inc/1','  Increments the counter for a given master.'],['fun','ecrdt','vpncounter:merge/1','  Merges to PNCounters, by keeping the maximum kn'],['fun','ecrdt','vpncounter:new/1','  Creates a new empty vnpcounter with a given siz'],['fun','ecrdt','vpncounter:value/1','  Calculates the final value of the counter.'],['fun','ecrdt','vpnset2:add/1','  Adds an element to the PN set with a given mast'],['fun','ecrdt','vpnset2:merge/1','  Merges two PN Sets by taking combining the coun'],['fun','ecrdt','vpnset2:new/0','  Creates a new empty PN Set.'],['fun','ecrdt','vpnset2:remove/1','  Removes an element from the set, this has no ef'],['fun','ecrdt','vpnset2:value/1','  Retrives the list of values from an PN Set by d'],['fun','ecrdt','vpnset:add/1','  Adds an element to the PN set with a given mast'],['fun','ecrdt','vpnset:merge/1','  Merges two PN Sets by taking combining the coun'],['fun','ecrdt','vpnset:new/1','  Creates a new empty PN Set.'],['fun','ecrdt','vpnset:remove/1','  Removes an element from the set, this has no ef'],['fun','ecrdt','vpnset:value/1','  Retrives the list of values from an PN Set by d']];