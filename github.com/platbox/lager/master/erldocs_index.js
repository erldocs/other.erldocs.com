var index = [['app','lager','lager','[application]'],['mod','lager','lager','The lager logging framework.'],['mod','lager','lager_backend_throttle','A simple gen_event backend used to monitor mailbox'],['mod','lager','lager_common_test_backend',[]],['mod','lager','lager_config','Helper functions for working with lagers runtime '],['mod','lager','lager_console_backend','Console backend for lager.'],['mod','lager','lager_crash_log','Lager crash log writer.'],['mod','lager','lager_default_formatter',[]],['mod','lager','lager_file_backend','File backend for lager, with multiple file support'],['mod','lager','lager_format',[]],['mod','lager','lager_msg',[]],['mod','lager','lager_stdlib','Functions from Erlang OTP distribution that are re'],['mod','lager','lager_transform','The parse transform used for lager messages.'],['mod','lager','lager_trunc_io','Module to print out terms for logging.'],['mod','lager','lager_util',[]],['fun','lager','lager:clear_all_traces/0',[]],['fun','lager','lager:dispatch_log/1',[]],['fun','lager','lager:dispatch_log/9',[]],['fun','lager','lager:get_loglevel/1','Get the loglevel for a particular backend.'],['fun','lager','lager:log/1','Manually log a message into lager without using th'],['fun','lager','lager:log/1','Manually log a message into lager without using th'],['fun','lager','lager:md/0','Get lager metadata for current process.'],['fun','lager','lager:md/1','Set lager metadata for current process.'],['fun','lager','lager:posix_error/1','Try to convert an atom to a posix error, but fall '],['fun','lager','lager:pr/2','Print a record lager found during parse transform.'],['fun','lager','lager:safe_format/3','Print the format string Fmt with Args safely with '],['fun','lager','lager:set_loglevel/2','Set the loglevel for a particular backend.'],['fun','lager','lager:set_loglevel/3','Set the loglevel for a particular backend that has'],['fun','lager','lager:start/0','Start the application.'],['fun','lager','lager:status/0',[]],['fun','lager','lager:stop_trace/1',[]],['fun','lager','lager:trace/2',[]],['fun','lager','lager:trace/3',[]],['fun','lager','lager:trace_console/1',[]],['fun','lager','lager:trace_console/2',[]],['fun','lager','lager:trace_file/2',[]],['fun','lager','lager:trace_file/3',[]],['fun','lager','lager:trace_file/4',[]],['fun','lager','lager:update_loglevel_config/0','recalculate min log level.'],['fun','lager','lager_backend_throttle:handle_call/2',[]],['fun','lager','lager_backend_throttle:handle_event/2',[]],['fun','lager','lager_backend_throttle:handle_info/2',[]],['fun','lager','lager_backend_throttle:init/1',[]],['fun','lager','lager_common_test_backend:bounce/0',[]],['fun','lager','lager_common_test_backend:bounce/1',[]],['fun','lager','lager_common_test_backend:get_logs/0','Before every test, just  lager_common_test_backen'],['fun','lager','lager_common_test_backend:terminate/1','gen_event callback, does nothing.'],['fun','lager','lager_config:get/1',[]],['fun','lager','lager_config:get/2',[]],['fun','lager','lager_config:new/0',[]],['fun','lager','lager_config:set/2',[]],['fun','lager','lager_default_formatter:format/1',[]],['fun','lager','lager_default_formatter:format/1','Provides a generic, default formatting for log mes'],['fun','lager','lager_file_backend:init/1',[]],['fun','lager','lager_format:format/3',[]],['fun','lager','lager_format:format/4',[]],['fun','lager','lager_msg:datetime/1',[]],['fun','lager','lager_msg:destinations/1',[]],['fun','lager','lager_msg:message/1',[]],['fun','lager','lager_msg:metadata/1',[]],['fun','lager','lager_msg:new/1',[]],['fun','lager','lager_msg:new/1',[]],['fun','lager','lager_msg:severity/1',[]],['fun','lager','lager_msg:severity_as_int/1',[]],['fun','lager','lager_msg:timestamp/1',[]],['fun','lager','lager_stdlib:is_my_error_report/1',[]],['fun','lager','lager_stdlib:is_my_info_report/1',[]],['fun','lager','lager_stdlib:maybe_utc/1',[]],['fun','lager','lager_stdlib:proc_lib_format/1',[]],['fun','lager','lager_stdlib:string_p/1',[]],['fun','lager','lager_stdlib:sup_get/1',[]],['fun','lager','lager_stdlib:write_time/2',[]],['fun','lager','lager_trunc_io:format/3',[]],['fun','lager','lager_trunc_io:format/4',[]],['fun','lager','lager_trunc_io:fprint/1','Returns an flattened list containing the ASCII rep'],['fun','lager','lager_trunc_io:fprint/1','Returns an flattened list containing the ASCII rep'],['fun','lager','lager_trunc_io:print/1','Returns {List, Length}.'],['fun','lager','lager_trunc_io:print/1','Returns {List, Length}.'],['fun','lager','lager_trunc_io:safe/1','Same as print, but never crashes.'],['fun','lager','lager_util:calculate_next_rotation/1',[]],['fun','lager','lager_util:check_traces/4',[]],['fun','lager','lager_util:config_to_levels/1',[]],['fun','lager','lager_util:config_to_mask/1',[]],['fun','lager','lager_util:ensure_logfile/4',[]],['fun','lager','lager_util:expand_path/1',[]],['fun','lager','lager_util:format_time/0',[]],['fun','lager','lager_util:format_time/1',[]],['fun','lager','lager_util:is_loggable/1',[]],['fun','lager','lager_util:level_to_num/1',[]],['fun','lager','lager_util:levels/0',[]],['fun','lager','lager_util:localtime_ms/0',[]],['fun','lager','lager_util:localtime_ms/1',[]],['fun','lager','lager_util:mask_to_levels/1',[]],['fun','lager','lager_util:maybe_utc/1',[]],['fun','lager','lager_util:num_to_level/1',[]],['fun','lager','lager_util:open_logfile/2',[]],['fun','lager','lager_util:parse_rotation_date_spec/1',[]],['fun','lager','lager_util:rotate_logfile/2',[]],['fun','lager','lager_util:trace_filter/1',[]],['fun','lager','lager_util:trace_filter/2',[]],['fun','lager','lager_util:validate_trace/1',[]]];