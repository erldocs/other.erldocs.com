var index = [['app','recordset','recordset','[application]'],['mod','recordset','recordset','An optionally fixed-sized ordered set of complex t'],['fun','recordset','recordset:add/1','Add Term to the recordset.'],['fun','recordset','recordset:delete/1','Remove an element from the recordset.'],['fun','recordset','recordset:from_list/1','Populate the specified RecordSet with the given  '],['fun','recordset','recordset:from_list/1','Equivalent to from_list(List,	  recordset:new(Ide'],['fun','recordset','recordset:is_recordset/1','Return true if the argument is a recordset,      '],['fun','recordset','recordset:max_size/1','Return the max size as an integer or undefined if '],['fun','recordset','recordset:new/1','Create an empty recordset.'],['fun','recordset','recordset:new/1','Equivalent to new(IdentityFun, SortFun, []).'],['fun','recordset','recordset:size/1','Return the current size of the given recordset as '],['fun','recordset','recordset:statebox_add/1','Return a statebox:op() which will add the given  '],['fun','recordset','recordset:statebox_delete/1','Return a statebox:op() which will delete the given'],['fun','recordset','recordset:to_list/1','Return the elements in the recordset as an ordered']];