var index = [['app','steve','steve','[application]'],['mod','steve','capi',[]],['mod','steve','fake_peer',[]],['mod','steve','papi',[]],['mod','steve','requests',[]],['mod','steve','steve',[]],['mod','steve','steve_action',[]],['mod','steve','steve_conn',[]],['mod','steve','steve_ftp',[]],['mod','steve','steve_state_msg',[]],['mod','steve','steve_util',[]],['fun','steve','capi:encode/1','Encodes a CAPI message (from server) into a binary'],['fun','steve','capi:parse/1','Parses a RawData packet from a TCP socket, and con'],['fun','steve','fake_peer:code_change/3',[]],['fun','steve','fake_peer:get_samples/0',[]],['fun','steve','fake_peer:handle_call/3','Calls arent really used.'],['fun','steve','fake_peer:handle_cast/2','Sending messages to the remote.'],['fun','steve','fake_peer:handle_info/2','Handle misc tcp data.'],['fun','steve','fake_peer:init/1','Initialize the Fake Peer.'],['fun','steve','fake_peer:mk_papi/3',[]],['fun','steve','fake_peer:mk_papi/4',[]],['fun','steve','fake_peer:run_sample/2',[]],['fun','steve','fake_peer:send_papi/2',[]],['fun','steve','fake_peer:send_raw/2',[]],['fun','steve','fake_peer:start/1',[]],['fun','steve','fake_peer:stop/1',[]],['fun','steve','fake_peer:terminate/2','Following callbacks are ignored.'],['fun','steve','papi:ci_fid/1','Contact Info dictionary lookup for the Friends ID'],['fun','steve','papi:ci_ip/1','Contact Info dictionary lookup for IP.'],['fun','steve','papi:ci_port/1','Contact Info dictionary lookup for port.'],['fun','steve','papi:create_ci/1','Create a Contact Information dictionary for placin'],['fun','steve','papi:create_rr/1',[]],['fun','steve','papi:encode/1','Encodes a PAPI message (from server) into a binary'],['fun','steve','papi:parse/1','Parses a RawData packet from a TCP socket, and con'],['fun','steve','papi:rr_archived/1','Result Report accessor for whether the result has '],['fun','steve','papi:rr_fid/1','Result Report accessor for the Friends ID.'],['fun','steve','papi:rr_value/1','Result Report access for the value of the result.'],['fun','steve','requests:build/1',[]],['fun','steve','requests:match/2',[]],['fun','steve','steve:add_peer/2','Add a peer/friend for steve to try and connect to.'],['fun','steve','steve:list_connections/0','Lists all currently connected friends and clients'],['fun','steve','steve:start/0','Start the steve daemon with the default options fr'],['fun','steve','steve:start/1','Start the steve daemon with overrided options.'],['fun','steve','steve:stop/0','Stop the running steve daemon.'],['fun','steve','steve_action:default_vars/0','Due to the complications that would arrise if vari'],['fun','steve','steve_action:do/3',[]],['fun','steve','steve_action:start/0','Start up the Exec port so that we can run external'],['fun','steve','steve_conn:check_mq_group/1','Get a list of process ids of all message queues i'],['fun','steve','steve_conn:esend/1','Send a message out to all message queues excluding'],['fun','steve','steve_conn:friend_conn_info/0','Ask the running friends conn server what the conne'],['fun','steve','steve_conn:get_client_count/0','Gets the number of currently connected Clients.'],['fun','steve','steve_conn:get_client_list/0','Gets a list of friend connections of the status: {'],['fun','steve','steve_conn:get_friend_count/0','Gets the number of currently connected Peers/Frien'],['fun','steve','steve_conn:get_friend_list/0','Gets a list of friend connections of the status: {'],['fun','steve','steve_conn:send/1','Send a message to a particular group member.'],['fun','steve','steve_conn:start_link/0','  Starts the server.'],['fun','steve','steve_conn:start_link/3',[]],['fun','steve','steve_ftp:abort/3','Aborts the file transfer.'],['fun','steve','steve_ftp:get_config/0','Get the default configuration for TFTP.'],['fun','steve','steve_ftp:get_conn_port/0','Get the port Clients will need to connect to for f'],['fun','steve','steve_ftp:open/6','Opens a file for read/write access.'],['fun','steve','steve_ftp:prepare/6','Prepares open of a file on the client side.'],['fun','steve','steve_ftp:read/1','Reads a chunk of a file from the wire.'],['fun','steve','steve_ftp:write/2','Writes a chunk from the wire to a file.'],['fun','steve','steve_state_msg:broadcast/1','Broadcast a message to ALL friends/peers.'],['fun','steve','steve_state_msg:forward/2','Similar to broadcast, but will forward to all frie'],['fun','steve','steve_state_msg:handle_note/3','Handle a notification message and update state.'],['fun','steve','steve_state_msg:handle_papim/3','Checks if the message is a repeat and discards if '],['fun','steve','steve_state_msg:handle_query/2','Handle a query and respond.'],['fun','steve','steve_util:bits_to_uuid/1','Converts the bits pulled from a string into a UUID'],['fun','steve','steve_util:clean_path/1','Clean a file path for the local OS.'],['fun','steve','steve_util:decode_json/1','Use the JSONx Library for decoding a binary Json m'],['fun','steve','steve_util:encode_json/1','Use the JSONx Library for encoding a binary Json m'],['fun','steve','steve_util:getrootdir/0','Get the root directory Steve uses for saving/confi'],['fun','steve','steve_util:hash/1','Hashes using the erlangs built in portable hashin'],['fun','steve','steve_util:loadrc/1','Interpret a RC file by reading it in and evaluatin'],['fun','steve','steve_util:readfile/1','Reads in a file and returns the contents as a bina'],['fun','steve','steve_util:str_to_uuid/1','Converts a string to a UUID.'],['fun','steve','steve_util:uuid/0','Follows RFC4122 for generating UUIDs version 4 via'],['fun','steve','steve_util:uuid_compare/1','Compares two UUIDs, which can be of any form (stri'],['fun','steve','steve_util:uuid_to_str/1','Used for converting for File creation based on Com'],['fun','steve','steve_util:valid_uuid/1','Checks to make sure the uuid is of the right size ']];