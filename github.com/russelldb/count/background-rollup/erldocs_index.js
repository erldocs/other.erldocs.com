var index = [['app','count','count','[application]'],['mod','count','count',[]],['mod','count','count_app',[]],['mod','count','count_client','Interface to count.'],['mod','count','count_console','Interface for riak_searchng-admin commands.'],['mod','count','count_db','   Common db functions.'],['mod','count','count_gcounter','   a G-Counter CRDT, borrows liberally from argv0'],['mod','count','count_get_fsm',[]],['mod','count','count_get_fsm_sup',[]],['mod','count','count_incr_fsm',[]],['mod','count','count_incr_fsm_sup',[]],['mod','count','count_node_event_handler',[]],['mod','count','count_pncounter',[]],['mod','count','count_ring_event_handler',[]],['mod','count','count_sup',[]],['mod','count','count_vnode','   First pass at append only counter.'],['mod','count','count_vnode_worker','   If a key has N updates against it, roll them u'],['fun','count','count:ping/0','Pings a random vnode to make sure communication is'],['fun','count','count_app:start/2',[]],['fun','count','count_app:stop/1',[]],['fun','count','count_client:get/1',[]],['fun','count','count_client:incr/2','increment counter at Key by Amount  note zero is '],['fun','count','count_console:down/1',[]],['fun','count','count_console:ringready/1',[]],['fun','count','count_console:staged_join/1',[]],['fun','count','count_gcounter:equal/2',[]],['fun','count','count_gcounter:merge/2',[]],['fun','count','count_gcounter:new/0',[]],['fun','count','count_gcounter:update/3',[]],['fun','count','count_gcounter:value/1',[]],['fun','count','count_get_fsm:await_n/2',[]],['fun','count','count_get_fsm:await_r/2','Gather some responses, and merge them.'],['fun','count','count_get_fsm:code_change/4',[]],['fun','count','count_get_fsm:execute/2','Execute the read request and then go into waiting '],['fun','count','count_get_fsm:handle_event/3',[]],['fun','count','count_get_fsm:handle_sync_event/4',[]],['fun','count','count_get_fsm:init/1','Initialize the state data.'],['fun','count','count_get_fsm:prepare/2','Prepare the read.'],['fun','count','count_get_fsm:read_repair/2',[]],['fun','count','count_get_fsm:start_link/4',[]],['fun','count','count_get_fsm:terminate/3',[]],['fun','count','count_get_fsm_sup:init/1','supervisor callback.'],['fun','count','count_get_fsm_sup:start_get_fsm/2',[]],['fun','count','count_get_fsm_sup:start_link/0','API for starting the supervisor.'],['fun','count','count_incr_fsm:code_change/4',[]],['fun','count','count_incr_fsm:execute/2','Execute the write request and then go into waiting'],['fun','count','count_incr_fsm:handle_event/3',[]],['fun','count','count_incr_fsm:handle_info/3',[]],['fun','count','count_incr_fsm:handle_sync_event/4',[]],['fun','count','count_incr_fsm:init/1','Initialize the state data.'],['fun','count','count_incr_fsm:prepare/2','Prepare the update by calculating the preference l'],['fun','count','count_incr_fsm:start_link/5',[]],['fun','count','count_incr_fsm:terminate/3',[]],['fun','count','count_incr_fsm:waiting_remotes/2','Wait for at least 1 successfull merge req to respo'],['fun','count','count_incr_fsm_sup:init/1','supervisor callback.'],['fun','count','count_incr_fsm_sup:start_incr_fsm/2',[]],['fun','count','count_incr_fsm_sup:start_link/0','API for starting the supervisor.'],['fun','count','count_node_event_handler:code_change/3',[]],['fun','count','count_node_event_handler:handle_call/2',[]],['fun','count','count_node_event_handler:handle_event/2',[]],['fun','count','count_node_event_handler:handle_info/2',[]],['fun','count','count_node_event_handler:init/1',[]],['fun','count','count_node_event_handler:terminate/2',[]],['fun','count','count_pncounter:equal/2',[]],['fun','count','count_pncounter:merge/2',[]],['fun','count','count_pncounter:new/0',[]],['fun','count','count_pncounter:update/3',[]],['fun','count','count_pncounter:value/1',[]],['fun','count','count_ring_event_handler:code_change/3',[]],['fun','count','count_ring_event_handler:handle_call/2',[]],['fun','count','count_ring_event_handler:handle_event/2',[]],['fun','count','count_ring_event_handler:handle_info/2',[]],['fun','count','count_ring_event_handler:init/1',[]],['fun','count','count_ring_event_handler:terminate/2',[]],['fun','count','count_sup:init/1',[]],['fun','count','count_sup:start_link/0',[]],['fun','count','count_vnode:delete/1',[]],['fun','count','count_vnode:encode_handoff_item/2',[]],['fun','count','count_vnode:get/1','Retrieves the state PN-Counter for the given key.'],['fun','count','count_vnode:handle_command/3',[]],['fun','count','count_vnode:handle_coverage/4',[]],['fun','count','count_vnode:handle_exit/3',[]],['fun','count','count_vnode:handle_handoff_command/3',[]],['fun','count','count_vnode:handle_handoff_data/2',[]],['fun','count','count_vnode:handoff_cancelled/1',[]],['fun','count','count_vnode:handoff_finished/2',[]],['fun','count','count_vnode:handoff_starting/2',[]],['fun','count','count_vnode:increment/1','Increments the counter for key by amount.'],['fun','count','count_vnode:init/1',[]],['fun','count','count_vnode:is_empty/1',[]],['fun','count','count_vnode:merge/1','Downstream application of increment.'],['fun','count','count_vnode:repair/1','Sends a read-repair of a value.'],['fun','count','count_vnode:start_vnode/1',[]],['fun','count','count_vnode:terminate/2',[]],['fun','count','count_vnode_worker:handle_work/3',[]],['fun','count','count_vnode_worker:init_worker/3',[]]];