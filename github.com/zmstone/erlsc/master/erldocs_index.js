var index = [['app','erlsc','erlsc','[application]'],['mod','erlsc','erlsc',[]],['mod','erlsc','erlsc_avro',[]],['mod','erlsc','erlsc_cache',[]],['mod','erlsc','erlsc_codec',[]],['mod','erlsc','erlsc_specs',[]],['mod','erlsc','erlsc_sup',[]],['mod','erlsc','erlsc_types',[]],['fun','erlsc','erlsc:compile/2','Compile Erlang type specs to avro schema and retur'],['fun','erlsc','erlsc:load/2','For the same purpose as compile/1 only the types a'],['fun','erlsc','erlsc:timestamp/1','erlsc:timestamp/1 transform callback.'],['fun','erlsc','erlsc_avro:avro_customize/1','Convert into avro specific layout.'],['fun','erlsc','erlsc_avro:encode/5','Encode Erlang term into either JSON objct or avro '],['fun','erlsc','erlsc_avro:pp_schema/2','Pretty print avro schema.'],['fun','erlsc','erlsc_cache:add/2',[]],['fun','erlsc','erlsc_cache:find/2',[]],['fun','erlsc','erlsc_cache:from_list/1',[]],['fun','erlsc','erlsc_cache:init/0',[]],['fun','erlsc','erlsc_cache:to_list/1',[]],['fun','erlsc','erlsc_codec:compile/1','Compile type specs according to input specs.'],['fun','erlsc','erlsc_codec:load/1','Load compiled types from file.'],['fun','erlsc','erlsc_specs:consult/1',[]],['fun','erlsc','erlsc_specs:get_avsc_specs/1',[]],['fun','erlsc','erlsc_specs:get_erlsc_file/1',[]],['fun','erlsc','erlsc_specs:get_roots/1',[]],['fun','erlsc','erlsc_sup:init/1',[]],['fun','erlsc','erlsc_sup:start_link/0',[]],['fun','erlsc','erlsc_types:compile/1','Compile a module, all type definitions in a module'],['fun','erlsc','erlsc_types:consult_file/1',[]],['fun','erlsc','erlsc_types:is_instance/1','Shallow test to check if the given data is an inst'],['fun','erlsc','erlsc_types:is_null/1','Check if its a null instance.'],['fun','erlsc','erlsc_types:range/1','Get range type extra arguments.'],['fun','erlsc','erlsc_types:scan/1','Scan erlang source code to get type definition.'],['fun','erlsc','erlsc_types:write_to_file/1',[]]];