var index = [['app','swirl','swirl','[application]'],['mod','swirl','channel_sup','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','channel_worker','A managed PPSPP Channel that represents a remote P'],['mod','swirl','convert','Conversion Helper Functions.'],['mod','swirl','peer_sup','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','peer_worker','A managed PPSPP UDP-based Peer.'],['mod','swirl','ppspp_channel','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','ppspp_chunk','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','ppspp_datagram','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','ppspp_handshake','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','ppspp_have','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','ppspp_message','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','ppspp_options','Provides opaque wrapper around PPSPP options, incl'],['mod','swirl','swarm_sup','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','swarm_worker','A managed PPSPP Swarm server.'],['mod','swirl','swirl','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','swirl_app','Library for PPSPP over UDP, aka Swift protocol.'],['mod','swirl','swirl_sup','Library for PPSPP over UDP, aka Swift protocol.'],['fun','swirl','channel_sup:init/1',[]],['fun','swirl','channel_sup:start_child/1',[]],['fun','swirl','channel_sup:start_link/0',[]],['fun','swirl','channel_worker:code_change/3','Default gen_server API.'],['fun','swirl','channel_worker:handle_call/3','Default gen_server API.'],['fun','swirl','channel_worker:handle_cast/2','Default gen_server API.'],['fun','swirl','channel_worker:handle_info/2','Default gen_server API.'],['fun','swirl','channel_worker:init/1','As the channel id is not known at time of process '],['fun','swirl','channel_worker:start_link/1','Start the channel using provided peer info (typica'],['fun','swirl','channel_worker:stop/1','Stops the server, given a channel.'],['fun','swirl','channel_worker:terminate/2','Default gen_server API.'],['fun','swirl','convert:bin_to_hex/1',[]],['fun','swirl','convert:bin_to_string/1',[]],['fun','swirl','convert:hex_string_to_padded_binary/1',[]],['fun','swirl','convert:int_to_hex/1',[]],['fun','swirl','peer_sup:init/1',[]],['fun','swirl','peer_sup:start_child/1',[]],['fun','swirl','peer_sup:start_link/0',[]],['fun','swirl','peer_worker:code_change/1','Default gen_server API.'],['fun','swirl','peer_worker:handle_call/1','Default gen_server API.'],['fun','swirl','peer_worker:handle_cast/1','Default gen_server API.'],['fun','swirl','peer_worker:handle_info/1','Receives UDP datagrams from gen_udp server and spa'],['fun','swirl','peer_worker:init/1','Initialises the peer_worker and associated UDP por'],['fun','swirl','peer_worker:start_link/1','Start the peer with given port number and ppspp op'],['fun','swirl','peer_worker:stop/1','Stops the server, given a corresponding UDP port.'],['fun','swirl','peer_worker:terminate/1','Closes down the peer_worker.'],['fun','swirl','peer_worker:where_is/1','Looks up the pid for a given port.'],['fun','swirl','ppspp_channel:acquire/1','allow requesting channel_worker to register an unu'],['fun','swirl','ppspp_channel:get_channel_id/1',[]],['fun','swirl','ppspp_channel:get_swarm_id/1','Looks up the swarm options for a given channel.'],['fun','swirl','ppspp_channel:handle/1',[]],['fun','swirl','ppspp_channel:is_channel_zero/1','compare given channel for the handshake channel.'],['fun','swirl','ppspp_channel:pack/1',[]],['fun','swirl','ppspp_channel:release/1','allow requesting process to release an assigned ch'],['fun','swirl','ppspp_channel:unpack_channel/1',[]],['fun','swirl','ppspp_channel:unpack_with_rest/1','unpack a channel message.'],['fun','swirl','ppspp_channel:where_is/1','looks up pid of the owning swarm for a given chann'],['fun','swirl','ppspp_chunk:pack/1',[]],['fun','swirl','ppspp_chunk:unpack/1','unpack a chunk spec from a message, typically a ha'],['fun','swirl','ppspp_datagram:get_endpoint/1','get endpoint from datagram.'],['fun','swirl','ppspp_datagram:get_messages/1','get messages from datagram.'],['fun','swirl','ppspp_datagram:get_peer_channel/1',[]],['fun','swirl','ppspp_datagram:get_peer_uri/1','given an endpoint, returns the associated data e.g'],['fun','swirl','ppspp_datagram:get_swarm_options/1','Requested Swarm options should match Available swa'],['fun','swirl','ppspp_datagram:handle_datagram/1','Handle a fully unpacked datagram.'],['fun','swirl','ppspp_datagram:handle_packet/2','receives datagram from peer_worker, parses and del'],['fun','swirl','ppspp_datagram:pack/1',[]],['fun','swirl','ppspp_datagram:unpack/1','unpack a UDP packet into a PPSPP datagram using er'],['fun','swirl','ppspp_handshake:handle/1','handle a handshake.'],['fun','swirl','ppspp_handshake:pack/1',[]],['fun','swirl','ppspp_handshake:unpack/1','unpack a handshake message.'],['fun','swirl','ppspp_have:handle/1',[]],['fun','swirl','ppspp_have:pack/1',[]],['fun','swirl','ppspp_have:unpack/1','unpack a have message.'],['fun','swirl','ppspp_message:get_message_type/1',[]],['fun','swirl','ppspp_message:get_messages_from_datagram/1','get messages from datagram.'],['fun','swirl','ppspp_message:handle/1','takes an unwrapped list of messages and dispatches'],['fun','swirl','ppspp_message:pack/1',[]],['fun','swirl','ppspp_message:unpack/1','unpack a datagram segment into a PPSPP message usi'],['fun','swirl','ppspp_options:get_chunk_addressing_method/1','Returns chunking method for the swarm.'],['fun','swirl','ppspp_options:get_content_integrity_check_method/1','Returns CIPM for the provided swarm.'],['fun','swirl','ppspp_options:get_maximum_supported_version/1','Returns the highest accepted PPSP version for the '],['fun','swirl','ppspp_options:get_merkle_hash_tree_function/1','Returns the hash function for the provided swarm.'],['fun','swirl','ppspp_options:get_minimum_version/1','Returns the lowest accepted PPSP version for the s'],['fun','swirl','ppspp_options:get_swarm_id/1','Returns the embedded swarm_id.'],['fun','swirl','ppspp_options:pack/1','Pack an orddict of erlang terms into a binary PPSP'],['fun','swirl','ppspp_options:unpack/1','Unpack PPPSPP options as encoded in wire format in'],['fun','swirl','ppspp_options:use_default_options/0','Provides standard options from the PPSPP draft as '],['fun','swirl','ppspp_options:use_default_options/1','Provides standard options from the PPSPP draft as '],['fun','swirl','ppspp_options:use_minimum_options/0','Provides standard options from the PPSPP draft as '],['fun','swirl','swarm_sup:init/1',[]],['fun','swirl','swarm_sup:start_child/1',[]],['fun','swirl','swarm_sup:start_link/0',[]],['fun','swirl','swarm_worker:code_change/1','Default gen_server API.'],['fun','swirl','swarm_worker:get_swarm_options/1','Given a swarm id, either as string or binary, retu'],['fun','swirl','swarm_worker:handle_call/1','Default gen_server API.'],['fun','swirl','swarm_worker:handle_cast/1','Default gen_server API.'],['fun','swirl','swarm_worker:handle_info/1','Default gen_server API.'],['fun','swirl','swarm_worker:init/1','Starts a swarm_worker with given swarm id and PPSP'],['fun','swirl','swarm_worker:start_link/1','Start the server with a given set of PPSPP options'],['fun','swirl','swarm_worker:stop/1','Stops the server.'],['fun','swirl','swarm_worker:terminate/1','Closes down the swarm_worker.'],['fun','swirl','swarm_worker:where_is/1','Looks up the pid for a given swarm id.'],['fun','swirl','swirl:help/0','help for console users  Provides a summary of ava'],['fun','swirl','swirl:main/1',[]],['fun','swirl','swirl:quit/0','Stop the swirl application, all dependent swarms a'],['fun','swirl','swirl:start/0','Start the swirl application in a stand-alone fashi'],['fun','swirl','swirl:start_channel/1','start a PPSPP channel, using the supplied peer inf'],['fun','swirl','swirl:start_peer/0','start a PPSPP listener (peer) on a given port, or '],['fun','swirl','swirl:start_peer/1',[]],['fun','swirl','swirl:start_peer/1',[]],['fun','swirl','swirl:start_pool/1','start multiple PPSPP listeners (peers) quickly on '],['fun','swirl','swirl:start_swarm/1','start a PPSPP swarm, using the supplied hash and P'],['fun','swirl','swirl:stop/0','Stop the swirl application and all dependent swarm'],['fun','swirl','swirl:stop_channel/1','stop a PPSPP channel.'],['fun','swirl','swirl:stop_peer/0','stop a PPSPP peer on a given port, or the default '],['fun','swirl','swirl:stop_peer/1',[]],['fun','swirl','swirl:stop_pool/1','stop multiple PPSPP peers on a given range of port'],['fun','swirl','swirl:stop_swarm/1','stop a PPSPP swarm for a given root_hash or swarm_'],['fun','swirl','swirl_app:start/1',[]],['fun','swirl','swirl_app:stop/1',[]],['fun','swirl','swirl_app:version/0',[]],['fun','swirl','swirl_sup:init/1',[]],['fun','swirl','swirl_sup:start_link/0',[]]];