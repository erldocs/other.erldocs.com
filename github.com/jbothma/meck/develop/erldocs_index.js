var index = [['app','meck','meck','[application]'],['mod','meck','meck','Module mocking library for Erlang.'],['mod','meck','meck_cover','Module containing functions needed by meck to inte'],['fun','meck','meck:called/1','Returns whether Pid has called Mod:Func with Args.'],['fun','meck','meck:called/1','Returns whether Mod:Func has been called with Args'],['fun','meck','meck:delete/1','Deletes an expectation.'],['fun','meck','meck:exception/2','Throws an expected exception inside an expect fun.'],['fun','meck','meck:expect/1','Adds an expectation with the supplied arity and re'],['fun','meck','meck:expect/1','Add expectation for a function Func to the mocked '],['fun','meck','meck:history/1','Return the call history of the mocked module for t'],['fun','meck','meck:history/1','Return the call history of the mocked module for a'],['fun','meck','meck:loop/1','Adds an expectation which returns a value from Loo'],['fun','meck','meck:new/1','Creates new mocked module(s).'],['fun','meck','meck:new/1','Equivalent to new(Mod, []).'],['fun','meck','meck:num_calls/1','Returns the number of times process Pid has called'],['fun','meck','meck:num_calls/1','Returns the number of times Mod:Func has been call'],['fun','meck','meck:passthrough/1','Calls the original function (if existing) inside a'],['fun','meck','meck:reset/1','Erases the call history for a mocked module or a l'],['fun','meck','meck:sequence/1','Adds an expectation which returns a value from Seq'],['fun','meck','meck:unload/0','Unloads all mocked modules from memory.'],['fun','meck','meck:unload/1','Unload a mocked module or a list of mocked modules'],['fun','meck','meck:validate/1','Validate the state of the mock module(s).'],['fun','meck','meck_cover:compile_beam/2','Enabled cover on &lt;name&gt;_meck_original.'],['fun','meck','meck_cover:rename_module/2','Given a cover file File exported by cover:export o']];