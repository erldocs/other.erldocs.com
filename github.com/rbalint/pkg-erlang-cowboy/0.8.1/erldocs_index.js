var index = [['app','pkg-erlang-cowboy','pkg-erlang-cowboy','[application]'],['mod','pkg-erlang-cowboy','cowboy','Convenience API to start and stop HTTP/HTTPS liste'],['mod','pkg-erlang-cowboy','cowboy_app',[]],['mod','pkg-erlang-cowboy','cowboy_bstr','Binary string manipulation.'],['mod','pkg-erlang-cowboy','cowboy_client',[]],['mod','pkg-erlang-cowboy','cowboy_clock','Date and time related functions.'],['mod','pkg-erlang-cowboy','cowboy_handler','Handler middleware.'],['mod','pkg-erlang-cowboy','cowboy_http','Core HTTP parsing API.'],['mod','pkg-erlang-cowboy','cowboy_http_handler','Behaviour for short-lived HTTP handlers.'],['mod','pkg-erlang-cowboy','cowboy_loop_handler','Behaviour for long-lived HTTP handlers.'],['mod','pkg-erlang-cowboy','cowboy_middleware','Behaviour for middlewares.'],['mod','pkg-erlang-cowboy','cowboy_multipart','Multipart parser.'],['mod','pkg-erlang-cowboy','cowboy_protocol','HTTP protocol handler.'],['mod','pkg-erlang-cowboy','cowboy_req','HTTP request manipulation API.'],['mod','pkg-erlang-cowboy','cowboy_rest','Experimental REST protocol implementation.'],['mod','pkg-erlang-cowboy','cowboy_router','Routing middleware.'],['mod','pkg-erlang-cowboy','cowboy_static','Static resource handler.'],['mod','pkg-erlang-cowboy','cowboy_sub_protocol','Behaviour for sub protocols.'],['mod','pkg-erlang-cowboy','cowboy_sup',[]],['mod','pkg-erlang-cowboy','cowboy_websocket','Websocket protocol implementation.'],['mod','pkg-erlang-cowboy','cowboy_websocket_handler','Handler for HTTP WebSocket requests.'],['fun','pkg-erlang-cowboy','cowboy:set_env/1','Convenience function for setting an environment va'],['fun','pkg-erlang-cowboy','cowboy:start_http/1','Start an HTTP listener.'],['fun','pkg-erlang-cowboy','cowboy:start_https/1','Start an HTTPS listener.'],['fun','pkg-erlang-cowboy','cowboy:stop_listener/1','Stop a listener.'],['fun','pkg-erlang-cowboy','cowboy_app:start/2',[]],['fun','pkg-erlang-cowboy','cowboy_app:stop/1',[]],['fun','pkg-erlang-cowboy','cowboy_bstr:capitalize_token/1','Capitalize a token.'],['fun','pkg-erlang-cowboy','cowboy_bstr:char_to_lower/1','Convert [A-Z] characters to lowercase.'],['fun','pkg-erlang-cowboy','cowboy_bstr:char_to_upper/1','Convert [a-z] characters to uppercase.'],['fun','pkg-erlang-cowboy','cowboy_bstr:to_lower/1','Convert a binary string to lowercase.'],['fun','pkg-erlang-cowboy','cowboy_bstr:to_upper/1','Convert a binary string to uppercase.'],['fun','pkg-erlang-cowboy','cowboy_client:connect/4',[]],['fun','pkg-erlang-cowboy','cowboy_client:init/1',[]],['fun','pkg-erlang-cowboy','cowboy_client:raw_request/2',[]],['fun','pkg-erlang-cowboy','cowboy_client:request/3',[]],['fun','pkg-erlang-cowboy','cowboy_client:request/4',[]],['fun','pkg-erlang-cowboy','cowboy_client:request/5',[]],['fun','pkg-erlang-cowboy','cowboy_client:response/1',[]],['fun','pkg-erlang-cowboy','cowboy_client:response_body/1',[]],['fun','pkg-erlang-cowboy','cowboy_client:skip_body/1',[]],['fun','pkg-erlang-cowboy','cowboy_client:state/1',[]],['fun','pkg-erlang-cowboy','cowboy_client:stream_body/1',[]],['fun','pkg-erlang-cowboy','cowboy_client:stream_header/1',[]],['fun','pkg-erlang-cowboy','cowboy_client:stream_headers/1',[]],['fun','pkg-erlang-cowboy','cowboy_client:stream_status/1',[]],['fun','pkg-erlang-cowboy','cowboy_client:transport/1',[]],['fun','pkg-erlang-cowboy','cowboy_clock:rfc1123/0','Return the current date and time formatted accordi'],['fun','pkg-erlang-cowboy','cowboy_clock:rfc1123/1','Return the given date and time formatted according'],['fun','pkg-erlang-cowboy','cowboy_clock:rfc2109/1','Return the given date and time formatted according'],['fun','pkg-erlang-cowboy','cowboy_http:asctime_date/1','Parse an asctime date.'],['fun','pkg-erlang-cowboy','cowboy_http:authorization/1','Parse authorization value according rfc 2617.'],['fun','pkg-erlang-cowboy','cowboy_http:ce_identity/1','Decode an identity content.'],['fun','pkg-erlang-cowboy','cowboy_http:conneg/1','Parse a conneg header (Accept-Charset, Accept-Enco'],['fun','pkg-erlang-cowboy','cowboy_http:content_type/1','Parse a content type.'],['fun','pkg-erlang-cowboy','cowboy_http:cookie_list/1','Parse a list of cookies.'],['fun','pkg-erlang-cowboy','cowboy_http:cookie_to_iodata/1','Convert a cookie name, value and options to its io'],['fun','pkg-erlang-cowboy','cowboy_http:digits/1','Parse a list of digits as a non negative integer.'],['fun','pkg-erlang-cowboy','cowboy_http:entity_tag_match/1','Parse either a list of entity tags or a "*".'],['fun','pkg-erlang-cowboy','cowboy_http:expectation/1','Parse an expectation.'],['fun','pkg-erlang-cowboy','cowboy_http:http_date/1','Parse an HTTP date (RFC1123, RFC850 or asctime dat'],['fun','pkg-erlang-cowboy','cowboy_http:language_range/1','Parse a language range, followed by an optional qu'],['fun','pkg-erlang-cowboy','cowboy_http:list/1','Parse a list of the given type.'],['fun','pkg-erlang-cowboy','cowboy_http:media_range/1','Parse a media range.'],['fun','pkg-erlang-cowboy','cowboy_http:nonempty_list/1','Parse a non-empty list of the given type.'],['fun','pkg-erlang-cowboy','cowboy_http:params/1','Parse a list of parameters (a=b;c=d).'],['fun','pkg-erlang-cowboy','cowboy_http:quoted_string/1','Parse a quoted string.'],['fun','pkg-erlang-cowboy','cowboy_http:rfc1123_date/1','Parse an RFC1123 date.'],['fun','pkg-erlang-cowboy','cowboy_http:rfc850_date/1','Parse an RFC850 date.'],['fun','pkg-erlang-cowboy','cowboy_http:te_chunked/2','Decode a stream of chunks.'],['fun','pkg-erlang-cowboy','cowboy_http:te_identity/2','Decode an identity stream.'],['fun','pkg-erlang-cowboy','cowboy_http:token/1','Parse a token.'],['fun','pkg-erlang-cowboy','cowboy_http:token_ci/1','Parse a case-insensitive token.'],['fun','pkg-erlang-cowboy','cowboy_http:urldecode/1','Decode a URL encoded binary.'],['fun','pkg-erlang-cowboy','cowboy_http:urldecode/1','Decode a URL encoded binary.'],['fun','pkg-erlang-cowboy','cowboy_http:urlencode/1','URL encode a string binary.'],['fun','pkg-erlang-cowboy','cowboy_http:urlencode/1','URL encode a string binary.'],['fun','pkg-erlang-cowboy','cowboy_http:version_to_binary/1','Convert an HTTP version tuple to its binary form.'],['fun','pkg-erlang-cowboy','cowboy_http:whitespace/1','Skip whitespace.'],['fun','pkg-erlang-cowboy','cowboy_http:x_www_form_urlencoded/1',[]],['fun','pkg-erlang-cowboy','cowboy_multipart:content_disposition/1','Parse a content disposition.'],['fun','pkg-erlang-cowboy','cowboy_multipart:parser/1','Return a multipart parser for the given boundary.'],['fun','pkg-erlang-cowboy','cowboy_protocol:start_link/1','Start an HTTP protocol process.'],['fun','pkg-erlang-cowboy','cowboy_req:binding/1','Return the binding value for the given key obtaine'],['fun','pkg-erlang-cowboy','cowboy_req:binding/1','Equivalent to binding(Name, Req, undefined).'],['fun','pkg-erlang-cowboy','cowboy_req:bindings/1','Return the full list of binding values.'],['fun','pkg-erlang-cowboy','cowboy_req:body/1','Return the full body sent with the request.'],['fun','pkg-erlang-cowboy','cowboy_req:body_length/1','Return the request message body length, if known.'],['fun','pkg-erlang-cowboy','cowboy_req:body_qs/1','Return the full body sent with the request, parsed'],['fun','pkg-erlang-cowboy','cowboy_req:chunk/1','Send a chunk of data.'],['fun','pkg-erlang-cowboy','cowboy_req:chunked_reply/1','Initiate the sending of a chunked reply to the cli'],['fun','pkg-erlang-cowboy','cowboy_req:chunked_reply/1','Equivalent to chunked_reply(Status, [], Req).'],['fun','pkg-erlang-cowboy','cowboy_req:compact/1','Compact the request data by removing all non-syste'],['fun','pkg-erlang-cowboy','cowboy_req:cookie/1','Return the cookie value for the given key, or a de'],['fun','pkg-erlang-cowboy','cowboy_req:cookie/1','Equivalent to cookie(Name, Req, undefined).'],['fun','pkg-erlang-cowboy','cowboy_req:cookies/1','Return the full list of cookie values.'],['fun','pkg-erlang-cowboy','cowboy_req:delete_resp_header/1',[]],['fun','pkg-erlang-cowboy','cowboy_req:fragment/1','Return the raw fragment directly taken from the re'],['fun','pkg-erlang-cowboy','cowboy_req:has_body/1','Return whether the request message has a body.'],['fun','pkg-erlang-cowboy','cowboy_req:has_resp_body/1','Return whether a body has been set for the respons'],['fun','pkg-erlang-cowboy','cowboy_req:has_resp_header/1','Return whether the given header has been set for t'],['fun','pkg-erlang-cowboy','cowboy_req:header/1','Return the header value for the given key, or a de'],['fun','pkg-erlang-cowboy','cowboy_req:header/1','Equivalent to header(Name, Req, undefined).'],['fun','pkg-erlang-cowboy','cowboy_req:headers/1','Return the full list of headers.'],['fun','pkg-erlang-cowboy','cowboy_req:host/1','Return the host binary string.'],['fun','pkg-erlang-cowboy','cowboy_req:host_info/1','Return the extra host information obtained from pa'],['fun','pkg-erlang-cowboy','cowboy_req:host_url/1','Return the request URL as a binary without the pat'],['fun','pkg-erlang-cowboy','cowboy_req:init_stream/1','Initialize body streaming and set custom decoding '],['fun','pkg-erlang-cowboy','cowboy_req:meta/1','Return metadata information about the request.'],['fun','pkg-erlang-cowboy','cowboy_req:meta/1','Equivalent to meta(Name, Req, undefined).'],['fun','pkg-erlang-cowboy','cowboy_req:method/1','Return the HTTP method of the request.'],['fun','pkg-erlang-cowboy','cowboy_req:multipart_data/1','Return data from the multipart parser.'],['fun','pkg-erlang-cowboy','cowboy_req:multipart_skip/1','Skip a part returned by the multipart parser.'],['fun','pkg-erlang-cowboy','cowboy_req:parse_header/1','Semantically parse headers.'],['fun','pkg-erlang-cowboy','cowboy_req:parse_header/1','Semantically parse headers.'],['fun','pkg-erlang-cowboy','cowboy_req:path/1','Return the path binary string.'],['fun','pkg-erlang-cowboy','cowboy_req:path_info/1','Return the extra path information obtained from pa'],['fun','pkg-erlang-cowboy','cowboy_req:peer/1','Return the peer address and port number of the rem'],['fun','pkg-erlang-cowboy','cowboy_req:peer_addr/1','Returns the peer address calculated from headers.'],['fun','pkg-erlang-cowboy','cowboy_req:port/1','Return the port used for this request.'],['fun','pkg-erlang-cowboy','cowboy_req:qs/1','Return the raw query string directly taken from th'],['fun','pkg-erlang-cowboy','cowboy_req:qs_val/1','Return the query string value for the given key, o'],['fun','pkg-erlang-cowboy','cowboy_req:qs_val/1','Equivalent to qs_val(Name, Req, undefined).'],['fun','pkg-erlang-cowboy','cowboy_req:qs_vals/1','Return the full list of query string values.'],['fun','pkg-erlang-cowboy','cowboy_req:reply/1','Send a reply to the client.'],['fun','pkg-erlang-cowboy','cowboy_req:reply/1','Equivalent to reply(Status, Headers, [], Req).'],['fun','pkg-erlang-cowboy','cowboy_req:reply/1','Equivalent to reply(Status, [], [], Req).'],['fun','pkg-erlang-cowboy','cowboy_req:set_meta/1','Set metadata information.'],['fun','pkg-erlang-cowboy','cowboy_req:set_resp_body/1','Add a body to the response.'],['fun','pkg-erlang-cowboy','cowboy_req:set_resp_body_fun/1','Add a body function to the response.'],['fun','pkg-erlang-cowboy','cowboy_req:set_resp_body_fun/1','Add a body stream function to the response.'],['fun','pkg-erlang-cowboy','cowboy_req:set_resp_cookie/1','Add a cookie header to the response.'],['fun','pkg-erlang-cowboy','cowboy_req:set_resp_header/1','Add a header to the response.'],['fun','pkg-erlang-cowboy','cowboy_req:skip_body/1',[]],['fun','pkg-erlang-cowboy','cowboy_req:stream_body/1','Stream the requests body.'],['fun','pkg-erlang-cowboy','cowboy_req:to_list/1','Convert the Req object to a list of key/values.'],['fun','pkg-erlang-cowboy','cowboy_req:url/1','Return the full request URL as a binary.'],['fun','pkg-erlang-cowboy','cowboy_req:version/1','Return the HTTP version used for the request.'],['fun','pkg-erlang-cowboy','cowboy_rest:upgrade/3','Upgrade a HTTP request to the REST protocol.'],['fun','pkg-erlang-cowboy','cowboy_router:compile/1','Compile a list of routes into the dispatch format '],['fun','pkg-erlang-cowboy','cowboy_sup:init/1',[]],['fun','pkg-erlang-cowboy','cowboy_sup:start_link/0',[]],['fun','pkg-erlang-cowboy','cowboy_websocket:upgrade/3','Upgrade an HTTP request to the Websocket protocol.']];