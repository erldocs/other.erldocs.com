var index = [['app','util','util','[application]'],['mod','util','conf_util','Configuration utils.'],['mod','util','decompiler','Module and function decompiler.'],['mod','util','file_log_reader','Periodically read an append-only log file and pars'],['mod','util','gen_leader','Leader election behavior.'],['mod','util','io_lib_pretty_limited',[]],['mod','util','pcap','PCAP file reader/writer.'],['mod','util','plists','plists is a drop-in replacement for module lists,'],['mod','util','pmap','Parallel map and multicall.'],['mod','util','restrict_remsh_mod','Sample restricted remote shell module disabling q/'],['mod','util','smerl',' Smerl: Simple Metaprogramming for Erlang.'],['mod','util','smtp','SMTP mail client.'],['mod','util','sntp','Implements SNTP query logic.'],['mod','util','ssh_sign',[]],['mod','util','stringx','Implements miscelaneous string functions.'],['mod','util','sup_bridge',[]],['mod','util','trunc_io','Module to print out terms for logging.'],['mod','util','user_default','This is an extension of the shell commands       '],['mod','util','xref_test',[]],['fun','util','conf_util:get_env/1','Get application configuration.'],['fun','util','conf_util:subst_env_path/1','Perform replacement of environment variable values'],['fun','util','conf_util:subst_env_path/2','Perform replacement of environment variable values'],['fun','util','decompiler:fun_src/1','Decompile a function to its source text.'],['fun','util','decompiler:fun_src/1','Decompile a function to its source text.'],['fun','util','decompiler:run/1','Decompile a beam file and optionally save it to di'],['fun','util','decompiler:run/1','Decompile a beam file.'],['fun','util','file_log_reader:close/1','Close file processor (use this method when not usi'],['fun','util','file_log_reader:init/1','When using file processor without gen_server, use '],['fun','util','file_log_reader:position/1','Report last processed file position/size.'],['fun','util','file_log_reader:pstate/1','Return current parser state ({pstate, any()} initi'],['fun','util','file_log_reader:run/1','Process file from given position Pos to EndPos (or'],['fun','util','file_log_reader:start/1',[]],['fun','util','file_log_reader:start/1','Start the server outside of supervision tree.'],['fun','util','file_log_reader:start_link/1','Process File by calling Consumer callback on every'],['fun','util','file_log_reader:start_link/1','To be called by the supervisor in order to start t'],['fun','util','file_log_reader:stop/1','Stop the server.'],['fun','util','file_log_reader:update_pstate/1','Update parser state.'],['fun','util','gen_leader:alive/1','Returns list of alive nodes.'],['fun','util','gen_leader:behaviour_info/1',[]],['fun','util','gen_leader:broadcast/3',[]],['fun','util','gen_leader:call/1','Equivalent to gen_server:call/3, but with a slight'],['fun','util','gen_leader:call/1','Equivalent to gen_server:call/2, but with a slight'],['fun','util','gen_leader:candidates/1','Returns a list of known candidates.'],['fun','util','gen_leader:cast/1','Equivalent to gen_server:cast / 2.'],['fun','util','gen_leader:down/1','Returns list of down nodes.'],['fun','util','gen_leader:leader_call/1','Makes a call (similar to gen_server:call/3) to the'],['fun','util','gen_leader:leader_call/1','Makes a call (similar to gen_server:call/2) to the'],['fun','util','gen_leader:leader_cast/1','Similar to gen_server:cast/2 but will be forwarded'],['fun','util','gen_leader:leader_node/1','Returns the current leader node.'],['fun','util','gen_leader:reply/1','Equivalent to gen_server:reply / 2.'],['fun','util','gen_leader:start/1','Starts a gen_leader process without linking to the'],['fun','util','gen_leader:start_link/1','Starts a gen_leader process.'],['fun','util','gen_leader:workers/1','Returns a list of known workers.'],['fun','util','io_lib_pretty_limited:print/2',[]],['fun','util','pcap:replay/1',[]],['fun','util','pcap:replay/2',[]],['fun','util','pcap:replay/5',[]],['fun','util','pcap:replay_range/3',[]],['fun','util','pcap:replay_range/4',[]],['fun','util','pcap:write/2',[]],['fun','util','plists:all/2','Same semantics as in module lists.'],['fun','util','plists:all/3','Same semantics as in module lists.'],['fun','util','plists:any/2','Same semantics as in module lists.'],['fun','util','plists:any/3','Same semantics as in module lists.'],['fun','util','plists:filter/2','Same semantics as in module lists.'],['fun','util','plists:filter/3','Same semantics as in module lists.'],['fun','util','plists:fold/3','Like below, but assumes 1 as the Malt.'],['fun','util','plists:fold/4','Like below, but uses the Fun as the Fuse by defaul'],['fun','util','plists:fold/5','fold is more complex when made parallel.'],['fun','util','plists:foreach/2','Similiar to foreach in module lists except it ma'],['fun','util','plists:foreach/3','Similiar to foreach in module lists except it ma'],['fun','util','plists:map/2','Same semantics as in module lists.'],['fun','util','plists:map/3','Same semantics as in module lists.'],['fun','util','plists:mapreduce/2','Like below, assumes default MapMalt of 1.'],['fun','util','plists:mapreduce/3',[]],['fun','util','plists:mapreduce/5','This is a very basic mapreduce.'],['fun','util','plists:partition/2','Same semantics as in module lists.'],['fun','util','plists:partition/3','Same semantics as in module lists.'],['fun','util','plists:runmany/3','Like below, but assumes a Malt of 1, meaning each'],['fun','util','plists:runmany/4','All of the other functions are implemented with ru'],['fun','util','plists:sort/1','Same semantics as in module lists.'],['fun','util','plists:sort/2','Same semantics as in module lists.'],['fun','util','plists:sort/3','This version lets you specify your own malt for so'],['fun','util','plists:usort/1','Same semantics as in module lists.'],['fun','util','plists:usort/2','Same semantics as in module lists.'],['fun','util','plists:usort/3','This version lets you specify your own malt for us'],['fun','util','pmap:multicall/2','Send messages to pids and wait for replies.'],['fun','util','pmap:pmap/2','Evaluate the MultiArgs list by calling F on each a'],['fun','util','pmap:pmap/3','Evaluate the MultiArgs list by calling F on each a'],['fun','util','pmap:reply/2','Send a reply back to sender.'],['fun','util','restrict_remsh_mod:remote_node_stop/1','Replaces init:stop/1 with remote:stop/1 to avoid a'],['fun','util','smerl:add_func/1','Add a new function to the meta_mod and return the '],['fun','util','smerl:add_func/1','Add a new function to the meta_mod and return the '],['fun','util','smerl:compile/1','Compile the module represented by the meta_mod and'],['fun','util','smerl:compile/1','Compile the module represented by the meta_mod and'],['fun','util','smerl:curry/1','Curry the function from the module or meta_mod   '],['fun','util','smerl:curry/1','Curry the function from the module with the given '],['fun','util','smerl:curry/1','Get the curried form for the function and paramete'],['fun','util','smerl:curry_add/1','Curry the function in the module, rename the curri'],['fun','util','smerl:curry_add/1','Curry the function form from the meta_mod, then ad'],['fun','util','smerl:curry_add/1','Add the curried form of the function    in the me'],['fun','util','smerl:curry_add/1','Add the curried form of the function in the meta_m'],['fun','util','smerl:curry_replace/1','Replace the function in the meta_mod with    its '],['fun','util','smerl:curry_replace/1','Replace the function in the meta_mod with    its '],['fun','util','smerl:embed_all/1','Apply the embed_params function with the list of {'],['fun','util','smerl:embed_params/1','Apply embed_params/2 to the function from the meta'],['fun','util','smerl:embed_params/1','Apply embed_params/2 to a function from the meta_m'],['fun','util','smerl:embed_params/1','This function takes a function form and list of na'],['fun','util','smerl:extend/1','Similar to extend/2, with the addition of the Ari'],['fun','util','smerl:extend/1','extend/2  Add all the parent modules functions t'],['fun','util','smerl:extend/4',[]],['fun','util','smerl:for_file/1','Create a meta_mod for a module from its source fil'],['fun','util','smerl:for_file/1','Equivalent to for_file(SrcFilePath, []).'],['fun','util','smerl:for_file/2','Equivalent to for_file(SrcFilePath, IncludePaths, '],['fun','util','smerl:for_module/1','Create a meta_mod tuple for an existing module.'],['fun','util','smerl:for_module/1','Equivalent to for_module(ModuleName, []).'],['fun','util','smerl:for_module/2','Equivalent to for_module(ModuleName, IncludePaths,'],['fun','util','smerl:get_attribute/1','Get the value a the modules attribute.'],['fun','util','smerl:get_export_all/1','Get the export_all value for the module.'],['fun','util','smerl:get_exports/1','Return the list of exports in the meta_mod.'],['fun','util','smerl:get_forms/1','Return the list of function forms in the meta_mod.'],['fun','util','smerl:get_func/1','Get the form for the function with the specified a'],['fun','util','smerl:get_module/1','Return the module name for the meta_mod.'],['fun','util','smerl:has_func/1','Check whether the meta_mod has a function with the'],['fun','util','smerl:new/1','Create a new meta_mod for a module with the given '],['fun','util','smerl:remove_export/1','Remove the export from the list of exports in the '],['fun','util','smerl:remove_func/1','Try to remove the function from the meta_mod.'],['fun','util','smerl:rename/1','Change the name of the function represented by the'],['fun','util','smerl:replace_func/1','  Replace an existing function with the new one.'],['fun','util','smerl:set_export_all/1','Set the export_all value for the module.'],['fun','util','smerl:set_exports/1','Set the meta_mods export list to the new list.'],['fun','util','smerl:set_forms/2',[]],['fun','util','smerl:set_module/1','Set the meta_mods module name.'],['fun','util','smerl:to_src/1','Write the pretty printed source code for the modul'],['fun','util','smerl:to_src/1','Return the pretty-printed source code for the modu'],['fun','util','smtp:domain/0','Get domain that this host belongs to.'],['fun','util','smtp:send/1','Send a message to a list of recipients by connecti'],['fun','util','smtp:send/1','Send a message to a list of To receipients using l'],['fun','util','sntp:avg_time/0','Query NTP time sources from "/etc/ntp.conf" and re'],['fun','util','sntp:avg_time/1','Query ServerAddress NTP time sources and return mi'],['fun','util','sntp:time/1','Query ServerAddress time source to find out server'],['fun','util','sntp:time_servers/0','Return a list of default NTP time servers for this'],['fun','util','sntp:time_servers/1','Return a list of default NTP time servers for this'],['fun','util','ssh_sign:public_identity_key/2',[]],['fun','util','ssh_sign:sign/1',[]],['fun','util','ssh_sign:verify/2',[]],['fun','util','stringx:titlecase/1','Convert words in a string to capitalize first lett'],['fun','util','stringx:wordcount/1','Count number of words in a string.'],['fun','util','stringx:wordwrap/1','Count number of words in a string.'],['fun','util','sup_bridge:behaviour_info/1',[]],['fun','util','sup_bridge:code_change/3',[]],['fun','util','sup_bridge:get_child_pid/1',[]],['fun','util','sup_bridge:handle_call/3',[]],['fun','util','sup_bridge:handle_cast/2',[]],['fun','util','sup_bridge:handle_info/2',[]],['fun','util','sup_bridge:init/1',[]],['fun','util','sup_bridge:start_link/2',[]],['fun','util','sup_bridge:start_link/3',[]],['fun','util','sup_bridge:terminate/2',[]],['fun','util','trunc_io:fprint/1','Returns an flattened list containing the ASCII rep'],['fun','util','trunc_io:print/1','Returns {List, Length}.'],['fun','util','trunc_io:safe/1','Same as print, but never crashes.'],['fun','util','user_default:dbgadd/1',[]],['fun','util','user_default:dbgadd/2',[]],['fun','util','user_default:dbgdel/1',[]],['fun','util','user_default:dbgdel/2',[]],['fun','util','user_default:dbgoff/0',[]],['fun','util','user_default:dbgon/1',[]],['fun','util','user_default:dbgon/2',[]],['fun','util','user_default:dbgtc/1',[]],['fun','util','user_default:help/0',[]],['fun','util','user_default:l/0','Load all changed modules.'],['fun','util','user_default:mm/0',[]],['fun','util','user_default:nl/0','Load all changed modules on all visible nodes.'],['fun','util','user_default:p/1','Term printer.'],['fun','util','user_default:saveh/1',[]],['fun','util','user_default:tc/2',[]],['fun','util','user_default:tc/4',[]],['fun','util','xref_test:run/0',[]],['fun','util','xref_test:run/1',[]],['fun','util','xref_test:run/2',[]],['fun','util','xref_test:run_shell/0',[]]];