var index = [['app','openacd','openacd','[application]'],['mod','openacd','agent_auth','Connection to the local authenication cache and in'],['mod','openacd','agent_auth_mnesia','Connection to the local authenication cache and in'],['mod','openacd','call_queue_config','The helper module to config the call_queues, skill'],['mod','openacd','call_queue_config_mnesia','The helper module to config the call_queues, skill'],['mod','openacd','cpx_agent_event',[]],['mod','openacd','cpx_agent_tcp_connection','The connection handler that communicates with a cl'],['mod','openacd','cpx_hooks','Manager for plugins to OpenACD.'],['mod','openacd','cpx_web_management','The web management module.'],['mod','openacd','cpxlog','A gen_event based logging framework.'],['mod','openacd','integration','Helper module to facilitate speaking to an integra'],['mod','openacd','openacd',[]],['mod','openacd','util','A utility module containing several handy function'],['fun','openacd','agent_auth:add_agent/1','adds a user to the local cache.'],['fun','openacd','agent_auth:add_agent/1','adds a user to the local cache bypassing the integ'],['fun','openacd','agent_auth:add_agent/1','adds a user to the local cache bypassing the integ'],['fun','openacd','agent_auth:auth/1','Take the plaintext username and password and attem'],['fun','openacd','agent_auth:destroy/1','Removes the passed user with login of Username fro'],['fun','openacd','agent_auth:destroy/2','Destory either by id or login.'],['fun','openacd','agent_auth:destroy_profile/1','Remove the profile string() Name.'],['fun','openacd','agent_auth:destroy_release/1','Remove the release option string() Label from the '],['fun','openacd','agent_auth:destroy_release/2','Remove the release option with the key (id, label)'],['fun','openacd','agent_auth:drop_endpoint/2',[]],['fun','openacd','agent_auth:drop_extended_prop/2',[]],['fun','openacd','agent_auth:encode_password/1',[]],['fun','openacd','agent_auth:get_agent/1','Gets #agent_auth{} associated with string() Login.'],['fun','openacd','agent_auth:get_agent/2','Get an agent whos Key is Value.'],['fun','openacd','agent_auth:get_agents/0','Gets All the agents.'],['fun','openacd','agent_auth:get_agents/1','Gets all the agents associated with string() Profi'],['fun','openacd','agent_auth:get_extended_prop/2','Get an extened property either from the database o'],['fun','openacd','agent_auth:get_profile/1','Gets the profile string() Name'],['fun','openacd','agent_auth:get_profiles/0','Return all agent profiles.'],['fun','openacd','agent_auth:get_releases/0','Get all #release_opt.'],['fun','openacd','agent_auth:new_profile/1','Create a new agent profile string() Name with [ato'],['fun','openacd','agent_auth:new_profile/1','Create a new agent profile.'],['fun','openacd','agent_auth:new_release/1','Add #release_opt{} Rec to the database.'],['fun','openacd','agent_auth:set_agent/1','Update the agent string() Oldlogin with a new pass'],['fun','openacd','agent_auth:set_agent/1','Update the agent string() Oldlogin with a new pass'],['fun','openacd','agent_auth:set_agent/1','Sets the agent string() Oldlogin with new data in '],['fun','openacd','agent_auth:set_agent/1','Update the agent string() Oldlogin without changin'],['fun','openacd','agent_auth:set_endpoint/2',[]],['fun','openacd','agent_auth:set_extended_prop/2',[]],['fun','openacd','agent_auth:set_profile/1','Update the profile string() Oldname to the given r'],['fun','openacd','agent_auth:set_profile/1',[]],['fun','openacd','agent_auth:start/0',[]],['fun','openacd','agent_auth:update_release/1','Update the release option string() Label to #relea'],['fun','openacd','agent_auth_mnesia:add_agent/1','adds a user to the local cache.'],['fun','openacd','agent_auth_mnesia:add_agent/1','adds a user to the local cache bypassing the integ'],['fun','openacd','agent_auth_mnesia:add_agent/1','adds a user to the local cache bypassing the integ'],['fun','openacd','agent_auth_mnesia:auth/1','Take the plaintext username and password and attem'],['fun','openacd','agent_auth_mnesia:build_tables/0','Starts mnesia and creates the tables.'],['fun','openacd','agent_auth_mnesia:cache/1','Caches the passed Username, Password, Skills, and '],['fun','openacd','agent_auth_mnesia:destroy/2','Destory either by id or login.'],['fun','openacd','agent_auth_mnesia:destroy_profile/1','Remove the profile string() Name.'],['fun','openacd','agent_auth_mnesia:destroy_release/1','Remove the release option string() Label from the '],['fun','openacd','agent_auth_mnesia:destroy_release/2','Remove the release option with the key (id, label)'],['fun','openacd','agent_auth_mnesia:drop_endpoint/2',[]],['fun','openacd','agent_auth_mnesia:drop_extended_prop/2',[]],['fun','openacd','agent_auth_mnesia:encode_password/1',[]],['fun','openacd','agent_auth_mnesia:get_agent/1','Gets #agent_auth{} associated with string() Login.'],['fun','openacd','agent_auth_mnesia:get_agent/2','Get an agent whos Key is Value.'],['fun','openacd','agent_auth_mnesia:get_agents/0','Gets All the agents.'],['fun','openacd','agent_auth_mnesia:get_agents/1','Gets all the agents associated with string() Profi'],['fun','openacd','agent_auth_mnesia:get_extended_prop/2','Get an extened property either from the database o'],['fun','openacd','agent_auth_mnesia:get_profile/1','Gets the proflie string() Name'],['fun','openacd','agent_auth_mnesia:get_profiles/0','Return all profiles as [{string() Name, [atom] Ski'],['fun','openacd','agent_auth_mnesia:get_releases/0','Get all #release_opt.'],['fun','openacd','agent_auth_mnesia:merge/1','Utility function to handle merging data after a ne'],['fun','openacd','agent_auth_mnesia:new_profile/1','Create a new agent profile string() Name with [ato'],['fun','openacd','agent_auth_mnesia:new_profile/1','Create a new agent profile.'],['fun','openacd','agent_auth_mnesia:new_release/1','Add #release_opt{} Rec to the database.'],['fun','openacd','agent_auth_mnesia:query_agent_auth/1',[]],['fun','openacd','agent_auth_mnesia:query_profiles/1',[]],['fun','openacd','agent_auth_mnesia:query_release/1',[]],['fun','openacd','agent_auth_mnesia:set_agent/1','Sets the agent string() Oldlogin with new data in '],['fun','openacd','agent_auth_mnesia:set_endpoint/2',[]],['fun','openacd','agent_auth_mnesia:set_extended_prop/2',[]],['fun','openacd','agent_auth_mnesia:set_profile/1','Update the profile string() Oldname to the given r'],['fun','openacd','agent_auth_mnesia:set_profile/1',[]],['fun','openacd','agent_auth_mnesia:start/0',[]],['fun','openacd','agent_auth_mnesia:update_release/1','Update the release option string() Label to #relea'],['fun','openacd','agent_auth_mnesia:upgrade_v1_table/0',[]],['fun','openacd','call_queue_config:build_tables/0','Attempts to set-up and create the required mnesia '],['fun','openacd','call_queue_config:destroy_client/1','Removed the client id Id from the client database.'],['fun','openacd','call_queue_config:destroy_client/2',[]],['fun','openacd','call_queue_config:destroy_queue/1','Attempt to remove the queue #call_queue{} or strin'],['fun','openacd','call_queue_config:destroy_queue_group/1','remove the queue_group named Groupname from the da'],['fun','openacd','call_queue_config:destroy_skill/1','Removes the skill named string() Skillname from th'],['fun','openacd','call_queue_config:get_client/1','Get the #client{} associated with the id Id using '],['fun','openacd','call_queue_config:get_client/2','Get the #client{} associated with the give Key Val'],['fun','openacd','call_queue_config:get_clients/0','Gets [#client{}] sorted by #client.label.'],['fun','openacd','call_queue_config:get_default_client/0','Gets the default client.'],['fun','openacd','call_queue_config:get_merged_queue/1','Get the configureation for the passed string() Que'],['fun','openacd','call_queue_config:get_queue/1','Get the configuration for the passed string() Queu'],['fun','openacd','call_queue_config:get_queue_group/1','get a #queue_group{} named Name'],['fun','openacd','call_queue_config:get_queue_groups/0','Gets all #queue_group{} in a list sorted by group.'],['fun','openacd','call_queue_config:get_queues/0','Get all the queue configurations ([#call_queue{}])'],['fun','openacd','call_queue_config:get_queues/1','Get all the queues that are members of the specifi'],['fun','openacd','call_queue_config:get_skill/1','get a single #skill_rec{}'],['fun','openacd','call_queue_config:get_skills/0','Return [#skill_rec{}] in the system sorted by grou'],['fun','openacd','call_queue_config:get_skills/1','Returns [#skill_rec{}] in the system which have a '],['fun','openacd','call_queue_config:new_client/1','Add a new client based on #client{} Rec.'],['fun','openacd','call_queue_config:new_client/1','Add a new client with string() Label, integer() Te'],['fun','openacd','call_queue_config:new_queue/1','Create a new queue from the given string() Name, p'],['fun','openacd','call_queue_config:new_queue/1','Create a new default queue configuraiton from #cal'],['fun','openacd','call_queue_config:new_queue_group/1','Add a new group with name, sort order and recipe.'],['fun','openacd','call_queue_config:new_queue_group/1','Add a new group to the configuation database.'],['fun','openacd','call_queue_config:new_skill/1','Add #skill_rec{} Rec to the configuration database'],['fun','openacd','call_queue_config:new_skill/1','Add a new skill to the configuration database.'],['fun','openacd','call_queue_config:rename_skill_group/1','Move every skill in Oldgroup to Newgroup.'],['fun','openacd','call_queue_config:set_client/1','Update the client string() Id to the #client{} Cli'],['fun','openacd','call_queue_config:set_client/1','Update the client string() Id to string() Newlabel'],['fun','openacd','call_queue_config:set_queue/1','Sets the queue name Queue to the passed #call_queu'],['fun','openacd','call_queue_config:set_queue/1',[]],['fun','openacd','call_queue_config:set_queue_group/1','Set the Name, Sort, and recipe of the #queue_group'],['fun','openacd','call_queue_config:set_queue_group/1','Set the #queue_group{} named Oldname to the passed'],['fun','openacd','call_queue_config:set_skill/1','updates the skill Old skill with the data in the N'],['fun','openacd','call_queue_config:set_skill/1',[]],['fun','openacd','call_queue_config:skill_exists/1','Check if the given string() Skillname exists.'],['fun','openacd','call_queue_config:start/0',[]],['fun','openacd','call_queue_config_mnesia:build_tables/0','Attempts to set-up and create the required mnesia '],['fun','openacd','call_queue_config_mnesia:destroy_client/1','Removed the client id Id from the client database.'],['fun','openacd','call_queue_config_mnesia:destroy_client/2',[]],['fun','openacd','call_queue_config_mnesia:destroy_queue/1','Attempt to remove the queue #call_queue{} or strin'],['fun','openacd','call_queue_config_mnesia:destroy_queue_group/1','remove the queue_group named Groupname from the da'],['fun','openacd','call_queue_config_mnesia:destroy_skill/1','Removes the skill named string() Skillname from th'],['fun','openacd','call_queue_config_mnesia:get_client/1','Get the #client{} associated with the id Id using '],['fun','openacd','call_queue_config_mnesia:get_client/2','Get the #client{} associated with the give Key Val'],['fun','openacd','call_queue_config_mnesia:get_clients/0','Gets [#client{}] sorted by #client.label.'],['fun','openacd','call_queue_config_mnesia:get_default_client/0','Gets the default client.'],['fun','openacd','call_queue_config_mnesia:get_merged_queue/1','Get the configureation for the passed string() Que'],['fun','openacd','call_queue_config_mnesia:get_queue/1','Get the configuration for the passed string() Queu'],['fun','openacd','call_queue_config_mnesia:get_queue_group/1','get a #queue_group{} named Name'],['fun','openacd','call_queue_config_mnesia:get_queue_groups/0','Gets all #queue_group{} in a list sorted by group.'],['fun','openacd','call_queue_config_mnesia:get_queues/0','Get all the queue configurations ([#call_queue{}])'],['fun','openacd','call_queue_config_mnesia:get_queues/1','Get all the queues that are members of the specifi'],['fun','openacd','call_queue_config_mnesia:get_skill/1','get a single #skill_rec{}'],['fun','openacd','call_queue_config_mnesia:get_skills/0','Return [#skill_rec{}] in the system sorted by grou'],['fun','openacd','call_queue_config_mnesia:get_skills/1','Returns [#skill_rec{}] in the system which have a '],['fun','openacd','call_queue_config_mnesia:merge/1','utiltiy function to help recover from a netsplit.'],['fun','openacd','call_queue_config_mnesia:new_client/1','Add a new client based on #client{} Rec.'],['fun','openacd','call_queue_config_mnesia:new_client/1','Add a new client with string() Label, integer() Te'],['fun','openacd','call_queue_config_mnesia:new_queue/1','Create a new queue from the given string() Name, p'],['fun','openacd','call_queue_config_mnesia:new_queue/1','Create a new default queue configuraiton from #cal'],['fun','openacd','call_queue_config_mnesia:new_queue_group/1','Add a new group with name, sort order and recipe.'],['fun','openacd','call_queue_config_mnesia:new_queue_group/1','Add a new group to the configuation database.'],['fun','openacd','call_queue_config_mnesia:new_skill/1','Add #skill_rec{} Rec to the configuration database'],['fun','openacd','call_queue_config_mnesia:new_skill/1','Add a new skill to the configuration database.'],['fun','openacd','call_queue_config_mnesia:rename_skill_group/1','Move every skill in Oldgroup to Newgroup.'],['fun','openacd','call_queue_config_mnesia:set_client/1','Update the client string() Id to the #client{} Cli'],['fun','openacd','call_queue_config_mnesia:set_client/1','Update the client string() Id to string() Newlabel'],['fun','openacd','call_queue_config_mnesia:set_queue/1','Sets the queue name Queue to the passed #call_queu'],['fun','openacd','call_queue_config_mnesia:set_queue/1',[]],['fun','openacd','call_queue_config_mnesia:set_queue_group/1','Set the Name, Sort, and recipe of the #queue_group'],['fun','openacd','call_queue_config_mnesia:set_queue_group/1','Set the #queue_group{} named Oldname to the passed'],['fun','openacd','call_queue_config_mnesia:set_skill/1','updates the skill Old skill with the data in the N'],['fun','openacd','call_queue_config_mnesia:set_skill/1',[]],['fun','openacd','call_queue_config_mnesia:skill_exists/1','Check if the given string() Skillname exists.'],['fun','openacd','call_queue_config_mnesia:start/0',[]],['fun','openacd','cpx_agent_event:agent_channel_init/1','Create a handler specifically for the given agent '],['fun','openacd','cpx_agent_event:agent_init/1','Create a handler specifically for the given agent.'],['fun','openacd','cpx_agent_event:change_agent/1','An agent has changed in some way.'],['fun','openacd','cpx_agent_event:change_agent_channel/1','Alert the appropriate handler that an agent channe'],['fun','openacd','cpx_agent_event:change_profile/1','An agent has changed profiles.'],['fun','openacd','cpx_agent_event:change_state/1','An agent has changed state (idle &lt;-&gt; release'],['fun','openacd','cpx_agent_event:start/0','starts the agent event server.'],['fun','openacd','cpx_agent_event:start_link/0','Starts teh agent event server linked.'],['fun','openacd','cpx_agent_event:stop/0','Stops the agent event server.'],['fun','openacd','cpx_agent_event:truncate/1','Purge all state information about an agent from mn'],['fun','openacd','cpx_agent_tcp_connection:check_version/1','?? Step one in logging in:  ensure the client vers'],['fun','openacd','cpx_agent_tcp_connection:get_nonce/1','?? get the public key and nonce to encrypt the pas'],['fun','openacd','cpx_agent_tcp_connection:login/3','?? Final step in logging in.'],['fun','openacd','cpx_agent_tcp_connection:negotiate/1','Notify the connection that it should set the socke'],['fun','openacd','cpx_agent_tcp_connection:start/1','start the conection unlinked.'],['fun','openacd','cpx_agent_tcp_connection:start_link/1','start the conection linked to calling process.'],['fun','openacd','cpx_hooks:async_trigger_hooks/1','Trigger hooks asynchronsouly.'],['fun','openacd','cpx_hooks:async_trigger_hooks/1','Trigger hooks asynchronously, thus ignoring the re'],['fun','openacd','cpx_hooks:drop_hook/1','Remove a hook from being triggered.'],['fun','openacd','cpx_hooks:drop_hooks/1',[]],['fun','openacd','cpx_hooks:get_hooks/1','Get all hooks to the trigger event Hook.'],['fun','openacd','cpx_hooks:set_hook/1','Add a new hook to the trigger event Hook.'],['fun','openacd','cpx_hooks:set_hook/1','Add a new hook to the trigger event Hook.'],['fun','openacd','cpx_hooks:start_link/0','Creates the hooks ets table.'],['fun','openacd','cpx_hooks:stop/0','Stop the hooks module, thus removing the ets table'],['fun','openacd','cpx_hooks:trigger_hooks/1','Begin calling the callbacks for trigger event Hook'],['fun','openacd','cpx_hooks:trigger_hooks/1','Begin calling the callbacks for trigger event Hook'],['fun','openacd','cpx_web_management:api/3',[]],['fun','openacd','cpx_web_management:decode_endpoints/1',[]],['fun','openacd','cpx_web_management:encode_agent/1',[]],['fun','openacd','cpx_web_management:encode_agents/1',[]],['fun','openacd','cpx_web_management:encode_queue/1',[]],['fun','openacd','cpx_web_management:encode_queues/1',[]],['fun','openacd','cpx_web_management:encode_skill/1',[]],['fun','openacd','cpx_web_management:encode_skills/1',[]],['fun','openacd','cpx_web_management:loop/1',[]],['fun','openacd','cpx_web_management:parse_posted_skills/1',[]],['fun','openacd','cpx_web_management:start/0','Start the web management server unlinked to the pa'],['fun','openacd','cpx_web_management:start/1',[]],['fun','openacd','cpx_web_management:start_link/0',[]],['fun','openacd','cpx_web_management:start_link/1',[]],['fun','openacd','cpx_web_management:stop/0','Stops the web management.'],['fun','openacd','cpxlog:alert/1',[]],['fun','openacd','cpxlog:critical/1',[]],['fun','openacd','cpxlog:debug/1',[]],['fun','openacd','cpxlog:debug_module/1',[]],['fun','openacd','cpxlog:debug_modules/1',[]],['fun','openacd','cpxlog:emergency/1',[]],['fun','openacd','cpxlog:error/1',[]],['fun','openacd','cpxlog:info/1',[]],['fun','openacd','cpxlog:log/1',[]],['fun','openacd','cpxlog:log/1',[]],['fun','openacd','cpxlog:nodebug_module/1',[]],['fun','openacd','cpxlog:nodebug_modules/1',[]],['fun','openacd','cpxlog:notice/1',[]],['fun','openacd','cpxlog:set_loglevel/1',[]],['fun','openacd','cpxlog:set_loglevel/1',[]],['fun','openacd','cpxlog:start/0',[]],['fun','openacd','cpxlog:start_link/0',[]],['fun','openacd','cpxlog:stop/0',[]],['fun','openacd','cpxlog:warning/1',[]],['fun','openacd','integration:agent_auth/1','Attempts to authenticate Agent with plaintext pass'],['fun','openacd','integration:agent_exists/1','Returns true if an agent with the loging Agent exi'],['fun','openacd','integration:client_exists/1','true or false based on the existance of a client w'],['fun','openacd','integration:client_exists/1','Same as client_exists(label, Label).'],['fun','openacd','integration:get_client/1','Retrieve a client whos unique Attribute (label or'],['fun','openacd','integration:get_profile/1','Retrieve a profile (agent group).'],['fun','openacd','integration:get_queue/1','Retrieve a queue by name.'],['fun','openacd','integration:get_queue_group/1','Retrieve a queue by name.'],['fun','openacd','integration:get_skill/1','Retrieve a skill.'],['fun','openacd','openacd:start/0',[]],['fun','openacd','util:bin_to_hexstr/1','Converts a bin to a lowercase hexidecimal string.'],['fun','openacd','util:build_table/1','build the given mnesia table Tablename with Option'],['fun','openacd','util:c/0','Not useful in a production enviroment, but for a d'],['fun','openacd','util:c/1','A generic "do this on the command line and print t'],['fun','openacd','util:decrypt_password/1',[]],['fun','openacd','util:dict_find_by_value/1','Find the key(s) in the dictory by its value.'],['fun','openacd','util:distribution/1',[]],['fun','openacd','util:find_first_arc/1',[]],['fun','openacd','util:floor/1',[]],['fun','openacd','util:get_certfile/0',[]],['fun','openacd','util:get_keyfile/0',[]],['fun','openacd','util:get_number/2','Generally only used in the dummy collection, the'],['fun','openacd','util:get_pubkey/0',[]],['fun','openacd','util:group_by/1',[]],['fun','openacd','util:group_by_with_key/1','groups a list into a list of lists where each subl'],['fun','openacd','util:hexstr_to_bin/1','Converts a hexidecimal string in any case to a bin'],['fun','openacd','util:http_datetime/0','Take erlang:now() and pipe it through http_datetim'],['fun','openacd','util:http_datetime/1','Take an erlang:now() format and turn it into somet'],['fun','openacd','util:list_contains_all/1','Check whether List contains all elements of Member'],['fun','openacd','util:list_index/1','Find the position of Needle (any()) in a list usin'],['fun','openacd','util:list_index/1','Find the position of Needle (any()) in a list.'],['fun','openacd','util:list_map_with_index/1','Apply the Fun(Index, Element) to each element of L'],['fun','openacd','util:merge_skill_lists/1','merge_skill_lists/2 with an optional whitelist of '],['fun','openacd','util:merge_skill_lists/1','Merges 2 skill lists using lists:umerge and then e'],['fun','openacd','util:now/0','For those times when {Macro, Sec, Micro} is too mu'],['fun','openacd','util:priv_dir/0',[]],['fun','openacd','util:priv_dir/1',[]],['fun','openacd','util:reload/1','Does a code reload for the given module.'],['fun','openacd','util:reload/1','For those times when you dont need a code reload '],['fun','openacd','util:reload_all/0','Reloads code for all modules in the OpenACD path u'],['fun','openacd','util:reload_all/1','Reloads code for all modules using either the hard'],['fun','openacd','util:run_dir/0',[]],['fun','openacd','util:string_chomp/1','Remove any trailing newlines or carraige returns f'],['fun','openacd','util:string_interpolate/1',[]],['fun','openacd','util:string_split/2','Split String by Separator.'],['fun','openacd','util:string_split/2','Split String string by Separator into a list of st'],['fun','openacd','util:subtract_skill_lists/1','Returns all skills in [{atom(), string()} | atom()'],['fun','openacd','util:timemark/0',[]],['fun','openacd','util:timemark/1',[]],['fun','openacd','util:timemark/1',[]],['fun','openacd','util:timemark_clear/0',[]],['fun','openacd','util:timemark_clear/1',[]]];