var index = [['app','lager_test','lager_test','[application]'],['mod','lager_test','crash',[]],['mod','lager_test','lager','The lager logging framework.'],['mod','lager_test','lager_console_backend','Console backend for lager.'],['mod','lager_test','lager_crash_backend',[]],['mod','lager_test','lager_crash_log','Lager crash log writer.'],['mod','lager_test','lager_file_backend','File backend for lager, with multiple file support'],['mod','lager_test','lager_format',[]],['mod','lager_test','lager_mochiglobal','Abuse module constant pools as a "read-only shared'],['mod','lager_test','lager_stdlib','Functions from Erlang OTP distribution that are re'],['mod','lager_test','lager_syslog_backend','Syslog backend for lager.'],['mod','lager_test','lager_test_backend',[]],['mod','lager_test','lager_transform','The parse transform used for lager messages.'],['mod','lager_test','lager_trunc_io','Module to print out terms for logging.'],['mod','lager_test','lager_util',[]],['mod','lager_test','log_producer_app',[]],['mod','lager_test','log_producer_starter',[]],['mod','lager_test','log_producer_sup',[]],['mod','lager_test','log_producer_wrk',[]],['mod','lager_test','special_process',[]],['mod','lager_test','sync_error_logger',[]],['mod','lager_test','syslog','erlang wrapper for syslog port.'],['mod','lager_test','syslog_app',[]],['mod','lager_test','syslog_sup',[]],['mod','lager_test','trunc_io_eqc',[]],['fun','lager_test','crash:code_change/3',[]],['fun','lager_test','crash:handle_call/3',[]],['fun','lager_test','crash:handle_cast/2',[]],['fun','lager_test','crash:handle_info/2',[]],['fun','lager_test','crash:init/1',[]],['fun','lager_test','crash:start/0',[]],['fun','lager_test','crash:terminate/2',[]],['fun','lager_test','lager:clear_all_traces/0',[]],['fun','lager_test','lager:dispatch_log/1',[]],['fun','lager_test','lager:get_loglevel/1','Get the loglevel for a particular backend.'],['fun','lager_test','lager:log/1','Manually log a message into lager without using th'],['fun','lager_test','lager:log/1','Manually log a message into lager without using th'],['fun','lager_test','lager:posix_error/1','Try to convert an atom to a posix error, but fall '],['fun','lager_test','lager:safe_format/3','Print the format string Fmt with Args safely with '],['fun','lager_test','lager:set_loglevel/2','Set the loglevel for a particular backend.'],['fun','lager_test','lager:set_loglevel/3','Set the loglevel for a particular backend that has'],['fun','lager_test','lager:start/0','Start the application.'],['fun','lager_test','lager:status/0',[]],['fun','lager_test','lager:stop_trace/1',[]],['fun','lager_test','lager:trace_console/1',[]],['fun','lager_test','lager:trace_console/2',[]],['fun','lager_test','lager:trace_file/2',[]],['fun','lager_test','lager:trace_file/3',[]],['fun','lager_test','lager_crash_backend:code_change/3',[]],['fun','lager_test','lager_crash_backend:handle_call/2',[]],['fun','lager_test','lager_crash_backend:handle_event/2',[]],['fun','lager_test','lager_crash_backend:handle_info/2',[]],['fun','lager_test','lager_crash_backend:init/1',[]],['fun','lager_test','lager_crash_backend:terminate/2',[]],['fun','lager_test','lager_format:format/3',[]],['fun','lager_test','lager_format:format/4',[]],['fun','lager_test','lager_mochiglobal:delete/1','Delete term stored at K, no-op if non-existent.'],['fun','lager_test','lager_mochiglobal:get/1','Get the term for K or return Default.'],['fun','lager_test','lager_mochiglobal:get/1','Equivalent to get(K, undefined).'],['fun','lager_test','lager_mochiglobal:put/1','Store term V at K, replaces an existing term if pr'],['fun','lager_test','lager_stdlib:is_my_error_report/1',[]],['fun','lager_test','lager_stdlib:is_my_info_report/1',[]],['fun','lager_test','lager_stdlib:maybe_utc/1',[]],['fun','lager_test','lager_stdlib:proc_lib_format/1',[]],['fun','lager_test','lager_stdlib:string_p/1',[]],['fun','lager_test','lager_stdlib:sup_get/1',[]],['fun','lager_test','lager_stdlib:write_time/2',[]],['fun','lager_test','lager_test_backend:code_change/3',[]],['fun','lager_test','lager_test_backend:handle_call/2',[]],['fun','lager_test','lager_test_backend:handle_event/2',[]],['fun','lager_test','lager_test_backend:handle_info/2',[]],['fun','lager_test','lager_test_backend:init/1',[]],['fun','lager_test','lager_test_backend:terminate/2',[]],['fun','lager_test','lager_trunc_io:format/3',[]],['fun','lager_test','lager_trunc_io:format/4',[]],['fun','lager_test','lager_trunc_io:fprint/1','Returns an flattened list containing the ASCII rep'],['fun','lager_test','lager_trunc_io:fprint/1','Returns an flattened list containing the ASCII rep'],['fun','lager_test','lager_trunc_io:print/1','Returns {List, Length}.'],['fun','lager_test','lager_trunc_io:print/1','Returns {List, Length}.'],['fun','lager_test','lager_trunc_io:safe/1','Same as print, but never crashes.'],['fun','lager_test','lager_util:calculate_next_rotation/1',[]],['fun','lager_test','lager_util:check_traces/4',[]],['fun','lager_test','lager_util:ensure_logfile/4',[]],['fun','lager_test','lager_util:format_time/0',[]],['fun','lager_test','lager_util:format_time/1',[]],['fun','lager_test','lager_util:level_to_num/1',[]],['fun','lager_test','lager_util:levels/0',[]],['fun','lager_test','lager_util:localtime_ms/0',[]],['fun','lager_test','lager_util:maybe_utc/1',[]],['fun','lager_test','lager_util:num_to_level/1',[]],['fun','lager_test','lager_util:open_logfile/2',[]],['fun','lager_test','lager_util:parse_rotation_date_spec/1',[]],['fun','lager_test','lager_util:rotate_logfile/2',[]],['fun','lager_test','lager_util:validate_trace/1',[]],['fun','lager_test','log_producer_app:start/1',[]],['fun','lager_test','log_producer_app:stop/1',[]],['fun','lager_test','log_producer_starter:start/0',[]],['fun','lager_test','log_producer_starter:start/1',[]],['fun','lager_test','log_producer_starter:stop/0',[]],['fun','lager_test','log_producer_starter:stop/1',[]],['fun','lager_test','log_producer_sup:init/1',[]],['fun','lager_test','log_producer_sup:start_link/0',[]],['fun','lager_test','log_producer_wrk:code_change/1',[]],['fun','lager_test','log_producer_wrk:handle_call/1',[]],['fun','lager_test','log_producer_wrk:handle_cast/1',[]],['fun','lager_test','log_producer_wrk:handle_info/1',[]],['fun','lager_test','log_producer_wrk:init/1',[]],['fun','lager_test','log_producer_wrk:start_link/1',[]],['fun','lager_test','log_producer_wrk:terminate/1',[]],['fun','lager_test','special_process:init/1',[]],['fun','lager_test','special_process:start/0',[]],['fun','lager_test','sync_error_logger:error_msg/1',[]],['fun','lager_test','sync_error_logger:error_msg/2',[]],['fun','lager_test','sync_error_logger:error_report/1',[]],['fun','lager_test','sync_error_logger:error_report/2',[]],['fun','lager_test','sync_error_logger:info_msg/1',[]],['fun','lager_test','sync_error_logger:info_msg/2',[]],['fun','lager_test','sync_error_logger:info_report/1',[]],['fun','lager_test','sync_error_logger:info_report/2',[]],['fun','lager_test','sync_error_logger:warning_msg/1',[]],['fun','lager_test','sync_error_logger:warning_msg/2',[]],['fun','lager_test','sync_error_logger:warning_report/1',[]],['fun','lager_test','sync_error_logger:warning_report/2',[]],['fun','lager_test','syslog:close/1',[]],['fun','lager_test','syslog:code_change/3',[]],['fun','lager_test','syslog:handle_call/3',[]],['fun','lager_test','syslog:handle_cast/2',[]],['fun','lager_test','syslog:handle_info/2',[]],['fun','lager_test','syslog:init/1',[]],['fun','lager_test','syslog:log/3',[]],['fun','lager_test','syslog:log/4',[]],['fun','lager_test','syslog:open/3',[]],['fun','lager_test','syslog:start/0',[]],['fun','lager_test','syslog:start_link/0',[]],['fun','lager_test','syslog:stop/0',[]],['fun','lager_test','syslog:terminate/2',[]],['fun','lager_test','syslog_app:start/2',[]],['fun','lager_test','syslog_app:stop/1',[]],['fun','lager_test','syslog_sup:init/1',[]],['fun','lager_test','syslog_sup:start_link/0',[]],['app','log_producer','log_producer','[application]'],['mod','log_producer','log_producer_app',[]],['mod','log_producer','log_producer_starter',[]],['mod','log_producer','log_producer_sup',[]],['mod','log_producer','log_producer_wrk',[]],['fun','log_producer','log_producer_app:start/1',[]],['fun','log_producer','log_producer_app:stop/1',[]],['fun','log_producer','log_producer_starter:start/0',[]],['fun','log_producer','log_producer_starter:start/1',[]],['fun','log_producer','log_producer_starter:stop/0',[]],['fun','log_producer','log_producer_starter:stop/1',[]],['fun','log_producer','log_producer_sup:init/1',[]],['fun','log_producer','log_producer_sup:start_link/0',[]],['fun','log_producer','log_producer_wrk:code_change/1',[]],['fun','log_producer','log_producer_wrk:handle_call/1',[]],['fun','log_producer','log_producer_wrk:handle_cast/1',[]],['fun','log_producer','log_producer_wrk:handle_info/1',[]],['fun','log_producer','log_producer_wrk:init/1',[]],['fun','log_producer','log_producer_wrk:start_link/1',[]],['fun','log_producer','log_producer_wrk:terminate/1',[]]];