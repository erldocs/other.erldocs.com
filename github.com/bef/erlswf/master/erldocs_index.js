var index = [['app','erlswf','erlswf','[application]'],['mod','erlswf','ngram','functions for n-gram analysis.'],['mod','erlswf','ssamod',[]],['mod','erlswf','ssamod_abcdump',[]],['mod','erlswf','ssamod_api',[]],['mod','erlswf','ssamod_check',[]],['mod','erlswf','ssamod_ngram',[]],['mod','erlswf','ssamod_swfdump',[]],['mod','erlswf','ssamod_version',[]],['mod','erlswf','swf',[]],['mod','erlswf','swfabc','parse abc (avm2 bytecode).'],['mod','erlswf','swfabcformat','format abc dumps in a logically structured and hum'],['mod','erlswf','swfaction',[]],['mod','erlswf','swfdt',[]],['mod','erlswf','swfformat',[]],['mod','erlswf','swfjson',[]],['mod','erlswf','swfjsonabc',[]],['mod','erlswf','swfmime',[]],['mod','erlswf','swfutils',[]],['fun','erlswf','ngram:common_distance/1','common distance  expand profiles, then calculate '],['fun','erlswf','ngram:cut_profile/2','limit n-gram profile to the Length.'],['fun','erlswf','ngram:distance/1','calculate distance between profiles.'],['fun','erlswf','ngram:expand_profiles/1','calculate P1 cup P2 / add missing keys with value '],['fun','erlswf','ngram:incr_pl/3','increase integer value of property list entry by I'],['fun','erlswf','ngram:intersect_profiles/1','calculate P1 cap P2 / all common keys of two profi'],['fun','erlswf','ngram:load_profile/1',[]],['fun','erlswf','ngram:merge_profiles/1','merge many profiles.'],['fun','erlswf','ngram:merge_profiles/1','merge two profiles.'],['fun','erlswf','ngram:ngram/1','generate n-gram profile  From a list L of element'],['fun','erlswf','ngram:ngram/2','same as ngram(N, [], L).'],['fun','erlswf','ngram:ngramfold/2','generate n-gram from a list of lists.'],['fun','erlswf','ngram:ngramfold/3',[]],['fun','erlswf','ngram:save_profile/2',[]],['fun','erlswf','ngram:simplified_distance/1','simplified profile intersection (SPI) distance.'],['fun','erlswf','ssamod_abcdump:run/1',[]],['fun','erlswf','ssamod_api:run/1',[]],['fun','erlswf','ssamod_check:run/1',[]],['fun','erlswf','ssamod_ngram:run/1',[]],['fun','erlswf','ssamod_swfdump:run/1',[]],['fun','erlswf','ssamod_version:run/1',[]],['fun','erlswf','swf:debug/2',[]],['fun','erlswf','swf:headerdecode/1','decode swf header.'],['fun','erlswf','swf:parsetorawtags/1','swf blob to swf structure with rawtags.'],['fun','erlswf','swf:readfile/1','read a whole file.'],['fun','erlswf','swf:swf/1','swf blob to swf structure with decoded tags.'],['fun','erlswf','swf:swffile/1','convert swf file to fully decoded swf structure.'],['fun','erlswf','swf:tag/1','decode tag by code OR get name using tag(name, Cod'],['fun','erlswf','swf:tagdecode/1','decode rawtag.'],['fun','erlswf','swf:tagsplit/1','split raw tag blob into tag list.'],['fun','erlswf','swf:uncompress/1','read swf type, version, file length and uncompress'],['fun','erlswf','swfabc:abc/1','parse binary abc bytecode.'],['fun','erlswf','swfabc:cpdouble/2',[]],['fun','erlswf','swfabc:cpinteger/2',[]],['fun','erlswf','swfabc:cpmultiname/2',[]],['fun','erlswf','swfabc:cpnamespace/2',[]],['fun','erlswf','swfabc:cpnsset/2',[]],['fun','erlswf','swfabc:cpstring/2',[]],['fun','erlswf','swfabc:cpuinteger/2',[]],['fun','erlswf','swfabc:d64/1',[]],['fun','erlswf','swfabc:method/2',[]],['fun','erlswf','swfabc:method_body/2',[]],['fun','erlswf','swfabc:s24/1',[]],['fun','erlswf','swfabc:s32/1',[]],['fun','erlswf','swfabc:string/1',[]],['fun','erlswf','swfabc:u16/1',[]],['fun','erlswf','swfabc:u30/1',[]],['fun','erlswf','swfabc:u32/1',[]],['fun','erlswf','swfabc:u8/1',[]],['fun','erlswf','swfabcformat:abc/1','stream fancy abc to given io device.'],['fun','erlswf','swfabcformat:abc/1','same as abc(standard_io, Abc, all).'],['fun','erlswf','swfabcformat:dtfmt/1',[]],['fun','erlswf','swfaction:action/1','actions from 0x80 to 0xff (actions w/ data).'],['fun','erlswf','swfaction:action/1','actions from 0x01 to 0x9f (actions w/o data).'],['fun','erlswf','swfaction:actionrecords/1','decode null-terminated list of ACTIONRECORD[].'],['fun','erlswf','swfdt:encodedu32/1','decode 1-5 bit variable length u32.'],['fun','erlswf','swfdt:matrix/1','decode matrix into scale/rotate/translate tuples ('],['fun','erlswf','swfdt:rect/1',[]],['fun','erlswf','swfdt:sb/1','decode signed-bit value (aka.'],['fun','erlswf','swfdt:sb/2',[]],['fun','erlswf','swfdt:string/1','null-terminated string.'],['fun','erlswf','swfdt:ui16/1','decode 16-bit unsigned integer.'],['fun','erlswf','swfformat:formatactions/1',[]],['fun','erlswf','swfformat:tagformat/1','format tags for display/storage;     ABC can be d'],['fun','erlswf','swfformat:tagformat/2',[]],['fun','erlswf','swfmime:getmime/1','match for known swf-related mimetype.'],['fun','erlswf','swfutils:abc2oplist/1',[]],['fun','erlswf','swfutils:abcdata/1',[]],['fun','erlswf','swfutils:actiondata/1',[]],['fun','erlswf','swfutils:actions2oplist/1',[]],['fun','erlswf','swfutils:dumpsecuritycheck/1',[]],['fun','erlswf','swfutils:dumpswf/1',[]],['fun','erlswf','swfutils:dumpswftags/1',[]],['fun','erlswf','swfutils:dumptags/2',[]],['fun','erlswf','swfutils:filedumpswf/2',[]],['fun','erlswf','swfutils:filtertags/2',[]],['fun','erlswf','swfutils:savetofile/3',[]],['fun','erlswf','swfutils:silentsecuritycheck/1',[]],['fun','erlswf','swfutils:tagencode/2',[]]];