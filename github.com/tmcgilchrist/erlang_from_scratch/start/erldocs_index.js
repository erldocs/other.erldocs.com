var index = [['app','erlang_from_scratch','erlang_from_scratch','[application]'],['mod','erlang_from_scratch','erlio',[]],['mod','erlang_from_scratch','erlio_app',[]],['mod','erlang_from_scratch','erlio_assets_resource',[]],['mod','erlang_from_scratch','erlio_sup',[]],['mod','erlang_from_scratch','reloader','Erlang module for automatically reloading modified'],['fun','erlang_from_scratch','erlio:start/0','Start the erlio server.'],['fun','erlang_from_scratch','erlio:start_link/0','Starts the app for inclusion in a supervisor tree.'],['fun','erlang_from_scratch','erlio:stop/0','Stop the erlio server.'],['fun','erlang_from_scratch','erlio_app:start/2','application start callback for erlio.'],['fun','erlang_from_scratch','erlio_app:stop/1','application stop callback for erlio.'],['fun','erlang_from_scratch','erlio_assets_resource:allowed_methods/1','Handle serving of the single page application.'],['fun','erlang_from_scratch','erlio_assets_resource:content_types_provided/1','Return the proper content type of the file, or def'],['fun','erlang_from_scratch','erlio_assets_resource:generate_etag/1','Generates an etag for the asset being served.'],['fun','erlang_from_scratch','erlio_assets_resource:init/1','Initialize the resource.'],['fun','erlang_from_scratch','erlio_assets_resource:last_modified/1','Determines the time the asset was last modified.'],['fun','erlang_from_scratch','erlio_assets_resource:ping/2',[]],['fun','erlang_from_scratch','erlio_assets_resource:resource_exists/1','If the file exists, allow it through, otherwise as'],['fun','erlang_from_scratch','erlio_assets_resource:routes/0','Return the routes this module should respond to.'],['fun','erlang_from_scratch','erlio_assets_resource:to_resource/1','Return the resources content.'],['fun','erlang_from_scratch','erlio_sup:init/1',[]],['fun','erlang_from_scratch','erlio_sup:start_link/0',[]],['fun','erlang_from_scratch','reloader:all_changed/0','Return a list of beam modules that have changed.'],['fun','erlang_from_scratch','reloader:code_change/3','gen_server code_change callback (trivial).'],['fun','erlang_from_scratch','reloader:handle_call/3','gen_server callback.'],['fun','erlang_from_scratch','reloader:handle_cast/2','gen_server callback.'],['fun','erlang_from_scratch','reloader:handle_info/2','gen_server callback.'],['fun','erlang_from_scratch','reloader:init/1','gen_server init, opens the server in an initial st'],['fun','erlang_from_scratch','reloader:is_changed/1','true if the loaded module is a beam with a vsn att'],['fun','erlang_from_scratch','reloader:reload_modules/1','code:purge/1 and code:load_file/1 the given list o'],['fun','erlang_from_scratch','reloader:start/0','Start the reloader.'],['fun','erlang_from_scratch','reloader:start_link/0','Start the reloader.'],['fun','erlang_from_scratch','reloader:stop/0','Stop the reloader.'],['fun','erlang_from_scratch','reloader:terminate/2','gen_server termination callback.']];