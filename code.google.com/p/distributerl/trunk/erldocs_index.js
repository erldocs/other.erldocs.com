var index = [['app','distributerl','distributerl','[application]'],['mod','distributerl','chash','A consistent hashing implementation.'],['mod','distributerl','merkerl','An implementation of Merkle Trees for anti-entropy'],['mod','distributerl','vclock','A simple Erlang implementation of vector clocks as'],['fun','distributerl','chash:contains_name/1','Return true if named Node owns any partitions in t'],['fun','distributerl','chash:fresh/1','Create a brand new ring.'],['fun','distributerl','chash:key_of/1','Given any term used to name an object, produce tha'],['fun','distributerl','chash:lookup/1','Find the Node that owns the partition identified b'],['fun','distributerl','chash:members/1','Return all Nodes that own any partitions in the ri'],['fun','distributerl','chash:merge_rings/1','Return the best possible merge of two rings based '],['fun','distributerl','chash:nodes/1','Return the entire set of NodeEntries in the ring.'],['fun','distributerl','chash:predecessors/1','Given an object key, return the next N NodeEntries'],['fun','distributerl','chash:predecessors/1','Given an object key, return all NodeEntries in rev'],['fun','distributerl','chash:size/1','Return the number of partitions in the ring.'],['fun','distributerl','chash:successors/1','Given an object key, return the next N NodeEntries'],['fun','distributerl','chash:successors/1','Given an object key, return all NodeEntries in ord'],['fun','distributerl','chash:update/1','Make the partition beginning at IndexAsInt owned b'],['fun','distributerl','merkerl:allkeys/1',[]],['fun','distributerl','merkerl:build_tree/1','Build a Merkle tree from a list of KHs of objects'],['fun','distributerl','merkerl:delete/2',[]],['fun','distributerl','merkerl:diff/1','Find the keys of objects which differ between the '],['fun','distributerl','merkerl:insert/2','Insert the KH for a new or changed object into T.'],['fun','distributerl','merkerl:test_merkle/0','A test function and example code.'],['fun','distributerl','vclock:all_nodes/1','Return the list of all nodes that have ever increm'],['fun','distributerl','vclock:descends/1','Return true if Va is a direct descendant of Vb, el'],['fun','distributerl','vclock:example_test/0','Serves as both a trivial test and some example cod'],['fun','distributerl','vclock:fresh/0','Create a brand new vclock.'],['fun','distributerl','vclock:get_counter/1','Get the counter value in VClock set from Node.'],['fun','distributerl','vclock:get_timestamp/1','Get the timestamp value in a VClock set from Node.'],['fun','distributerl','vclock:increment/1','Increment VClock at Node.'],['fun','distributerl','vclock:merge/1','Combine all VClocks in the input list into their l']];