var index = [['app','scalaris','scalaris','[application]'],['mod','scalaris','admin',[]],['mod','scalaris','bench_increment',[]],['mod','scalaris','bench_master',[]],['mod','scalaris','bench_server','This is a small server for running benchmarks.'],['mod','scalaris','bench_slave',[]],['mod','scalaris','boot','This is the boot application module.'],['mod','scalaris','boot_app','The boot server application.'],['mod','scalaris','boot_server','The boot server maintains a list of chord# nodes a'],['mod','scalaris','bulkowner','This implements the bulk owner algorithm.'],['mod','scalaris','chordsharp',[]],['mod','scalaris','chordsharp_app',[]],['mod','scalaris','config',[]],['mod','scalaris','cs_api',[]],['mod','scalaris','cs_debug',[]],['mod','scalaris','cs_join',[]],['mod','scalaris','cs_keyholder','this process stores the identifier of the cs_node.'],['mod','scalaris','cs_lb',[]],['mod','scalaris','cs_lookup',[]],['mod','scalaris','cs_node',[]],['mod','scalaris','cs_replica_stabilization',[]],['mod','scalaris','cs_reregister',[]],['mod','scalaris','cs_send',[]],['mod','scalaris','cs_state',[]],['mod','scalaris','cs_sup_and',[]],['mod','scalaris','cs_sup_or',[]],['mod','scalaris','cs_xmlrpc',[]],['mod','scalaris','database',[]],['mod','scalaris','dc_clustering',[]],['mod','scalaris','dn_cache',[]],['mod','scalaris','experiments',[]],['mod','scalaris','failuredetector2',[]],['mod','scalaris','fd_linker',[]],['mod','scalaris','fd_pinger',[]],['mod','scalaris','fix_queue',[]],['mod','scalaris','ganglia',[]],['mod','scalaris','gen_component',[]],['mod','scalaris','intervals',[]],['mod','scalaris','ioutils',[]],['mod','scalaris','lib_misc',[]],['mod','scalaris','log',[]],['mod','scalaris','lookup',[]],['mod','scalaris','mathlib',[]],['mod','scalaris','merkerl','An implementation of Merkle Trees for anti-entropy'],['mod','scalaris','monitor_timing',[]],['mod','scalaris','node',[]],['mod','scalaris','node_details',[]],['mod','scalaris','preconfig',[]],['mod','scalaris','process_dictionary','This module provides a mechanism to implement proc'],['mod','scalaris','randoms',[]],['mod','scalaris','ring_maintenance',[]],['mod','scalaris','rm_chord',[]],['mod','scalaris','rm_tman',[]],['mod','scalaris','rm_tmansharp',[]],['mod','scalaris','routingtable',[]],['mod','scalaris','rse_chord','implements a ring size estimator (RSE) for Chord-l'],['mod','scalaris','rt_chord',[]],['mod','scalaris','rt_loop',[]],['mod','scalaris','rt_simple',[]],['mod','scalaris','scalaris_ctl',[]],['mod','scalaris','self_man',[]],['mod','scalaris','statistics',[]],['mod','scalaris','terms_and_strings','Serialization of erlang terms to (printable) strin'],['mod','scalaris','tracer',[]],['mod','scalaris','trigger',[]],['mod','scalaris','trigger_dynamic',[]],['mod','scalaris','trigger_periodic',[]],['mod','scalaris','util',[]],['mod','scalaris','vivaldi',[]],['mod','scalaris','vivaldi_latency',[]],['mod','scalaris','webhelpers',[]],['mod','scalaris','yaws_wrapper',[]],['fun','scalaris','admin:add_nodes/1',[]],['fun','scalaris','admin:add_nodes/1','add new Scalaris nodes on the local node.'],['fun','scalaris','admin:check_ring/0','contact boot server and check ring.'],['fun','scalaris','admin:check_routing_tables/1',[]],['fun','scalaris','admin:dd_check_ring/0',[]],['fun','scalaris','admin:dd_check_ring/1',[]],['fun','scalaris','admin:diff_dump/3',[]],['fun','scalaris','admin:get_dump/0',[]],['fun','scalaris','admin:get_dump_bw/0',[]],['fun','scalaris','admin:nodes/0','contact boot server and list the known ip addresse'],['fun','scalaris','admin:number_of_nodes/0',[]],['fun','scalaris','admin:print_ages/0',[]],['fun','scalaris','admin:start/0',[]],['fun','scalaris','admin:start_link/0',[]],['fun','scalaris','bench_increment:bench/0',[]],['fun','scalaris','bench_increment:bench_raw/0',[]],['fun','scalaris','bench_increment:process/3',[]],['fun','scalaris','bench_increment:start/0',[]],['fun','scalaris','bench_master:run_1/0',[]],['fun','scalaris','bench_master:start/0',[]],['fun','scalaris','bench_server:bench_runner/1',[]],['fun','scalaris','bench_server:run_increment/2','run an increment benchmark (i++) on all nodes.'],['fun','scalaris','bench_server:run_increment/3','run an increment benchmark (i++) on all nodes  pr'],['fun','scalaris','bench_server:run_increment_locally/2',[]],['fun','scalaris','bench_server:run_read/2','run an read benchmark on all nodes.'],['fun','scalaris','bench_server:start/0',[]],['fun','scalaris','bench_server:start_link/0','spawns a bench_server.'],['fun','scalaris','bench_slave:run_1/0',[]],['fun','scalaris','bench_slave:start/0',[]],['fun','scalaris','boot:start/0',[]],['fun','scalaris','boot:stop/0',[]],['fun','scalaris','boot_app:start/2',[]],['fun','scalaris','boot_app:stop/1',[]],['fun','scalaris','boot_server:be_the_first/0',[]],['fun','scalaris','boot_server:connect/0',[]],['fun','scalaris','boot_server:init/1',[]],['fun','scalaris','boot_server:node_list/0','trigger a message with all nodes known to the boot'],['fun','scalaris','boot_server:number_of_nodes/0','trigger a message with  the number of nodes known '],['fun','scalaris','boot_server:on/2',[]],['fun','scalaris','boot_server:start_link/1','starts the server; called by the boot supervisor.'],['fun','scalaris','bulkowner:bulk_owner/1','main routine.'],['fun','scalaris','bulkowner:issue_bulk_owner/1','start a bulk owner operation.'],['fun','scalaris','bulkowner:start_bulk_owner/2',[]],['fun','scalaris','chordsharp:start/0',[]],['fun','scalaris','chordsharp:stop/0',[]],['fun','scalaris','chordsharp_app:start/2',[]],['fun','scalaris','chordsharp_app:stop/1',[]],['fun','scalaris','config:bootPid/0','pid of the boot daemon.'],['fun','scalaris','config:collectorInterval/0','interval between two collections of the message st'],['fun','scalaris','config:cs_log_file/0','path to the chordsharp log file.'],['fun','scalaris','config:debug_log_file/0','path to the debug log file.'],['fun','scalaris','config:debugQueueLength/0','length of the debug queue.'],['fun','scalaris','config:docroot/0','document root for the boot server yaws server.'],['fun','scalaris','config:error_log_file/0','path to the error log file.'],['fun','scalaris','config:failureDetectorInterval/0','the interval between two failure detection runs.'],['fun','scalaris','config:knownHosts/0','known hosts.'],['fun','scalaris','config:leaderDetectorInterval/0','transaction leader detection interval.'],['fun','scalaris','config:listenIP/0','IP to listen on for TCP.'],['fun','scalaris','config:listenPort/0','port to listen on for TCP.'],['fun','scalaris','config:loadBalanceFlagResetInterval/0','interval between two flag reset events.'],['fun','scalaris','config:loadBalanceInterval/0','interval between two load balance rounds.'],['fun','scalaris','config:loadBalanceStartupInterval/0','interval between two load balance rounds.'],['fun','scalaris','config:log_log_file/0','path to the logger log file.'],['fun','scalaris','config:log_path/0','path to the log directory.'],['fun','scalaris','config:logPid/0','pid of the log daemon.'],['fun','scalaris','config:mem_log_file/0','path to the mem log file.'],['fun','scalaris','config:pointerBaseStabilizationInterval/0','the interval between two finger/pointer stabilizat'],['fun','scalaris','config:quorumFactor/0','number of nodes needed for a quorum.'],['fun','scalaris','config:read/1','read with default-value.'],['fun','scalaris','config:read/1','read config parameter.'],['fun','scalaris','config:read_required/1','read config parameter   crashes, when parameter n'],['fun','scalaris','config:register_hosts/0','with which nodes to register regularly, alternativ'],['fun','scalaris','config:replicaPrefixes/0','prefixes used for the replicas.'],['fun','scalaris','config:replicationFactor/0','the replication degree of the system.'],['fun','scalaris','config:reregisterInterval/0','interval between two re-registrations with the boo'],['fun','scalaris','config:stabilizationInterval/0','the interval between two stabilization runs Max.'],['fun','scalaris','config:stabilizationInterval_max/0','the interval between two stabilization runs Max.'],['fun','scalaris','config:stabilizationInterval_min/0','the interval between two stabilization runs Min.'],['fun','scalaris','config:start_link/1',[]],['fun','scalaris','config:storage_clean/0','whether to recreate file storage from scratch.'],['fun','scalaris','config:storage_path/0','path of file storage directory.'],['fun','scalaris','config:storage_size/0','size of file storage directory.'],['fun','scalaris','config:succListLength/0','the length of the successor list.'],['fun','scalaris','config:testDump/0',[]],['fun','scalaris','config:testKeepAlive/0',[]],['fun','scalaris','config:tmanagerTimeout/0',[]],['fun','scalaris','config:tpFailureTimeout/0',[]],['fun','scalaris','config:transaction_log_file/0','path to the transaction log file.'],['fun','scalaris','config:transactionLookupTimeout/0','transaction node lookup timeout.'],['fun','scalaris','cs_api:delete/1',[]],['fun','scalaris','cs_api:process_request_list/2',[]],['fun','scalaris','cs_api:range_read/2','range a range of key-value pairs.'],['fun','scalaris','cs_api:read/1','reads the value of a key.'],['fun','scalaris','cs_api:test_and_set/1','atomic compare and swap.'],['fun','scalaris','cs_api:write/1','writes the value of a key.'],['fun','scalaris','cs_debug:debug/3',[]],['fun','scalaris','cs_debug:dump/4',[]],['fun','scalaris','cs_debug:new/0',[]],['fun','scalaris','cs_join:join_first/1',[]],['fun','scalaris','cs_join:join_request/4',[]],['fun','scalaris','cs_keyholder:get_key/0','reads the key of the cs_node.'],['fun','scalaris','cs_keyholder:init/1',[]],['fun','scalaris','cs_keyholder:on/2',[]],['fun','scalaris','cs_keyholder:reinit/0',[]],['fun','scalaris','cs_keyholder:set_key/1','sets the key of the cs_node.'],['fun','scalaris','cs_keyholder:start_link/1',[]],['fun','scalaris','cs_lb:balance_load/1',[]],['fun','scalaris','cs_lb:check_balance/3',[]],['fun','scalaris','cs_lb:get_loadbalance_flag/1',[]],['fun','scalaris','cs_lb:get_middle_key/1',[]],['fun','scalaris','cs_lb:move_load/3',[]],['fun','scalaris','cs_lb:new/0',[]],['fun','scalaris','cs_lb:reset_loadbalance_flag/1',[]],['fun','scalaris','cs_lookup:unreliable_get_key/1',[]],['fun','scalaris','cs_lookup:unreliable_lookup/2',[]],['fun','scalaris','cs_node:init/1','joins this node in the ring and calls the main loo'],['fun','scalaris','cs_node:on/1','message handler.'],['fun','scalaris','cs_node:start_link/1','spawns a scalaris node, called by the scalaris sup'],['fun','scalaris','cs_node:start_link/2',[]],['fun','scalaris','cs_replica_stabilization:createReplicatedIntervals/1',[]],['fun','scalaris','cs_replica_stabilization:recreate_replicas/1','recreates the replicas of the given key range.'],['fun','scalaris','cs_reregister:get_base_interval/0',[]],['fun','scalaris','cs_reregister:init/1',[]],['fun','scalaris','cs_reregister:on/2',[]],['fun','scalaris','cs_reregister:start_link/1',[]],['fun','scalaris','cs_send:get/2',[]],['fun','scalaris','cs_send:make_global/1',[]],['fun','scalaris','cs_send:send/1',[]],['fun','scalaris','cs_send:send_after/3',[]],['fun','scalaris','cs_send:send_local/2',[]],['fun','scalaris','cs_send:send_to_group_member/3',[]],['fun','scalaris','cs_send:this/0',[]],['fun','scalaris','cs_state:details/1',[]],['fun','scalaris','cs_state:dump/1',[]],['fun','scalaris','cs_state:get_db/1',[]],['fun','scalaris','cs_state:get_lb/1',[]],['fun','scalaris','cs_state:get_my_range/1',[]],['fun','scalaris','cs_state:get_trans_log/1',[]],['fun','scalaris','cs_state:id/1',[]],['fun','scalaris','cs_state:me/1',[]],['fun','scalaris','cs_state:new/6',[]],['fun','scalaris','cs_state:new/7',[]],['fun','scalaris','cs_state:next_interval/1',[]],['fun','scalaris','cs_state:pred/1',[]],['fun','scalaris','cs_state:pred_id/1',[]],['fun','scalaris','cs_state:pred_pid/1',[]],['fun','scalaris','cs_state:rt/1',[]],['fun','scalaris','cs_state:set_db/2',[]],['fun','scalaris','cs_state:set_lb/2',[]],['fun','scalaris','cs_state:set_rt/2',[]],['fun','scalaris','cs_state:set_trans_log/2',[]],['fun','scalaris','cs_state:succ/1',[]],['fun','scalaris','cs_state:succ_id/1',[]],['fun','scalaris','cs_state:succ_pid/1',[]],['fun','scalaris','cs_state:uniqueId/1',[]],['fun','scalaris','cs_state:update_pred/2',[]],['fun','scalaris','cs_state:update_pred_succ/3',[]],['fun','scalaris','cs_state:update_succ/2',[]],['fun','scalaris','cs_sup_and:init/1',[]],['fun','scalaris','cs_sup_and:start_link/2',[]],['fun','scalaris','cs_sup_or:init/1',[]],['fun','scalaris','cs_sup_or:start_link/0',[]],['fun','scalaris','cs_sup_or:start_link/1',[]],['fun','scalaris','cs_xmlrpc:handler/2',[]],['fun','scalaris','cs_xmlrpc:start_link/0',[]],['fun','scalaris','database:behaviour_info/1',[]],['fun','scalaris','dc_clustering:init/1',[]],['fun','scalaris','dc_clustering:on/1','message handler.'],['fun','scalaris','dc_clustering:start_link/1',[]],['fun','scalaris','dn_cache:get_base_interval/0',[]],['fun','scalaris','dn_cache:init/1',[]],['fun','scalaris','dn_cache:on/2','the Token takes care, that there is only one timer'],['fun','scalaris','dn_cache:start_link/1','spawns a Dead Node Cache.'],['fun','scalaris','experiments:run_1/0',[]],['fun','scalaris','experiments:run_2/0',[]],['fun','scalaris','experiments:start/0',[]],['fun','scalaris','failuredetector2:getmytargets/0',[]],['fun','scalaris','failuredetector2:init/1',[]],['fun','scalaris','failuredetector2:remove_subscriber/1',[]],['fun','scalaris','failuredetector2:start_link/0',[]],['fun','scalaris','failuredetector2:subscribe/1','generates a failure detector for the calling proce'],['fun','scalaris','failuredetector2:unsubscribe/1','deletes the failure detector for the given pid.'],['fun','scalaris','fd_linker:init/1',[]],['fun','scalaris','fd_linker:on/2',[]],['fun','scalaris','fd_linker:start_link/1','spawns a fd_linker instance.'],['fun','scalaris','fd_pinger:init/1',[]],['fun','scalaris','fd_pinger:on/2',[]],['fun','scalaris','fd_pinger:start_link/1','spawns a fd_pinger instance.'],['fun','scalaris','fix_queue:add/2',[]],['fun','scalaris','fix_queue:map/2',[]],['fun','scalaris','fix_queue:new/1',[]],['fun','scalaris','ganglia:start/0',[]],['fun','scalaris','ganglia:start_link/0',[]],['fun','scalaris','gen_component:behaviour_info/1',[]],['fun','scalaris','gen_component:start/1',[]],['fun','scalaris','gen_component:start/1',[]],['fun','scalaris','gen_component:start/4',[]],['fun','scalaris','gen_component:start_link/1',[]],['fun','scalaris','gen_component:start_link/1',[]],['fun','scalaris','gen_component:wait_for_ok/0',[]],['fun','scalaris','intervals:cut/1',[]],['fun','scalaris','intervals:cut_iter/2',[]],['fun','scalaris','intervals:empty/0',[]],['fun','scalaris','intervals:first/0',[]],['fun','scalaris','intervals:in/2',[]],['fun','scalaris','intervals:is_covered/1','returns true if the intervals cover the complete i'],['fun','scalaris','intervals:is_empty/1',[]],['fun','scalaris','intervals:last/0',[]],['fun','scalaris','intervals:make/1',[]],['fun','scalaris','intervals:new/1',[]],['fun','scalaris','intervals:new/1',[]],['fun','scalaris','intervals:normalize/1',[]],['fun','scalaris','intervals:sanitize/1',[]],['fun','scalaris','intervals:unpack/1',[]],['fun','scalaris','ioutils:for_each_line_in_file/4',[]],['fun','scalaris','lib_misc:make_workers/2',[]],['fun','scalaris','lib_misc:pmap1/2',[]],['fun','scalaris','lib_misc:submit_task/2',[]],['fun','scalaris','lib_misc:wait/1',[]],['fun','scalaris','log:log/2',[]],['fun','scalaris','log:log/3',[]],['fun','scalaris','log:log/4',[]],['fun','scalaris','log:start_link/0',[]],['fun','scalaris','lookup:delete_key/3',[]],['fun','scalaris','lookup:get_key/4',[]],['fun','scalaris','lookup:lookup_aux/4',[]],['fun','scalaris','lookup:lookup_fin/2',[]],['fun','scalaris','lookup:set_key/5',[]],['fun','scalaris','mathlib:closestPointsHelper/1',[]],['fun','scalaris','mathlib:euclideanDist/1',[]],['fun','scalaris','mathlib:euclideanDist/2',[]],['fun','scalaris','mathlib:max/2',[]],['fun','scalaris','mathlib:median/1',[]],['fun','scalaris','mathlib:u/1',[]],['fun','scalaris','mathlib:u/2',[]],['fun','scalaris','mathlib:vecAdd/2',[]],['fun','scalaris','mathlib:vecMult/2',[]],['fun','scalaris','mathlib:vecSub/2',[]],['fun','scalaris','mathlib:vecWeightedAvg/4',[]],['fun','scalaris','merkerl:allkeys/1','Produce all keys referenced in a Merkle tree.'],['fun','scalaris','merkerl:build_tree/1','Build a Merkle tree from a list of pairs represent'],['fun','scalaris','merkerl:contains/1','Checks whether the specified item is in the tree.'],['fun','scalaris','merkerl:delete/1','Remove the specified item from a tree.'],['fun','scalaris','merkerl:diff/1','Find the keys of objects which differ between the '],['fun','scalaris','merkerl:insert/1','Insert the data for a new or changed object X into'],['fun','scalaris','merkerl:test_merkle/0','A test function and example code.'],['fun','scalaris','monitor_timing:get_timers/0','read the statistics about the known timers.'],['fun','scalaris','monitor_timing:init/1',[]],['fun','scalaris','monitor_timing:log/2','log a timespan for a given timer.'],['fun','scalaris','monitor_timing:on/1','message handler.'],['fun','scalaris','monitor_timing:start_link/0',[]],['fun','scalaris','node:id/1',[]],['fun','scalaris','node:is_null/1',[]],['fun','scalaris','node:make/2',[]],['fun','scalaris','node:new/1',[]],['fun','scalaris','node:null/0',[]],['fun','scalaris','node:pidX/1',[]],['fun','scalaris','node:uniqueId/1',[]],['fun','scalaris','node_details:hostname/1',[]],['fun','scalaris','node_details:load/1',[]],['fun','scalaris','node_details:me/1',[]],['fun','scalaris','node_details:memory/1',[]],['fun','scalaris','node_details:message_log/1',[]],['fun','scalaris','node_details:new/8',[]],['fun','scalaris','node_details:predlist/1',[]],['fun','scalaris','node_details:rt_size/1',[]],['fun','scalaris','node_details:succlist/1',[]],['fun','scalaris','preconfig:config/0','path to the chordsharp config file.'],['fun','scalaris','preconfig:cs_instances/0','number of cloned instances of chordsharp to run.'],['fun','scalaris','preconfig:cs_log_file/0','path to the chordsharp log file.'],['fun','scalaris','preconfig:cs_port/0','internet port for chordsharp.'],['fun','scalaris','preconfig:docroot/0','document root for the application yaws server.'],['fun','scalaris','preconfig:get_env/2','get an application environment with defaults.'],['fun','scalaris','preconfig:local_config/0','path to the chordsharp local config file.'],['fun','scalaris','preconfig:log_path/0','path to the log directory.'],['fun','scalaris','preconfig:yaws_port/0','yaws http port to serve.'],['fun','scalaris','process_dictionary:find_all_cs_nodes/0','tries to find all cs_node processes.'],['fun','scalaris','process_dictionary:find_all_groups/1',[]],['fun','scalaris','process_dictionary:find_all_processes/1',[]],['fun','scalaris','process_dictionary:find_cs_node/0','tries to find a cs_node process.'],['fun','scalaris','process_dictionary:find_group/1','tries to find a process group with a specific proc'],['fun','scalaris','process_dictionary:get_all_pids/0',[]],['fun','scalaris','process_dictionary:get_groups/0','find groups for web interface.'],['fun','scalaris','process_dictionary:get_processes_in_group/1','find processes in a group (for web interface).'],['fun','scalaris','process_dictionary:lookup_process/1','find the process group and name of a process by pi'],['fun','scalaris','process_dictionary:lookup_process/1','looks up a process with InstanceId and Name in the'],['fun','scalaris','process_dictionary:register_process/1','register a process with InstanceId and Name.'],['fun','scalaris','process_dictionary:start/0','Starts the server; for use with the test framework'],['fun','scalaris','process_dictionary:start_link/0','Starts the server.'],['fun','scalaris','process_dictionary:start_link_for_unittest/0','Starts the server for unit testing.'],['fun','scalaris','randoms:getRandomId/0',[]],['fun','scalaris','randoms:init/2',[]],['fun','scalaris','randoms:rand_uniform/2',[]],['fun','scalaris','randoms:start/0',[]],['fun','scalaris','ring_maintenance:behaviour_info/1',[]],['fun','scalaris','ring_maintenance:get_as_list/0',[]],['fun','scalaris','ring_maintenance:get_predlist/0',[]],['fun','scalaris','ring_maintenance:get_successorlist/0',[]],['fun','scalaris','ring_maintenance:pred_left/1','notification that my pred left       parameter is'],['fun','scalaris','ring_maintenance:succ_left/1','notification that my succ left       parameter is'],['fun','scalaris','ring_maintenance:update_pred/1','functions for rm_*.erl modules to notify the cs_no'],['fun','scalaris','ring_maintenance:update_succ/1','functions for rm_*.erl modules to notify the cs_no'],['fun','scalaris','ring_maintenance:update_succ_and_pred/2','functions for rm_*.erl modules to notify the cs_no'],['fun','scalaris','rm_chord:get_predlist/0',[]],['fun','scalaris','rm_chord:get_successorlist/1',[]],['fun','scalaris','rm_chord:init/1','starts ring maintenance.'],['fun','scalaris','rm_chord:merge/3','merge two successor lists into one       and sort'],['fun','scalaris','rm_chord:notify/1',[]],['fun','scalaris','rm_chord:on/2',[]],['fun','scalaris','rm_chord:pred_left/1','notification that my pred left       parameter is'],['fun','scalaris','rm_chord:start_link/1','spawns a chord-like ring maintenance process.'],['fun','scalaris','rm_chord:succ_left/1','notification that my succ left       parameter is'],['fun','scalaris','rm_chord:update_pred/1','notification that my pred changed       parameter'],['fun','scalaris','rm_chord:update_succ/1','notification that my succ changed       parameter'],['fun','scalaris','rm_tman:get_base_interval/0',[]],['fun','scalaris','rm_tman:get_max_interval/0',[]],['fun','scalaris','rm_tman:get_min_interval/0',[]],['fun','scalaris','rm_tman:init/1',[]],['fun','scalaris','rm_tman:merge/3','merge two successor lists into one       and sort'],['fun','scalaris','rm_tman:on/2','the Token takes care, that there is only one timer'],['fun','scalaris','rm_tman:start_link/1','spawns a chord-like ring maintenance process.'],['fun','scalaris','rm_tmansharp:get_as_list/0',[]],['fun','scalaris','rm_tmansharp:get_pred/1',[]],['fun','scalaris','rm_tmansharp:get_predlist/0',[]],['fun','scalaris','rm_tmansharp:get_preds/1',[]],['fun','scalaris','rm_tmansharp:get_succ/1',[]],['fun','scalaris','rm_tmansharp:get_successorlist/0',[]],['fun','scalaris','rm_tmansharp:get_succs/1',[]],['fun','scalaris','rm_tmansharp:init/1',[]],['fun','scalaris','rm_tmansharp:merge/2',[]],['fun','scalaris','rm_tmansharp:on/2',[]],['fun','scalaris','rm_tmansharp:pred_left/1','notification that my pred left       parameter is'],['fun','scalaris','rm_tmansharp:rank/2','merge two successor lists into one       and sort'],['fun','scalaris','rm_tmansharp:start_link/1','spawns a chord-like ring maintenance process.'],['fun','scalaris','rm_tmansharp:succ_left/1','notification that my succ left       parameter is'],['fun','scalaris','rm_tmansharp:update_pred/1','notification that my pred changed       parameter'],['fun','scalaris','rm_tmansharp:update_succ/1','notification that my succ changed       parameter'],['fun','scalaris','routingtable:behaviour_info/1',[]],['fun','scalaris','routingtable:initialize/3',[]],['fun','scalaris','rse_chord:init/1','initializes component.'],['fun','scalaris','rse_chord:on/1','message handler.'],['fun','scalaris','rse_chord:start_link/1','start_link for supervisor.'],['fun','scalaris','rt_chord:dump/1',[]],['fun','scalaris','rt_chord:empty/1','creates an empty routing table.'],['fun','scalaris','rt_chord:export_rt_to_cs_node/1',[]],['fun','scalaris','rt_chord:filterDeadNode/1','remove all entries.'],['fun','scalaris','rt_chord:get_keys_for_replicas/1','returns the replicas of the given key.'],['fun','scalaris','rt_chord:get_size/1','returns the size of the routing table.'],['fun','scalaris','rt_chord:getRandomNodeId/0','generates a random node id       In this case it '],['fun','scalaris','rt_chord:hash_key/1','hashes the key to the identifier space.'],['fun','scalaris','rt_chord:init_stabilize/1','starts the stabilization routine.'],['fun','scalaris','rt_chord:next_hop/1','returns the next hop to contact for a lookup     '],['fun','scalaris','rt_chord:stabilize/1','updates one entry in the routing table       and '],['fun','scalaris','rt_chord:to_dict/1',[]],['fun','scalaris','rt_chord:to_pid_list/1','returns the pids of the routing table entries .'],['fun','scalaris','rt_chord:update_pred_succ_in_cs_node/1',[]],['fun','scalaris','rt_loop:get_base_interval/0',[]],['fun','scalaris','rt_loop:init/1',[]],['fun','scalaris','rt_loop:on/1','message handler.'],['fun','scalaris','rt_loop:start_link/1','spawns a routing table maintenance process.'],['fun','scalaris','rt_simple:dump/1',[]],['fun','scalaris','rt_simple:empty/1','creates an empty routing table.'],['fun','scalaris','rt_simple:export_rt_to_cs_node/1',[]],['fun','scalaris','rt_simple:filterDeadNode/1','removes dead nodes from the routing table.'],['fun','scalaris','rt_simple:get_keys_for_replicas/1','returns the replicas of the given key.'],['fun','scalaris','rt_simple:get_size/1','returns the size of the routing table.'],['fun','scalaris','rt_simple:getRandomNodeId/0','generates a random node id       In this case it '],['fun','scalaris','rt_simple:hash_key/1','hashes the key to the identifier space.'],['fun','scalaris','rt_simple:init_stabilize/1','triggered by a new stabilization round.'],['fun','scalaris','rt_simple:n/0',[]],['fun','scalaris','rt_simple:next_hop/1','returns the next hop to contact for a lookup.'],['fun','scalaris','rt_simple:normalize/1',[]],['fun','scalaris','rt_simple:to_dict/1',[]],['fun','scalaris','rt_simple:to_pid_list/1','returns the pids of the routing table entries .'],['fun','scalaris','scalaris_ctl:process/1',[]],['fun','scalaris','scalaris_ctl:start/0',[]],['fun','scalaris','self_man:behaviour_info/1',[]],['fun','scalaris','self_man:get_pid/0',[]],['fun','scalaris','self_man:init/1',[]],['fun','scalaris','self_man:on/2',[]],['fun','scalaris','self_man:start_link/1',[]],['fun','scalaris','statistics:get_average_load/1',[]],['fun','scalaris','statistics:get_average_rt_size/1',[]],['fun','scalaris','statistics:get_load_std_deviation/1',[]],['fun','scalaris','statistics:get_max_memory_usage/1',[]],['fun','scalaris','statistics:get_memory_usage/1',[]],['fun','scalaris','statistics:get_ring_details/0',[]],['fun','scalaris','statistics:get_rt_size_std_deviation/1',[]],['fun','scalaris','statistics:get_total_load/1',[]],['fun','scalaris','tracer:start_link/0',[]],['fun','scalaris','tracer:tracer/1',[]],['fun','scalaris','trigger:behaviour_info/1',[]],['fun','scalaris','trigger_dynamic:init/1',[]],['fun','scalaris','trigger_dynamic:trigger_first/2',[]],['fun','scalaris','trigger_dynamic:trigger_next/2',[]],['fun','scalaris','trigger_periodic:init/1',[]],['fun','scalaris','trigger_periodic:trigger_first/2',[]],['fun','scalaris','trigger_periodic:trigger_next/2',[]],['fun','scalaris','util:dump/0',[]],['fun','scalaris','util:dump2/0',[]],['fun','scalaris','util:dump3/0',[]],['fun','scalaris','util:escape_quotes/1',[]],['fun','scalaris','util:find/2',[]],['fun','scalaris','util:gb_trees_foldl/1',[]],['fun','scalaris','util:gb_trees_largest_smaller_than/1',[]],['fun','scalaris','util:get_nodes/0',[]],['fun','scalaris','util:get_proc_in_vms/1',[]],['fun','scalaris','util:get_stacktrace/0',[]],['fun','scalaris','util:is_between/3',[]],['fun','scalaris','util:is_between_closed/3',[]],['fun','scalaris','util:is_between_stab/3',[]],['fun','scalaris','util:ksplit/2',[]],['fun','scalaris','util:logged_exec/1',[]],['fun','scalaris','util:logger/0',[]],['fun','scalaris','util:max/2',[]],['fun','scalaris','util:min/2',[]],['fun','scalaris','util:minus/2','minus(M,N) : { x | x in M and x notin N}.'],['fun','scalaris','util:parameterized_start_link/2',[]],['fun','scalaris','util:pow/2',[]],['fun','scalaris','util:random_subset/1',[]],['fun','scalaris','util:randomelem/1',[]],['fun','scalaris','util:shuffle/1','Fisher-Yates shuffling for lists.'],['fun','scalaris','util:sleep_for_ever/0',[]],['fun','scalaris','util:trunc/2',[]],['fun','scalaris','util:uniq/1','omit repeated entries in a sorted list.'],['fun','scalaris','util:wait_for_unregister/1',[]],['fun','scalaris','vivaldi:get_base_interval/0',[]],['fun','scalaris','vivaldi:init/1',[]],['fun','scalaris','vivaldi:on/1','message handler.'],['fun','scalaris','vivaldi:start_link/1',[]],['fun','scalaris','vivaldi_latency:init/1',[]],['fun','scalaris','vivaldi_latency:measure_latency/3',[]],['fun','scalaris','vivaldi_latency:on/1','message handler.'],['fun','scalaris','webhelpers:getIndexedRingRendered/0',[]],['fun','scalaris','webhelpers:getLoadRendered/0',[]],['fun','scalaris','webhelpers:getRingChart/0',[]],['fun','scalaris','webhelpers:getRingRendered/0',[]],['fun','scalaris','webhelpers:getVivaldiMap/0',[]],['fun','scalaris','webhelpers:isPost/1','checks whether the current request is a post opera'],['fun','scalaris','webhelpers:lookup/1',[]],['fun','scalaris','webhelpers:set_key/2',[]],['fun','scalaris','yaws_wrapper:start_link/3',[]],['fun','scalaris','yaws_wrapper:try_link/3',[]]];