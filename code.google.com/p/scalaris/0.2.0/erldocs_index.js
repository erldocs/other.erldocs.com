var index = [['app','scalaris','scalaris','[application]'],['mod','scalaris','boot','This is the boot application module.'],['mod','scalaris','boot_app','The boot server application.'],['mod','scalaris','boot_logger',[]],['mod','scalaris','boot_server','The boot server maintains a list of chord# nodes a'],['mod','scalaris','boot_xmlrpc',[]],['mod','scalaris','bulkowner','This implements the bulk owner algorithm.'],['mod','scalaris','chordsharp',[]],['mod','scalaris','chordsharp_app',[]],['mod','scalaris','config',[]],['mod','scalaris','cs_db_otp',[]],['mod','scalaris','cs_debug',[]],['mod','scalaris','cs_error_logger',[]],['mod','scalaris','cs_join',[]],['mod','scalaris','cs_keyholder','this process stores the identifier of the cs_node.'],['mod','scalaris','cs_lb',[]],['mod','scalaris','cs_lookup',[]],['mod','scalaris','cs_replica_stabilization',[]],['mod','scalaris','cs_reregister',[]],['mod','scalaris','cs_state',[]],['mod','scalaris','cs_sup_or',[]],['mod','scalaris','cs_xmlrpc',[]],['mod','scalaris','database',[]],['mod','scalaris','dn_cache',[]],['mod','scalaris','experiments',[]],['mod','scalaris','failuredetector2',[]],['mod','scalaris','fix_queue',[]],['mod','scalaris','gen_component',[]],['mod','scalaris','intervals',[]],['mod','scalaris','ioutils',[]],['mod','scalaris','lib_misc',[]],['mod','scalaris','log',[]],['mod','scalaris','lookup',[]],['mod','scalaris','merkerl','An implementation of Merkle Trees for anti-entropy'],['mod','scalaris','node',[]],['mod','scalaris','node_details',[]],['mod','scalaris','preconfig',[]],['mod','scalaris','process_dictionary','This module provides a mechanism to implement proc'],['mod','scalaris','randoms',[]],['mod','scalaris','ring_maintenance',[]],['mod','scalaris','rm_chord',[]],['mod','scalaris','rm_tman',[]],['mod','scalaris','routingtable',[]],['mod','scalaris','rse_chord','implements a ring size estimator (RSE) for Chord-l'],['mod','scalaris','rt_chord',[]],['mod','scalaris','rt_loop',[]],['mod','scalaris','rt_simple',[]],['mod','scalaris','scalaris_ctl',[]],['mod','scalaris','statistics',[]],['mod','scalaris','terms_and_strings','Serialization of erlang terms to (printable) strin'],['mod','scalaris','tracer',[]],['mod','scalaris','util',[]],['mod','scalaris','yaws_wrapper',[]],['fun','scalaris','boot:start/0',[]],['fun','scalaris','boot:stop/0',[]],['fun','scalaris','boot_app:start/2',[]],['fun','scalaris','boot_app:stop/1',[]],['fun','scalaris','boot_logger:log/1',[]],['fun','scalaris','boot_logger:log_assert/2',[]],['fun','scalaris','boot_logger:log_to_file/1',[]],['fun','scalaris','boot_logger:start/1',[]],['fun','scalaris','boot_logger:start_link/1',[]],['fun','scalaris','boot_logger:transaction_log/1',[]],['fun','scalaris','boot_server:connect/0',[]],['fun','scalaris','boot_server:node_list/0','returns all nodes known to the boot server.'],['fun','scalaris','boot_server:number_of_nodes/0','returns the number of nodes known to the boot serv'],['fun','scalaris','boot_server:ping/0','pings all known nodes.'],['fun','scalaris','boot_server:ping/1',[]],['fun','scalaris','boot_server:start/1','starts the mainloop of the boot server.'],['fun','scalaris','boot_server:start_link/1','starts the server; called by the boot supervisor.'],['fun','scalaris','boot_xmlrpc:handler/2',[]],['fun','scalaris','boot_xmlrpc:start_link/1',[]],['fun','scalaris','bulkowner:bulk_owner/1','main routine.'],['fun','scalaris','bulkowner:issue_bulk_owner/1','start a bulk owner operation.'],['fun','scalaris','bulkowner:start_bulk_owner/2',[]],['fun','scalaris','chordsharp:start/0',[]],['fun','scalaris','chordsharp:stop/0',[]],['fun','scalaris','chordsharp_app:start/2',[]],['fun','scalaris','chordsharp_app:stop/1',[]],['fun','scalaris','config:bootPid/0','pid of the boot daemon.'],['fun','scalaris','config:collectorInterval/0','interval between two collections of the message st'],['fun','scalaris','config:cs_log_file/0','path to the chordsharp log file.'],['fun','scalaris','config:debug_log_file/0','path to the debug log file.'],['fun','scalaris','config:debugQueueLength/0','length of the debug queue.'],['fun','scalaris','config:docroot/0','document root for the boot server yaws server.'],['fun','scalaris','config:error_log_file/0','path to the error log file.'],['fun','scalaris','config:failureDetectorInterval/0','the interval between two failure detection runs.'],['fun','scalaris','config:knownHosts/0','known hosts.'],['fun','scalaris','config:leaderDetectorInterval/0','transaction leader detection interval.'],['fun','scalaris','config:listenIP/0','IP to listen on for TCP.'],['fun','scalaris','config:listenPort/0','port to listen on for TCP.'],['fun','scalaris','config:loadBalanceFlagResetInterval/0','interval between two flag reset events.'],['fun','scalaris','config:loadBalanceInterval/0','interval between two load balance rounds.'],['fun','scalaris','config:loadBalanceStartupInterval/0','interval between two load balance rounds.'],['fun','scalaris','config:log_log_file/0','path to the logger log file.'],['fun','scalaris','config:log_path/0','path to the log directory.'],['fun','scalaris','config:logPid/0','pid of the log daemon.'],['fun','scalaris','config:mem_log_file/0','path to the mem log file.'],['fun','scalaris','config:pointerStabilizationInterval/0','the interval between two finger/pointer stabilizat'],['fun','scalaris','config:quorumFactor/0','number of nodes needed for a quorum.'],['fun','scalaris','config:read/1','read config parameter.'],['fun','scalaris','config:readTimeout/0','time out for read operations.'],['fun','scalaris','config:register_hosts/0','with which nodes to register regularly, alternativ'],['fun','scalaris','config:replicaPrefixes/0','prefixes used for the replicas.'],['fun','scalaris','config:replicationFactor/0','the replication degree of the system.'],['fun','scalaris','config:reregisterInterval/0','interval between two re-registrations with the boo'],['fun','scalaris','config:stabilizationInterval/0','the interval between two stabilization runs Max.'],['fun','scalaris','config:stabilizationInterval_max/0','the interval between two stabilization runs Max.'],['fun','scalaris','config:stabilizationInterval_min/0','the interval between two stabilization runs Min.'],['fun','scalaris','config:start_link/1',[]],['fun','scalaris','config:storage_clean/0','whether to recreate file storage from scratch.'],['fun','scalaris','config:storage_path/0','path of file storage directory.'],['fun','scalaris','config:storage_size/0','size of file storage directory.'],['fun','scalaris','config:succListLength/0','the length of the successor list.'],['fun','scalaris','config:testDump/0',[]],['fun','scalaris','config:testKeepAlive/0',[]],['fun','scalaris','config:tmanagerTimeout/0',[]],['fun','scalaris','config:tpFailureTimeout/0',[]],['fun','scalaris','config:transaction_log_file/0','path to the transaction log file.'],['fun','scalaris','config:transactionLookupTimeout/0','transaction node lookup timeout.'],['fun','scalaris','cs_db_otp:add_data/1','adds keys.'],['fun','scalaris','cs_db_otp:build_merkle_tree/1','build merkle tree for data, key as is and value wi'],['fun','scalaris','cs_db_otp:delete/1','deletes the key.'],['fun','scalaris','cs_db_otp:get_data/1','returns all keys.'],['fun','scalaris','cs_db_otp:get_load/1','returns the number of stored keys.'],['fun','scalaris','cs_db_otp:get_locks/1','get the locks and version of a key.'],['fun','scalaris','cs_db_otp:get_middle_key/1','returns the key, which splits the data into two eq'],['fun','scalaris','cs_db_otp:get_range/1','get keys in a range.'],['fun','scalaris','cs_db_otp:get_range_only_with_version/1','get keys and versions in a range.'],['fun','scalaris','cs_db_otp:get_range_with_version/1','get keys, locks, and versions in a range.'],['fun','scalaris','cs_db_otp:get_version/1','reads the version of a key.'],['fun','scalaris','cs_db_otp:new/0','initializes a new database.'],['fun','scalaris','cs_db_otp:print_locked_items/0',[]],['fun','scalaris','cs_db_otp:read/1','reads the version and value of a key.'],['fun','scalaris','cs_db_otp:set_read_lock/1','sets a read lock on a key       the read lock is '],['fun','scalaris','cs_db_otp:set_write_lock/1','sets a write lock on a key.'],['fun','scalaris','cs_db_otp:split_data/1','returns all keys (and removes them from the db) wh'],['fun','scalaris','cs_db_otp:start/1','Starts the server; for use with the test framework'],['fun','scalaris','cs_db_otp:start_link/1','Starts the server.'],['fun','scalaris','cs_db_otp:unset_read_lock/1','unsets a read lock on a key       the read lock i'],['fun','scalaris','cs_db_otp:unset_write_lock/1','unsets the write lock of a key       the write lo'],['fun','scalaris','cs_db_otp:update_if_newer/1','update key-value pairs if newer than the ones in t'],['fun','scalaris','cs_db_otp:write/1','updates the value of key.'],['fun','scalaris','cs_debug:debug/3',[]],['fun','scalaris','cs_debug:dump/4',[]],['fun','scalaris','cs_debug:new/0',[]],['fun','scalaris','cs_error_logger:code_change/3',[]],['fun','scalaris','cs_error_logger:handle_call/2',[]],['fun','scalaris','cs_error_logger:handle_event/2',[]],['fun','scalaris','cs_error_logger:handle_info/2',[]],['fun','scalaris','cs_error_logger:init/1',[]],['fun','scalaris','cs_error_logger:terminate/2',[]],['fun','scalaris','cs_join:join/1','join a ring and return initial state       the bo'],['fun','scalaris','cs_join:join_request/4',[]],['fun','scalaris','cs_keyholder:get_key/0','reads the key of the cs_node.'],['fun','scalaris','cs_keyholder:reinit/0',[]],['fun','scalaris','cs_keyholder:set_key/1','sets the key of the cs_node.'],['fun','scalaris','cs_keyholder:start/1',[]],['fun','scalaris','cs_keyholder:start_link/1',[]],['fun','scalaris','cs_lb:balance_load/1',[]],['fun','scalaris','cs_lb:check_balance/3',[]],['fun','scalaris','cs_lb:get_loadbalance_flag/1',[]],['fun','scalaris','cs_lb:get_middle_key/1',[]],['fun','scalaris','cs_lb:move_load/3',[]],['fun','scalaris','cs_lb:new/0',[]],['fun','scalaris','cs_lb:reset_loadbalance_flag/1',[]],['fun','scalaris','cs_lookup:reliable_get_node/3',[]],['fun','scalaris','cs_lookup:reliable_get_node_service/3',[]],['fun','scalaris','cs_lookup:unreliable_get_key/1',[]],['fun','scalaris','cs_lookup:unreliable_lookup/2',[]],['fun','scalaris','cs_replica_stabilization:createReplicatedIntervals/1',[]],['fun','scalaris','cs_replica_stabilization:recreate_replicas/1','recreates the replicas of the given key range.'],['fun','scalaris','cs_reregister:reregister/0',[]],['fun','scalaris','cs_state:details/1',[]],['fun','scalaris','cs_state:dump/1',[]],['fun','scalaris','cs_state:get_db/1',[]],['fun','scalaris','cs_state:get_lb/1',[]],['fun','scalaris','cs_state:get_my_range/1',[]],['fun','scalaris','cs_state:get_trans_log/1',[]],['fun','scalaris','cs_state:id/1',[]],['fun','scalaris','cs_state:me/1',[]],['fun','scalaris','cs_state:new/6',[]],['fun','scalaris','cs_state:new/7',[]],['fun','scalaris','cs_state:next_interval/1',[]],['fun','scalaris','cs_state:pred/1',[]],['fun','scalaris','cs_state:pred_id/1',[]],['fun','scalaris','cs_state:pred_pid/1',[]],['fun','scalaris','cs_state:rt/1',[]],['fun','scalaris','cs_state:set_db/2',[]],['fun','scalaris','cs_state:set_lb/2',[]],['fun','scalaris','cs_state:set_rt/2',[]],['fun','scalaris','cs_state:set_trans_log/2',[]],['fun','scalaris','cs_state:succ/1',[]],['fun','scalaris','cs_state:succ_id/1',[]],['fun','scalaris','cs_state:succ_pid/1',[]],['fun','scalaris','cs_state:uniqueId/1',[]],['fun','scalaris','cs_state:update_pred/2',[]],['fun','scalaris','cs_state:update_pred_succ/3',[]],['fun','scalaris','cs_state:update_succ/2',[]],['fun','scalaris','cs_sup_or:init/1',[]],['fun','scalaris','cs_sup_or:start_link/0',[]],['fun','scalaris','cs_sup_or:start_link/1',[]],['fun','scalaris','cs_xmlrpc:handler/2',[]],['fun','scalaris','cs_xmlrpc:start_link/0',[]],['fun','scalaris','database:behaviour_info/1',[]],['fun','scalaris','dn_cache:add_zombie_candidate/1',[]],['fun','scalaris','dn_cache:start/2','starts ring maintenance.'],['fun','scalaris','dn_cache:start_link/1','spawns a Dead Node Cache.'],['fun','scalaris','dn_cache:subscribe/0',[]],['fun','scalaris','dn_cache:unsubscribe/0',[]],['fun','scalaris','experiments:run_1/0',[]],['fun','scalaris','experiments:run_2/0',[]],['fun','scalaris','experiments:start/0',[]],['fun','scalaris','failuredetector2:getmytargets/0',[]],['fun','scalaris','failuredetector2:init/1',[]],['fun','scalaris','failuredetector2:remove_subscriber/1',[]],['fun','scalaris','failuredetector2:start_link/0',[]],['fun','scalaris','failuredetector2:subscribe/1','generates a failure detector for the calling proce'],['fun','scalaris','failuredetector2:unsubscribe/1','deletes the failure detector for the given pid.'],['fun','scalaris','fix_queue:add/2',[]],['fun','scalaris','fix_queue:map/2',[]],['fun','scalaris','fix_queue:new/1',[]],['fun','scalaris','gen_component:behaviour_info/1',[]],['fun','scalaris','gen_component:start/4',[]],['fun','scalaris','gen_component:start_link/1',[]],['fun','scalaris','gen_component:start_link/1',[]],['fun','scalaris','intervals:cut/1',[]],['fun','scalaris','intervals:cut_iter/2',[]],['fun','scalaris','intervals:empty/0',[]],['fun','scalaris','intervals:first/0',[]],['fun','scalaris','intervals:in/2',[]],['fun','scalaris','intervals:is_covered/1','returns true if the intervals cover the complete i'],['fun','scalaris','intervals:is_empty/1',[]],['fun','scalaris','intervals:last/0',[]],['fun','scalaris','intervals:make/1',[]],['fun','scalaris','intervals:new/1',[]],['fun','scalaris','intervals:new/1',[]],['fun','scalaris','intervals:normalize/1',[]],['fun','scalaris','intervals:sanitize/1',[]],['fun','scalaris','intervals:unpack/1',[]],['fun','scalaris','ioutils:for_each_line_in_file/4',[]],['fun','scalaris','lib_misc:make_workers/2',[]],['fun','scalaris','lib_misc:pmap1/2',[]],['fun','scalaris','lib_misc:submit_task/2',[]],['fun','scalaris','lib_misc:wait/1',[]],['fun','scalaris','log:log/2',[]],['fun','scalaris','log:log/3',[]],['fun','scalaris','log:log/4',[]],['fun','scalaris','log:start_link/0',[]],['fun','scalaris','lookup:delete_key/3',[]],['fun','scalaris','lookup:get_key/4',[]],['fun','scalaris','lookup:lookup_aux/4',[]],['fun','scalaris','lookup:lookup_fin/2',[]],['fun','scalaris','lookup:set_key/5',[]],['fun','scalaris','merkerl:allkeys/1','Produce all keys referenced in a Merkle tree.'],['fun','scalaris','merkerl:build_tree/1','Build a Merkle tree from a list of pairs represent'],['fun','scalaris','merkerl:contains/1','Checks whether the specified item is in the tree.'],['fun','scalaris','merkerl:delete/1','Remove the specified item from a tree.'],['fun','scalaris','merkerl:diff/1','Find the keys of objects which differ between the '],['fun','scalaris','merkerl:insert/1','Insert the data for a new or changed object X into'],['fun','scalaris','merkerl:test_merkle/0','A test function and example code.'],['fun','scalaris','node:id/1',[]],['fun','scalaris','node:is_null/1',[]],['fun','scalaris','node:make/2',[]],['fun','scalaris','node:new/1',[]],['fun','scalaris','node:null/0',[]],['fun','scalaris','node:pidX/1',[]],['fun','scalaris','node:uniqueId/1',[]],['fun','scalaris','node_details:hostname/1',[]],['fun','scalaris','node_details:load/1',[]],['fun','scalaris','node_details:me/1',[]],['fun','scalaris','node_details:memory/1',[]],['fun','scalaris','node_details:message_log/1',[]],['fun','scalaris','node_details:new/8',[]],['fun','scalaris','node_details:predlist/1',[]],['fun','scalaris','node_details:rt_size/1',[]],['fun','scalaris','node_details:succlist/1',[]],['fun','scalaris','preconfig:config/0','path to the chordsharp config file.'],['fun','scalaris','preconfig:cs_instances/0','number of cloned instances of chordsharp to run.'],['fun','scalaris','preconfig:cs_log_file/0','path to the chordsharp log file.'],['fun','scalaris','preconfig:cs_port/0','internet port for chordsharp.'],['fun','scalaris','preconfig:docroot/0','document root for the application yaws server.'],['fun','scalaris','preconfig:get_env/2','get an application environment with defaults.'],['fun','scalaris','preconfig:local_config/0','path to the chordsharp local config file.'],['fun','scalaris','preconfig:log_path/0','path to the log directory.'],['fun','scalaris','preconfig:yaws_port/0','yaws http port to serve.'],['fun','scalaris','process_dictionary:find_all_cs_nodes/0','tries to find all cs_node processes.'],['fun','scalaris','process_dictionary:find_all_processes/1',[]],['fun','scalaris','process_dictionary:find_cs_node/0','tries to find a cs_node process.'],['fun','scalaris','process_dictionary:find_group/1','tries to find a process group with a specific proc'],['fun','scalaris','process_dictionary:get_all_pids/0','get all pids (for fprof).'],['fun','scalaris','process_dictionary:get_groups/0','find groups for web interface.'],['fun','scalaris','process_dictionary:get_info/1','get info about process (for web interface).'],['fun','scalaris','process_dictionary:get_processes_in_group/1','find processes in a group (for web interface).'],['fun','scalaris','process_dictionary:lookup_process/1','find the process group and name of a process by pi'],['fun','scalaris','process_dictionary:lookup_process/1','looks up a process with InstanceId and Name in the'],['fun','scalaris','process_dictionary:register_process/1','register a process with InstanceId and Name.'],['fun','scalaris','process_dictionary:start/0','Starts the server; for use with the test framework'],['fun','scalaris','process_dictionary:start_link/0','Starts the server.'],['fun','scalaris','process_dictionary:start_link_for_unittest/0','Starts the server for unit testing.'],['fun','scalaris','process_dictionary:stop/0','Stops the server.'],['fun','scalaris','randoms:getRandomId/0','generates a random id.'],['fun','scalaris','ring_maintenance:behaviour_info/1',[]],['fun','scalaris','ring_maintenance:update_pred/1','functions for rm_*.erl modules to notify the cs_no'],['fun','scalaris','ring_maintenance:update_succ/1','functions for rm_*.erl modules to notify the cs_no'],['fun','scalaris','ring_maintenance:update_succ_and_pred/2','functions for rm_*.erl modules to notify the cs_no'],['fun','scalaris','rm_chord:get_as_list/0',[]],['fun','scalaris','rm_chord:get_predlist/0',[]],['fun','scalaris','rm_chord:get_successorlist/0',[]],['fun','scalaris','rm_chord:initialize/4','called once by the cs_node when joining the ring.'],['fun','scalaris','rm_chord:merge/3','merge two successor lists into one       and sort'],['fun','scalaris','rm_chord:notify/1',[]],['fun','scalaris','rm_chord:pred_left/1','notification that my pred left       parameter is'],['fun','scalaris','rm_chord:start/2','starts ring maintenance.'],['fun','scalaris','rm_chord:start_link/1','spawns a chord-like ring maintenance process.'],['fun','scalaris','rm_chord:succ_left/1','notification that my succ left       parameter is'],['fun','scalaris','rm_chord:update_pred/1','notification that my pred changed       parameter'],['fun','scalaris','rm_chord:update_succ/1','notification that my succ changed       parameter'],['fun','scalaris','rm_tman:get_as_list/0',[]],['fun','scalaris','rm_tman:get_predlist/0',[]],['fun','scalaris','rm_tman:get_successorlist/0',[]],['fun','scalaris','rm_tman:initialize/4','called once by the cs_node when joining the ring.'],['fun','scalaris','rm_tman:merge/3','merge two successor lists into one       and sort'],['fun','scalaris','rm_tman:pred_left/1','notification that my pred left       parameter is'],['fun','scalaris','rm_tman:start/2','starts ring maintenance.'],['fun','scalaris','rm_tman:start_link/1','spawns a chord-like ring maintenance process.'],['fun','scalaris','rm_tman:succ_left/1','notification that my succ left       parameter is'],['fun','scalaris','rm_tman:update_pred/1','notification that my pred changed       parameter'],['fun','scalaris','rm_tman:update_succ/1','notification that my succ changed       parameter'],['fun','scalaris','routingtable:behaviour_info/1',[]],['fun','scalaris','routingtable:initialize/3',[]],['fun','scalaris','rse_chord:init/1','initializes component.'],['fun','scalaris','rse_chord:on/1','message handler.'],['fun','scalaris','rse_chord:start_link/1','start_link for supervisor.'],['fun','scalaris','rt_chord:dump/1',[]],['fun','scalaris','rt_chord:empty/1','creates an empty routing table.'],['fun','scalaris','rt_chord:filterDeadNode/1','remove all entries.'],['fun','scalaris','rt_chord:get_keys_for_replicas/1','returns the replicas of the given key.'],['fun','scalaris','rt_chord:get_size/1','returns the size of the routing table.'],['fun','scalaris','rt_chord:getRandomNodeId/0','generates a random node id       In this case it '],['fun','scalaris','rt_chord:hash_key/1','hashes the key to the identifier space.'],['fun','scalaris','rt_chord:init_stabilize/1','starts the stabilization routine.'],['fun','scalaris','rt_chord:next_hop/1','returns the next hop to contact for a lookup.'],['fun','scalaris','rt_chord:stabilize/1','updates one entry in the routing table       and '],['fun','scalaris','rt_chord:to_dict/1',[]],['fun','scalaris','rt_chord:to_pid_list/1','returns the pids of the routing table entries .'],['fun','scalaris','rt_loop:init/1',[]],['fun','scalaris','rt_loop:on/1','message handler.'],['fun','scalaris','rt_loop:start_link/1','spawns a routing table maintenance process.'],['fun','scalaris','rt_simple:dump/1',[]],['fun','scalaris','rt_simple:empty/1','creates an empty routing table.'],['fun','scalaris','rt_simple:filterDeadNode/1','removes dead nodes from the routing table.'],['fun','scalaris','rt_simple:get_keys_for_replicas/1','returns the replicas of the given key.'],['fun','scalaris','rt_simple:get_size/1','returns the size of the routing table.'],['fun','scalaris','rt_simple:getRandomNodeId/0','generates a random node id       In this case it '],['fun','scalaris','rt_simple:hash_key/1','hashes the key to the identifier space.'],['fun','scalaris','rt_simple:init_stabilize/1','triggered by a new stabilization round.'],['fun','scalaris','rt_simple:next_hop/1','returns the next hop to contact for a lookup.'],['fun','scalaris','rt_simple:normalize/1',[]],['fun','scalaris','rt_simple:to_dict/1',[]],['fun','scalaris','rt_simple:to_pid_list/1','returns the pids of the routing table entries .'],['fun','scalaris','scalaris_ctl:process/1',[]],['fun','scalaris','scalaris_ctl:start/0',[]],['fun','scalaris','statistics:get_average_load/1',[]],['fun','scalaris','statistics:get_average_rt_size/1',[]],['fun','scalaris','statistics:get_load_std_deviation/1',[]],['fun','scalaris','statistics:get_max_memory_usage/1',[]],['fun','scalaris','statistics:get_memory_usage/1',[]],['fun','scalaris','statistics:get_ring_details/0',[]],['fun','scalaris','statistics:get_rt_size_std_deviation/1',[]],['fun','scalaris','statistics:get_total_load/1',[]],['fun','scalaris','tracer:start_link/0',[]],['fun','scalaris','tracer:tracer/1',[]],['fun','scalaris','util:dump/0',[]],['fun','scalaris','util:dump2/0',[]],['fun','scalaris','util:dump3/0',[]],['fun','scalaris','util:escape_quotes/1',[]],['fun','scalaris','util:find/2',[]],['fun','scalaris','util:get_nodes/0',[]],['fun','scalaris','util:get_stacktrace/0',[]],['fun','scalaris','util:is_between/3',[]],['fun','scalaris','util:is_between_closed/3',[]],['fun','scalaris','util:is_between_stab/3',[]],['fun','scalaris','util:ksplit/2',[]],['fun','scalaris','util:logged_exec/1',[]],['fun','scalaris','util:logger/0',[]],['fun','scalaris','util:max/2',[]],['fun','scalaris','util:min/2',[]],['fun','scalaris','util:minus/2','minus(M,N) : { x | x in M and x notin N}.'],['fun','scalaris','util:randomelem/1',[]],['fun','scalaris','util:shuffle/1',[]],['fun','scalaris','util:sleep_for_ever/0',[]],['fun','scalaris','util:trunc/2',[]],['fun','scalaris','util:uniq/1','omit repeated entries in a sorted list.'],['fun','scalaris','util:wait_for_unregister/1',[]],['fun','scalaris','yaws_wrapper:start_link/3',[]],['fun','scalaris','yaws_wrapper:try_link/3',[]]];