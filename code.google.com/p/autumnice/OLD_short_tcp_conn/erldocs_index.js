var index = [['app','autumnice','autumnice','[application]'],['mod','autumnice','ai_config',[]],['mod','autumnice','ai_httpd',[]],['mod','autumnice','ai_store_mnesia',[]],['mod','autumnice','airing_app',[]],['mod','autumnice','app_util',[]],['mod','autumnice','bench_server',[]],['mod','autumnice','benchmark_app',[]],['mod','autumnice','data_importer',[]],['mod','autumnice','e2d','the e2d application and supervisor.'],['mod','autumnice','e2d_comm','handle the commumicate with other nodes.'],['mod','autumnice','e2d_config','the config moudule, get config from manager server'],['mod','autumnice','e2d_coordinator','the coordinator for the get/put/del request.'],['mod','autumnice','e2d_http_api','a simple module access the e2d node via http     '],['mod','autumnice','e2d_httpd','handle the http request (use mochiweb).'],['mod','autumnice','e2d_membership','manager the membership with nodes,     we use the'],['mod','autumnice','e2d_node','the module manager the local node     node state:'],['mod','autumnice','e2d_node_sup','the node state supervisor.'],['mod','autumnice','e2d_server','handle the request, it communicate with the extern'],['mod','autumnice','e2d_store','the data manager.'],['mod','autumnice','e2d_store_mnesia','the data store module use mnesia.'],['mod','autumnice','e2d_sync','sync the data.'],['mod','autumnice','e2d_test',[]],['mod','autumnice','e2d_util','misc util.'],['mod','autumnice','gen_httpd',[]],['mod','autumnice','geo_util',[]],['mod','autumnice','geographic_grid',[]],['mod','autumnice','geometry',[]],['mod','autumnice','gis_parser',[]],['mod','autumnice','image_downloader',[]],['mod','autumnice','intersect',[]],['mod','autumnice','map_ranger',[]],['mod','autumnice','matrix',[]],['mod','autumnice','matrix2',[]],['mod','autumnice','merkerl','An implementation of Merkle Trees for anti-entropy'],['mod','autumnice','mochifmt','String Formatting for Erlang, inspired by Python 2'],['mod','autumnice','mochifmt_records','Formatter that understands records.'],['mod','autumnice','mochifmt_std','Template module for a mochifmt formatter.'],['mod','autumnice','mochihex','Utilities for working with hexadecimal strings.'],['mod','autumnice','mochijson','Yet another JSON (RFC 4627) library for Erlang.'],['mod','autumnice','mochijson2','Yet another JSON (RFC 4627) library for Erlang.'],['mod','autumnice','mochinum','Useful numeric algorithms for floats that cover so'],['mod','autumnice','mochiweb','Start and stop the MochiWeb server.'],['mod','autumnice','mochiweb_app','Callbacks for the mochiweb application.'],['mod','autumnice','mochiweb_charref','Converts HTML 4 charrefs and entities to codepoint'],['mod','autumnice','mochiweb_cookies','HTTP Cookie parsing and generating (RFC 2109, RFC '],['mod','autumnice','mochiweb_echo','Simple and stupid echo server to demo mochiweb_soc'],['mod','autumnice','mochiweb_headers','Case preserving (but case insensitive) HTTP Header'],['mod','autumnice','mochiweb_html','Loosely tokenizes and generates parse trees for HT'],['mod','autumnice','mochiweb_http','HTTP server.'],['mod','autumnice','mochiweb_multipart','Utilities for parsing multipart/form-data.'],['mod','autumnice','mochiweb_request','MochiWeb HTTP Request abstraction.'],['mod','autumnice','mochiweb_response','Response abstraction.'],['mod','autumnice','mochiweb_skel',[]],['mod','autumnice','mochiweb_socket_server','MochiWeb socket server.'],['mod','autumnice','mochiweb_sup','Supervisor for the mochiweb application.'],['mod','autumnice','mochiweb_util','Utilities for parsing and quoting.'],['mod','autumnice','net_util','some util function for network.'],['mod','autumnice','node_store',[]],['mod','autumnice','quardtree',[]],['mod','autumnice','quardtree2',[]],['mod','autumnice','reloader','Erlang module for automatically reloading modified'],['mod','autumnice','ring_accessor',[]],['mod','autumnice','ring_lord',[]],['mod','autumnice','ring_send',[]],['mod','autumnice','ringlord_app',[]],['mod','autumnice','store_test',[]],['mod','autumnice','test_e2d_http_api','test the http interface: GET, POST, DELETE.'],['mod','autumnice','vclock',[]],['mod','autumnice','vnode',[]],['fun','autumnice','ai_config:code_change/3',[]],['fun','autumnice','ai_config:handle_call/3',[]],['fun','autumnice','ai_config:handle_cast/2',[]],['fun','autumnice','ai_config:handle_info/2',[]],['fun','autumnice','ai_config:init/1',[]],['fun','autumnice','ai_config:start_link/0',[]],['fun','autumnice','ai_config:terminate/2',[]],['fun','autumnice','ai_httpd:handle_request/1','handle the http request.'],['fun','autumnice','ai_httpd:start_link/1',[]],['fun','autumnice','ai_store_mnesia:buckets/0','get all the buckets id the local node manager.'],['fun','autumnice','ai_store_mnesia:create_tables/0',[]],['fun','autumnice','ai_store_mnesia:del/1',[]],['fun','autumnice','ai_store_mnesia:get/1',[]],['fun','autumnice','ai_store_mnesia:init/0',[]],['fun','autumnice','ai_store_mnesia:is_db_empty/0',[]],['fun','autumnice','ai_store_mnesia:keys/1','get the keys in specify range.'],['fun','autumnice','ai_store_mnesia:put/1',[]],['fun','autumnice','ai_store_mnesia:status/0',[]],['fun','autumnice','ai_store_mnesia:table_names/0',[]],['fun','autumnice','airing_app:init/1',[]],['fun','autumnice','airing_app:start/0',[]],['fun','autumnice','airing_app:start/2',[]],['fun','autumnice','airing_app:stop/1',[]],['fun','autumnice','app_util:ensure_base_apps/0',[]],['fun','autumnice','app_util:get_host_addr_str/0',[]],['fun','autumnice','app_util:get_host_addr_str/1',[]],['fun','autumnice','app_util:get_local_ip/0',[]],['fun','autumnice','app_util:getRandomId/0',[]],['fun','autumnice','app_util:init_default_logger/1',[]],['fun','autumnice','app_util:init_logger/1',[]],['fun','autumnice','bench_server:begin_map_rangers/2',[]],['fun','autumnice','bench_server:code_change/3',[]],['fun','autumnice','bench_server:collect_experiment_data/1',[]],['fun','autumnice','bench_server:end_map_rangers/0',[]],['fun','autumnice','bench_server:handle_call/3',[]],['fun','autumnice','bench_server:handle_cast/2',[]],['fun','autumnice','bench_server:handle_info/2',[]],['fun','autumnice','bench_server:inc_test/0',[]],['fun','autumnice','bench_server:increasing_ranger/2',[]],['fun','autumnice','bench_server:init/1',[]],['fun','autumnice','bench_server:list_keys/0',[]],['fun','autumnice','bench_server:local_db_test/0',[]],['fun','autumnice','bench_server:local_db_test/1',[]],['fun','autumnice','bench_server:pressure_test/1',[]],['fun','autumnice','bench_server:refresh_rangers/0',[]],['fun','autumnice','bench_server:report_state/0',[]],['fun','autumnice','bench_server:send_testdata/1',[]],['fun','autumnice','bench_server:start_link/0',[]],['fun','autumnice','bench_server:stop_collect/0',[]],['fun','autumnice','bench_server:stop_pressure_test/0',[]],['fun','autumnice','bench_server:terminate/2',[]],['fun','autumnice','bench_server:write_measure/1',[]],['fun','autumnice','benchmark_app:init/1',[]],['fun','autumnice','benchmark_app:start/0',[]],['fun','autumnice','benchmark_app:start/2',[]],['fun','autumnice','benchmark_app:stop/1',[]],['fun','autumnice','data_importer:get_files_dir/1',[]],['fun','autumnice','data_importer:scan/1',[]],['fun','autumnice','e2d:init/1','supervisor callback.'],['fun','autumnice','e2d:start/0','start the application from the erl shell.'],['fun','autumnice','e2d:start/2','the application start callback.'],['fun','autumnice','e2d:stop/1','the application  stop callback.'],['fun','autumnice','e2d_comm:request/1','send request to other node.'],['fun','autumnice','e2d_config:code_change/3',[]],['fun','autumnice','e2d_config:get/1',[]],['fun','autumnice','e2d_config:get/1',[]],['fun','autumnice','e2d_config:get_e2d_config/1','load the local config default is ./conf/e2dynamo.c'],['fun','autumnice','e2d_config:get_ms_config/1','get configure from the manager server.'],['fun','autumnice','e2d_config:handle_call/3',[]],['fun','autumnice','e2d_config:handle_cast/2',[]],['fun','autumnice','e2d_config:handle_info/2',[]],['fun','autumnice','e2d_config:init/1',[]],['fun','autumnice','e2d_config:new_dynamo_config/1',[]],['fun','autumnice','e2d_config:start_link/1',[]],['fun','autumnice','e2d_config:terminate/2',[]],['fun','autumnice','e2d_coordinator:route/1',[]],['fun','autumnice','e2d_http_api:del/2','delete the value from the server.'],['fun','autumnice','e2d_http_api:get/1','get the key from the server.'],['fun','autumnice','e2d_http_api:put/2','add the key value to the server.'],['fun','autumnice','e2d_httpd:handle_request/1','handle the http request.'],['fun','autumnice','e2d_httpd:start_link/1',[]],['fun','autumnice','e2d_membership:add/1',[]],['fun','autumnice','e2d_membership:code_change/3',[]],['fun','autumnice','e2d_membership:handle_call/3',[]],['fun','autumnice','e2d_membership:handle_cast/2',[]],['fun','autumnice','e2d_membership:handle_info/2',[]],['fun','autumnice','e2d_membership:init/1',[]],['fun','autumnice','e2d_membership:nodedown/1','some node down.'],['fun','autumnice','e2d_membership:predecessor/1','get the predecessor of the Id.'],['fun','autumnice','e2d_membership:remove/1',[]],['fun','autumnice','e2d_membership:select_coordinator/1','select coordinator.'],['fun','autumnice','e2d_membership:start_link/0',[]],['fun','autumnice','e2d_membership:successor/1','get the successor of the Id.'],['fun','autumnice','e2d_membership:terminate/2',[]],['fun','autumnice','e2d_membership:to_list/0',[]],['fun','autumnice','e2d_membership:update/1',[]],['fun','autumnice','e2d_membership:update_node/2',[]],['fun','autumnice','e2d_node:code_change/3',[]],['fun','autumnice','e2d_node:handle_call/3',[]],['fun','autumnice','e2d_node:handle_cast/2',[]],['fun','autumnice','e2d_node:handle_info/2',[]],['fun','autumnice','e2d_node:id/0',[]],['fun','autumnice','e2d_node:init/1',[]],['fun','autumnice','e2d_node:runtime/0','return running time(unit second).'],['fun','autumnice','e2d_node:self/0',[]],['fun','autumnice','e2d_node:start_link/1',[]],['fun','autumnice','e2d_node:status/0',[]],['fun','autumnice','e2d_node:terminate/2',[]],['fun','autumnice','e2d_node_sup:code_change/3',[]],['fun','autumnice','e2d_node_sup:handle_call/2',[]],['fun','autumnice','e2d_node_sup:handle_event/2',[]],['fun','autumnice','e2d_node_sup:handle_info/2',[]],['fun','autumnice','e2d_node_sup:init/1',[]],['fun','autumnice','e2d_node_sup:nodedown/1','node failure.'],['fun','autumnice','e2d_node_sup:nodeup/1','node login.'],['fun','autumnice','e2d_node_sup:start_link/1',[]],['fun','autumnice','e2d_node_sup:terminate/2',[]],['fun','autumnice','e2d_node_sup:update_nodes/1',[]],['fun','autumnice','e2d_server:code_change/3',[]],['fun','autumnice','e2d_server:del/1','delete the key.'],['fun','autumnice','e2d_server:get/1','get the key.'],['fun','autumnice','e2d_server:get_version/0','get the application version.'],['fun','autumnice','e2d_server:handle_call/3',[]],['fun','autumnice','e2d_server:handle_cast/2',[]],['fun','autumnice','e2d_server:handle_info/2',[]],['fun','autumnice','e2d_server:init/1',[]],['fun','autumnice','e2d_server:put/1','update the key.'],['fun','autumnice','e2d_server:start_link/1',[]],['fun','autumnice','e2d_server:terminate/2',[]],['fun','autumnice','e2d_store:code_change/3',[]],['fun','autumnice','e2d_store:del/1',[]],['fun','autumnice','e2d_store:get/1',[]],['fun','autumnice','e2d_store:get_buckets_id/1',[]],['fun','autumnice','e2d_store:get_merkle/1','get all the merkle tree.'],['fun','autumnice','e2d_store:get_merkle_root/1','get root hash of merkle tree.'],['fun','autumnice','e2d_store:handle_call/3',[]],['fun','autumnice','e2d_store:handle_cast/2',[]],['fun','autumnice','e2d_store:handle_info/2',[]],['fun','autumnice','e2d_store:init/1',[]],['fun','autumnice','e2d_store:put/1',[]],['fun','autumnice','e2d_store:remove_buckets/1','remove the data belong to the buckets.'],['fun','autumnice','e2d_store:start_link/0',[]],['fun','autumnice','e2d_store:terminate/2',[]],['fun','autumnice','e2d_store:update_merkle_tree/1','update the merkle tree.'],['fun','autumnice','e2d_store_mnesia:buckets/0','get all the buckets id the local node manager.'],['fun','autumnice','e2d_store_mnesia:create_tables/0',[]],['fun','autumnice','e2d_store_mnesia:del/1',[]],['fun','autumnice','e2d_store_mnesia:get/1',[]],['fun','autumnice','e2d_store_mnesia:init/0',[]],['fun','autumnice','e2d_store_mnesia:is_db_empty/0',[]],['fun','autumnice','e2d_store_mnesia:keys/1','get the keys in specify range.'],['fun','autumnice','e2d_store_mnesia:put/1',[]],['fun','autumnice','e2d_store_mnesia:status/0',[]],['fun','autumnice','e2d_store_mnesia:table_names/0',[]],['fun','autumnice','e2d_sync:sync_bucket/1','sync the Bucket from the Node.'],['fun','autumnice','e2d_sync:sync_buckets/1','sync the Buckets from the Node.'],['fun','autumnice','e2d_sync:update_buckets/0','update all the buckets from the nodes.'],['fun','autumnice','e2d_test:start/0',[]],['fun','autumnice','e2d_util:any_to_binary/1','covert any term to binary.'],['fun','autumnice','e2d_util:any_to_list/1','covert any term to list.'],['fun','autumnice','e2d_util:bucket_range/1','the range of per bucket.'],['fun','autumnice','e2d_util:consult_str/1','consult string.'],['fun','autumnice','e2d_util:hash/1','gen the identify.'],['fun','autumnice','e2d_util:split_list/1','find the Val in L, if find the Val in pos N,    t'],['fun','autumnice','gen_httpd:behaviour_info/1',[]],['fun','autumnice','gen_httpd:init/3',[]],['fun','autumnice','gen_httpd:negotiate_content_type/1',[]],['fun','autumnice','geo_util:cell_to_json/1',[]],['fun','autumnice','geo_util:get_coordinates_from_address/1',[]],['fun','autumnice','geo_util:get_quadtree_address/2',[]],['fun','autumnice','geo_util:get_quadtree_address/3',[]],['fun','autumnice','geo_util:longitude_diff/1',[]],['fun','autumnice','geographic_grid:grid_coding/1',[]],['fun','autumnice','geographic_grid:hashing/1',[]],['fun','autumnice','geographic_grid:hashing_str/1',[]],['fun','autumnice','geometry:distance/4',[]],['fun','autumnice','image_downloader:create_list_file/1',[]],['fun','autumnice','image_downloader:download_images/1',[]],['fun','autumnice','image_downloader:process/0',[]],['fun','autumnice','image_downloader:start/0',[]],['fun','autumnice','image_downloader:start/1',[]],['fun','autumnice','image_downloader:start/2',[]],['fun','autumnice','image_downloader:stop/0',[]],['fun','autumnice','intersect:is_intersectant/1',[]],['fun','autumnice','map_ranger:start/1',[]],['fun','autumnice','map_ranger:start/3',[]],['fun','autumnice','matrix2:adjust_inlet/1',[]],['fun','autumnice','matrix2:adjust_outlet/1',[]],['fun','autumnice','matrix2:divide/1',[]],['fun','autumnice','matrix:divide/1',[]],['fun','autumnice','matrix:modify_inlet/2',[]],['fun','autumnice','matrix:modify_outlet/2',[]],['fun','autumnice','merkerl:allkeys/1','Produce all keys referenced in a Merkle tree.'],['fun','autumnice','merkerl:build_tree/1','Build a Merkle tree from a list of pairs represent'],['fun','autumnice','merkerl:delete/1','Remove the specified item from a tree.'],['fun','autumnice','merkerl:diff/1','Find the keys of objects which differ between the '],['fun','autumnice','merkerl:insert/1','Insert the data for a new or changed object X into'],['fun','autumnice','merkerl:root/1',[]],['fun','autumnice','merkerl:sha/1',[]],['fun','autumnice','merkerl:test_merkle/0','A test function and example code.'],['fun','autumnice','mochifmt:bformat/1','Format Args with Format using Module and return a '],['fun','autumnice','mochifmt:bformat/1','Format Args with Format and return a binary().'],['fun','autumnice','mochifmt:convert_field/2','Process Arg according to the given explicit conver'],['fun','autumnice','mochifmt:f/1','Format Args with Format using Module and return a '],['fun','autumnice','mochifmt:f/1','Format Args with Format and return a string().'],['fun','autumnice','mochifmt:format/1','Format Args with Format using Module.'],['fun','autumnice','mochifmt:format/1','Format Args with Format.'],['fun','autumnice','mochifmt:format_field/2','Format Arg with Format.'],['fun','autumnice','mochifmt:format_field/3','Format Arg with Format.'],['fun','autumnice','mochifmt:get_field/1','Consecutively call Module:get_value/2 on parts of '],['fun','autumnice','mochifmt:get_field/1','Consecutively call get_value/2 on parts of Key del'],['fun','autumnice','mochifmt:get_value/1','Get the Key from Args.'],['fun','autumnice','mochifmt:test/0','Run tests.'],['fun','autumnice','mochifmt:tokenize/1','Tokenize a format string into mochifmts internal '],['fun','autumnice','mochifmt_records:get_value/2',[]],['fun','autumnice','mochifmt_std:convert_field/2',[]],['fun','autumnice','mochifmt_std:format/2',[]],['fun','autumnice','mochifmt_std:format_field/2',[]],['fun','autumnice','mochifmt_std:get_field/2',[]],['fun','autumnice','mochifmt_std:get_value/2',[]],['fun','autumnice','mochihex:dehex/1','Convert a hex digit to its integer value.'],['fun','autumnice','mochihex:hexdigit/1','Convert an integer less than 16 to a hex digit.'],['fun','autumnice','mochihex:test/0','Test this module.'],['fun','autumnice','mochihex:to_bin/1','Convert a hexadecimal string to a binary.'],['fun','autumnice','mochihex:to_hex/1','Convert an iolist to a hexadecimal string.'],['fun','autumnice','mochihex:to_int/1','Convert a hexadecimal string to an integer.'],['fun','autumnice','mochijson2:decode/1','Decode the given iolist to Erlang terms.'],['fun','autumnice','mochijson2:decoder/1','Create a decoder/1 with the given options.'],['fun','autumnice','mochijson2:encode/1','Encode the given as JSON to an iolist.'],['fun','autumnice','mochijson2:encoder/1','Create an encoder/1 with the given options.'],['fun','autumnice','mochijson2:test/0',[]],['fun','autumnice','mochijson:binary_decode/1','Decode the given iolist to Erlang terms, using lis'],['fun','autumnice','mochijson:binary_decoder/1','Create a binary_decoder/1 with the given options.'],['fun','autumnice','mochijson:binary_encode/1','Encode the given as JSON to an iolist, using lists'],['fun','autumnice','mochijson:binary_encoder/1','Create a binary_encoder/1 with the given options.'],['fun','autumnice','mochijson:decode/1','Decode the given iolist to Erlang terms.'],['fun','autumnice','mochijson:decoder/1','Create a decoder/1 with the given options.'],['fun','autumnice','mochijson:encode/1','Encode the given as JSON to an iolist.'],['fun','autumnice','mochijson:encoder/1','Create an encoder/1 with the given options.'],['fun','autumnice','mochijson:test/0',[]],['fun','autumnice','mochinum:digits/1',' Returns a string that accurately represents the g'],['fun','autumnice','mochinum:frexp/1',' Return the fractional and exponent part of an IEE'],['fun','autumnice','mochinum:int_ceil/1',' Return the ceiling of F as an integer.'],['fun','autumnice','mochinum:int_pow/1',' Moderately efficient way to exponentiate integers'],['fun','autumnice','mochinum:test/0',[]],['fun','autumnice','mochiweb:all_loaded/0',[]],['fun','autumnice','mochiweb:all_loaded/1',[]],['fun','autumnice','mochiweb:new_request/3','Return a mochiweb_request data structure.'],['fun','autumnice','mochiweb:new_response/2','Return a mochiweb_response data structure.'],['fun','autumnice','mochiweb:reload/0',[]],['fun','autumnice','mochiweb:start/0','Start the MochiWeb server.'],['fun','autumnice','mochiweb:stop/0','Stop the MochiWeb server.'],['fun','autumnice','mochiweb:test/0','Run all of the tests for MochiWeb.'],['fun','autumnice','mochiweb_app:start/2','application start callback for mochiweb.'],['fun','autumnice','mochiweb_app:stop/1','application stop callback for mochiweb.'],['fun','autumnice','mochiweb_charref:charref/1','Convert a decimal charref, hex charref, or html en'],['fun','autumnice','mochiweb_charref:test/0','Run tests for mochiweb_charref.'],['fun','autumnice','mochiweb_cookies:cookie/1','Generate a Set-Cookie header field tuple.'],['fun','autumnice','mochiweb_cookies:cookie/1','Short-hand for cookie(Key, Value, []).'],['fun','autumnice','mochiweb_cookies:parse_cookie/1','Parse the contents of a Cookie header field, ignor'],['fun','autumnice','mochiweb_cookies:test/0','Run tests for mochiweb_cookies.'],['fun','autumnice','mochiweb_echo:loop/1',[]],['fun','autumnice','mochiweb_echo:start/0',[]],['fun','autumnice','mochiweb_echo:stop/0',[]],['fun','autumnice','mochiweb_headers:default/1','Insert the pair into the headers if it does not al'],['fun','autumnice','mochiweb_headers:default_from_list/1','Insert pairs into the headers for keys that do not'],['fun','autumnice','mochiweb_headers:delete_any/1','Delete the header corresponding to key if it is pr'],['fun','autumnice','mochiweb_headers:empty/0','Create an empty headers structure.'],['fun','autumnice','mochiweb_headers:enter/1','Insert the pair into the headers, replacing any pr'],['fun','autumnice','mochiweb_headers:enter_from_list/1','Insert pairs into the headers, replace any values '],['fun','autumnice','mochiweb_headers:from_list/1','Construct a headers() from the given list.'],['fun','autumnice','mochiweb_headers:get_primary_value/1','Return the value of the given header up to the fir'],['fun','autumnice','mochiweb_headers:get_value/1','Return the value of the given header using a case '],['fun','autumnice','mochiweb_headers:insert/1','Insert the pair into the headers, merging with any'],['fun','autumnice','mochiweb_headers:lookup/1','Return the case preserved key and value for the gi'],['fun','autumnice','mochiweb_headers:make/1','Construct a headers() from the given list.'],['fun','autumnice','mochiweb_headers:test/0','Run tests for this module.'],['fun','autumnice','mochiweb_headers:to_list/1','Return the contents of the headers.'],['fun','autumnice','mochiweb_html:escape/1','Escape a string such that its safe for HTML (amp;'],['fun','autumnice','mochiweb_html:escape_attr/1','Escape a string such that its safe for HTML attrs'],['fun','autumnice','mochiweb_html:parse/1','tokenize and then transform the token stream into '],['fun','autumnice','mochiweb_html:parse_tokens/1','Transform the output of tokens(Doc) into a HTML tr'],['fun','autumnice','mochiweb_html:test/0','Run tests for mochiweb_html.'],['fun','autumnice','mochiweb_html:to_html/1','Convert a list of html_token() to a HTML document.'],['fun','autumnice','mochiweb_html:to_tokens/1','Convert a html_node() tree to a list of tokens.'],['fun','autumnice','mochiweb_html:tokens/1','Transform the input UTF-8 HTML into a token stream'],['fun','autumnice','mochiweb_http:default_body/1',[]],['fun','autumnice','mochiweb_http:loop/2',[]],['fun','autumnice','mochiweb_http:start/0',[]],['fun','autumnice','mochiweb_http:start/1',[]],['fun','autumnice','mochiweb_http:stop/0',[]],['fun','autumnice','mochiweb_http:stop/1',[]],['fun','autumnice','mochiweb_multipart:parse_form/1',[]],['fun','autumnice','mochiweb_multipart:parse_form/2',[]],['fun','autumnice','mochiweb_multipart:parse_multipart_request/2',[]],['fun','autumnice','mochiweb_multipart:test/0',[]],['fun','autumnice','mochiweb_request:cleanup/0','Clean up any junk in the process dictionary, requi'],['fun','autumnice','mochiweb_request:dump/0','Dump the internal representation to a "human reada'],['fun','autumnice','mochiweb_request:get/1','Return the internal representation of the given fi'],['fun','autumnice','mochiweb_request:get_cookie_value/1','Get the value of the given cookie.'],['fun','autumnice','mochiweb_request:get_header_value/1','Get the value of a given request header.'],['fun','autumnice','mochiweb_request:get_primary_header_value/1',[]],['fun','autumnice','mochiweb_request:not_found/0','Alias for not_found([]).'],['fun','autumnice','mochiweb_request:not_found/1','Alias for respond({404, [{"Content-Type", "text/pl'],['fun','autumnice','mochiweb_request:ok/1','respond({200, [{"Content-Type", ContentType} | Hea'],['fun','autumnice','mochiweb_request:parse_cookie/0','Parse the cookie header.'],['fun','autumnice','mochiweb_request:parse_post/0','Parse an application/x-www-form-urlencoded form PO'],['fun','autumnice','mochiweb_request:parse_qs/0','Parse the query string of the URL.'],['fun','autumnice','mochiweb_request:recv/1','Receive Length bytes from the client as a binary, '],['fun','autumnice','mochiweb_request:recv/1','Receive Length bytes from the client as a binary, '],['fun','autumnice','mochiweb_request:recv_body/0','Receive the body of the HTTP request (defined by C'],['fun','autumnice','mochiweb_request:recv_body/1','Receive the body of the HTTP request (defined by C'],['fun','autumnice','mochiweb_request:respond/1','Start the HTTP response with start_response, and s'],['fun','autumnice','mochiweb_request:send/1','Send data over the socket.'],['fun','autumnice','mochiweb_request:serve_file/2','Serve a file relative to DocRoot.'],['fun','autumnice','mochiweb_request:serve_file/3','Serve a file relative to DocRoot.'],['fun','autumnice','mochiweb_request:should_close/0','Return true if the connection must be closed.'],['fun','autumnice','mochiweb_request:start_raw_response/1','Start the HTTP response by sending the Code HTTP r'],['fun','autumnice','mochiweb_request:start_response/1','Start the HTTP response by sending the Code HTTP r'],['fun','autumnice','mochiweb_request:start_response_length/1','Start the HTTP response by sending the Code HTTP r'],['fun','autumnice','mochiweb_request:stream_body/3',[]],['fun','autumnice','mochiweb_request:test/0',[]],['fun','autumnice','mochiweb_response:dump/0','Dump the internal representation to a "human reada'],['fun','autumnice','mochiweb_response:get/1','Return the internal representation of the given fi'],['fun','autumnice','mochiweb_response:get_header_value/1','Get the value of the given response header.'],['fun','autumnice','mochiweb_response:send/1','Send data over the socket if the method is not HEA'],['fun','autumnice','mochiweb_response:write_chunk/1','Write a chunk of a HTTP chunked response.'],['fun','autumnice','mochiweb_skel:skelcopy/2',[]],['fun','autumnice','mochiweb_socket_server:acceptor_loop/1',[]],['fun','autumnice','mochiweb_socket_server:code_change/3',[]],['fun','autumnice','mochiweb_socket_server:get/2',[]],['fun','autumnice','mochiweb_socket_server:handle_call/3',[]],['fun','autumnice','mochiweb_socket_server:handle_cast/2',[]],['fun','autumnice','mochiweb_socket_server:handle_info/2',[]],['fun','autumnice','mochiweb_socket_server:init/1',[]],['fun','autumnice','mochiweb_socket_server:start/1',[]],['fun','autumnice','mochiweb_socket_server:stop/1',[]],['fun','autumnice','mochiweb_socket_server:terminate/2',[]],['fun','autumnice','mochiweb_sup:init/1','supervisor callback, ensures yaws is in embedded m'],['fun','autumnice','mochiweb_sup:start_link/0','API for starting the supervisor.'],['fun','autumnice','mochiweb_sup:upgrade/0','Add processes if necessary.'],['fun','autumnice','mochiweb_util:cmd/1','os:cmd(cmd_string(Argv)).'],['fun','autumnice','mochiweb_util:cmd_port/1','open_port({spawn, mochiweb_util:cmd_string(Argv)},'],['fun','autumnice','mochiweb_util:cmd_string/1','Create a shell quoted command string from a list o'],['fun','autumnice','mochiweb_util:guess_mime/1',' Guess the mime type of a file by the extension of'],['fun','autumnice','mochiweb_util:join/1','Join a list of strings together with the given sep'],['fun','autumnice','mochiweb_util:parse_header/1',' Parse a Content-Type like header, return the main'],['fun','autumnice','mochiweb_util:parse_qs/1','Parse a query string or application/x-www-form-url'],['fun','autumnice','mochiweb_util:partition/2','Inspired by Python 2.5s str.partition:       par'],['fun','autumnice','mochiweb_util:path_split/1','Split a path starting from the left, as in URL tra'],['fun','autumnice','mochiweb_util:quote_plus/1','URL safe encoding of the given term.'],['fun','autumnice','mochiweb_util:record_to_proplist/2','calls record_to_proplist/3 with a default TypeKey '],['fun','autumnice','mochiweb_util:record_to_proplist/3','Return a proplist of the given Record with each fi'],['fun','autumnice','mochiweb_util:safe_relative_path/1','Return the reduced version of a relative path or u'],['fun','autumnice','mochiweb_util:shell_quote/1','Quote a string according to UNIX shell quoting rul'],['fun','autumnice','mochiweb_util:test/0',[]],['fun','autumnice','mochiweb_util:unquote/1','Unquote a URL encoded string.'],['fun','autumnice','mochiweb_util:urlencode/2','URL encode the property list.'],['fun','autumnice','mochiweb_util:urlsplit/1','Return a 5-tuple, does not expand % escapes.'],['fun','autumnice','mochiweb_util:urlsplit_path/1','Return a 3-tuple, does not expand % escapes.'],['fun','autumnice','mochiweb_util:urlunsplit/5','Assemble a URL from the 5-tuple.'],['fun','autumnice','mochiweb_util:urlunsplit_path/3','Assemble a URL path from the 3-tuple.'],['fun','autumnice','net_util:http_get/1',[]],['fun','autumnice','net_util:http_get/1',[]],['fun','autumnice','node_store:acceptor_loop/1',[]],['fun','autumnice','node_store:code_change/3',[]],['fun','autumnice','node_store:get/1',[]],['fun','autumnice','node_store:handle_call/3',[]],['fun','autumnice','node_store:handle_cast/2',[]],['fun','autumnice','node_store:handle_info/2',[]],['fun','autumnice','node_store:init/1',[]],['fun','autumnice','node_store:put/1',[]],['fun','autumnice','node_store:send/2',[]],['fun','autumnice','node_store:start_link/1',[]],['fun','autumnice','node_store:terminate/2',[]],['fun','autumnice','quardtree:all_nodes/1',[]],['fun','autumnice','quardtree:depth/1',[]],['fun','autumnice','quardtree:get_children/1',[]],['fun','autumnice','quardtree:leaves/1',[]],['fun','autumnice','quardtree:nlevel_nodes/1',[]],['fun','autumnice','quardtree:nth_node/1',[]],['fun','autumnice','quardtree:sub_quardtree/1',[]],['fun','autumnice','quardtree:sum/1',[]],['fun','autumnice','reloader:code_change/3','gen_server code_change callback (trivial).'],['fun','autumnice','reloader:handle_call/3','gen_server callback.'],['fun','autumnice','reloader:handle_cast/2','gen_server callback.'],['fun','autumnice','reloader:handle_info/2','gen_server callback.'],['fun','autumnice','reloader:init/1','gen_server init, opens the server in an initial st'],['fun','autumnice','reloader:start/0','Start the reloader.'],['fun','autumnice','reloader:start_link/0','Start the reloader.'],['fun','autumnice','reloader:stop/0','Stop the reloader.'],['fun','autumnice','reloader:terminate/2','gen_server termination callback.'],['fun','autumnice','ring_accessor:code_change/3',[]],['fun','autumnice','ring_accessor:get_from_ring/1',[]],['fun','autumnice','ring_accessor:handle_call/3',[]],['fun','autumnice','ring_accessor:handle_cast/2',[]],['fun','autumnice','ring_accessor:handle_info/2',[]],['fun','autumnice','ring_accessor:init/1',[]],['fun','autumnice','ring_accessor:list_ringnodes/0',[]],['fun','autumnice','ring_accessor:put_to_ring/2',[]],['fun','autumnice','ring_accessor:start_link/1',[]],['fun','autumnice','ring_accessor:terminate/2',[]],['fun','autumnice','ring_lord:add_ringaccessor/1',[]],['fun','autumnice','ring_lord:add_ringnode/1',[]],['fun','autumnice','ring_lord:code_change/3',[]],['fun','autumnice','ring_lord:get_ringnodes/0',[]],['fun','autumnice','ring_lord:handle_call/3',[]],['fun','autumnice','ring_lord:handle_cast/2',[]],['fun','autumnice','ring_lord:handle_info/2',[]],['fun','autumnice','ring_lord:init/1',[]],['fun','autumnice','ring_lord:list_ringaccessores/0',[]],['fun','autumnice','ring_lord:list_ringnodes/0',[]],['fun','autumnice','ring_lord:start_link/0',[]],['fun','autumnice','ring_lord:terminate/2',[]],['fun','autumnice','ring_send:send/2',[]],['fun','autumnice','ringlord_app:init/1',[]],['fun','autumnice','ringlord_app:start/0',[]],['fun','autumnice','ringlord_app:start/2',[]],['fun','autumnice','ringlord_app:stop/1',[]],['fun','autumnice','store_test:get/1',[]],['fun','autumnice','store_test:put/2',[]],['fun','autumnice','test_e2d_http_api:adel/2',[]],['fun','autumnice','test_e2d_http_api:aget/2',[]],['fun','autumnice','test_e2d_http_api:aput/2',[]],['fun','autumnice','test_e2d_http_api:multi_req/2',[]],['fun','autumnice','test_e2d_http_api:start/1',[]],['fun','autumnice','vclock:descends/1','if the Va descends from the Vb return true,    if'],['fun','autumnice','vclock:extend/1','add the new entry to vector clock.'],['fun','autumnice','vclock:get_counter/1','return the nodes Counter.'],['fun','autumnice','vclock:get_stamp/1','return the nodes last access stamp.'],['fun','autumnice','vclock:increase/1','increase nodes counter.'],['fun','autumnice','vclock:merge/1','merge the two clocks.'],['fun','autumnice','vclock:merge/1','merge the two clocks.'],['fun','autumnice','vclock:new/0','return an empty vector clock.'],['fun','autumnice','vclock:size/1','return number of entry in vector clock.']];